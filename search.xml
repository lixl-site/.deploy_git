<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Arthas工具使用</title>
    <url>/hexoblog/20200409191549.html</url>
    <content><![CDATA[<p><a href="https://alibaba.github.io/arthas/arthas-tutorials?language=cn&id=arthas-basics" target="_blank" rel="noopener">Arthas 基础教程</a>   </p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://alibaba.github.io/arthas/install-detail.html#" target="_blank" rel="noopener">https://alibaba.github.io/arthas/install-detail.html#</a>               </p>
<h2 id="arthas-boot启动"><a href="#arthas-boot启动" class="headerlink" title="arthas-boot启动"></a>arthas-boot启动</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://alibaba.github.io/arthas/arthas-boot.jar</span><br><span class="line">java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>

<h2 id="docker内使用"><a href="#docker内使用" class="headerlink" title="docker内使用"></a>docker内使用</h2><p><a href="https://alibaba.github.io/arthas/docker.html#id1" target="_blank" rel="noopener">https://alibaba.github.io/arthas/docker.html#id1</a>        </p>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a><a href="https://gitee.com/lixl/arthas-demo.git" target="_blank" rel="noopener">代码示例</a></h2><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="jvm-sysenv-sysprop-dashboard"><a href="#jvm-sysenv-sysprop-dashboard" class="headerlink" title="jvm sysenv sysprop dashboard"></a>jvm sysenv sysprop dashboard</h2><p>查询系统信息</p>
<h2 id="heapdump"><a href="#heapdump" class="headerlink" title="heapdump"></a>heapdump</h2><p>dump java heap, 类似jmap命令的heap dump功能。       </p>
<ul>
<li>dump到指定文件  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@58205]$ heapdump /tmp/dump.hprof</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h2><p>可用来检测cpu过高或者陷入死循环<br>与<code>jstack pid</code>用法一致</p>
<h2 id="trace"><a href="#trace" class="headerlink" title="trace"></a>trace</h2><p>trace 命令能主动搜索 class-pattern／method-pattern 对应的方法调用路径，渲染和统计整个调用链路上的所有性能开销和追踪调用链路。<br><code>[arthas@10048]$ trace com.example.springbootdemo.test.FullGC_Problem01 doWork</code></p>
<h2 id="monitor-watch"><a href="#monitor-watch" class="headerlink" title="monitor watch"></a>monitor watch</h2><p>monitor 方法执行监控<br>对匹配 class-pattern／method-pattern的类、方法的调用进行监控。<br>watch 方法执行数据观测。<br>让你能方便的观察到指定方法的调用情况。能观察到的范围为：返回值、抛出异常、入参</p>
<h2 id="jad-mc-redefine"><a href="#jad-mc-redefine" class="headerlink" title="jad mc redefine"></a>jad mc redefine</h2><p>jad 反编译class为java文件<br>mc 内存编译器<br>redefine 热加载class        </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jad --source-only com.example.demo.arthas.user.UserController &gt; /tmp/UserController.java</span><br><span class="line"> </span><br><span class="line">mc /tmp/UserController.java -d /tmp</span><br><span class="line"> </span><br><span class="line">redefine /tmp/com/example/demo/arthas/user/UserController.class</span><br></pre></td></tr></table></figure>

<h2 id="sc-sm"><a href="#sc-sm" class="headerlink" title="sc sm"></a>sc sm</h2><p>sc 查看JVM已加载的类信息<br>“Search-Class” 的简写，这个命令能搜索出所有已经加载到 JVM 中的 Class 信息。<br>sm 查看已加载类的方法信息<br>“Search-Method” 的简写，这个命令能搜索出所有已经加载了 Class 信息的方法信息</p>
]]></content>
  </entry>
  <entry>
    <title>Docker可视化工具Portainer</title>
    <url>/hexoblog/20200410111846.html</url>
    <content><![CDATA[<h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9000:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --name prtainer  localhost:5000/portainer/portainer</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker/volumes:/var/lib/docker/volumes -v /:/host --restart always -e EDGE=1 -e EDGE_ID=94881816-de1e-4d9c-8cb0-4faa3fdf424a -e EDGE_KEY=aHR0cDovLzE5Mi4xNjguMTguMTM5OjkwMDB8MTkyLjE2OC4xOC4xMzk6ODAwMHw3ODoxYzozMjplYTpjYTo2Yjo5ZDowZTowMzoxODo2NjpjOTpmNTowYjpjYjplNnwy -e CAP_HOST_MANAGEMENT=1 -v portainer_agent_data:/data --name portainer_edge_agent 192.168.18.139:5000/portainer/agent</span><br></pre></td></tr></table></figure>

<h1 id="docker-portainer-endpoint"><a href="#docker-portainer-endpoint" class="headerlink" title="docker portainer endpoint"></a>docker portainer endpoint</h1><p>本地主机通过portainer面板管理远程主机docker     </p>
]]></content>
  </entry>
  <entry>
    <title>Java-DaemonThread</title>
    <url>/hexoblog/20200531174517.html</url>
    <content><![CDATA[<h1 id="守护线程与普通线程"><a href="#守护线程与普通线程" class="headerlink" title="守护线程与普通线程"></a>守护线程与普通线程</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaemonThreadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//TODO 守护线程(sleep 6s)</span></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">6000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.setDaemon(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//TODO 普通线程(sleep 1s)</span></span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"thread-"</span>+<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 普通线程执行完后，守护线程就自动结束了(没有输出了)</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>demon-thread(守护线程)，在jvm检测到没有前台(普通)线程运行时，就会自动终止守护线程；<br>(把daemon线程当做普通线程很危险，因为不知道什么时候就会终止掉了)</p>
<p>如果还有一个或以上的非守护线程则JVM不会退出(这也是有的web应用无法被shutdown的原因吧)</p>
<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="GC垃圾回收器"><a href="#GC垃圾回收器" class="headerlink" title="GC垃圾回收器"></a>GC垃圾回收器</h2><p>gc线程就是一个daemon-thread，有其他线程运行时它是正常处理(回收内存垃圾)；<br>当jvm终止前检查到没有普通线程运行时，就会自动终止gc线程。</p>
<h2 id="web容器-tomcat"><a href="#web容器-tomcat" class="headerlink" title="web容器(tomcat)"></a>web容器(tomcat)</h2><ol>
<li><p>tomcat启动时整个进程会使用socket阻塞在8005端口,参考<code>org.apache.catalina.core.StandardServer#await</code>;收到SHOWDOWN信号后停止主线程<code>org.apache.catalina.startup.Catalina#stopServer</code></p>
</li>
<li><p>(Java中守护线程的总结)[<a href="https://blog.csdn.net/shimiso/article/details/8964414]" target="_blank" rel="noopener">https://blog.csdn.net/shimiso/article/details/8964414]</a></p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Java开发手册学习</title>
    <url>/hexoblog/20200504183258.html</url>
    <content><![CDATA[<p><a href="http://note.youdao.com/noteshare?id=3712927311125dedab23195ebd9c99e7" target="_blank" rel="noopener">阿里开发手册-泰山版</a></p>
<h1 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h1><h2 id="命名风格"><a href="#命名风格" class="headerlink" title="命名风格"></a>命名风格</h2><ol>
<li>用英文、驼峰方式命名        </li>
<li>包名小写(linux区分大小写，windows不区分，对部署有影响)</li>
<li>尽量达到代码自解释的目标(命名用完整的单词)</li>
<li>接口类中的方法和属性不要加任何修饰符号（public 也不要加），保持代码的简洁性，并加上有效的 Javadoc 注释。<br>尽量不要在接口里定义变量，如果一定要定义变量，确定与接口方法相关，并且是整个应用的基础常量。</li>
<li>各层命名规约：<br>A) Service/DAO 层方法命名规约<br>1） 获取单个对象的方法用 get 做前缀。<br>2） 获取多个对象的方法用 list 做前缀，复数结尾，如：listObjects。 3） 获取统计值的方法用 count 做前缀。 4） 插入的方法用 save/insert 做前缀。<br>5） 删除的方法用 remove/delete 做前缀。<br>6） 修改的方法用 update 做前缀。<br>B) 领域模型命名规约<br>1） 数据对象：xxxDO，xxx 即为数据表名。<br>2） 数据传输对象：xxxDTO，xxx 为业务领域相关的名称。<br>3） 展示对象：xxxVO，xxx 一般为网页名称。<br>4） POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。</li>
</ol>
<h2 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h2><ol>
<li>不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。</li>
<li>常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。<br>1） 跨应用共享常量：放置在二方库中，通常是 client.jar 中的 constant 目录下。<br>2） 应用内共享常量：放置在一方库中，通常是子模块中的 constant 目录下。<br>3） 子工程内部共享常量：即在当前子工程的 constant 目录下。<br>4） 包内共享常量：即在当前包下单独的 constant 目录下。<br>5） 类内共享常量：直接在类内部 private static final 定义。</li>
</ol>
<h2 id="代码格式"><a href="#代码格式" class="headerlink" title="代码格式"></a>代码格式</h2><h2 id="OOP-规约"><a href="#OOP-规约" class="headerlink" title="OOP 规约"></a>OOP 规约</h2><ol>
<li>尽量不要用可变参数</li>
<li>外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生影响。<br>接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。</li>
<li>不能使用过时的类或方法。<br>接口提供方既然明确是过时接口，那么有义务同时提供新的接口；<br>作为调用方来说，有义务去考证过时方法的新实现是什么。</li>
<li>判断相等<br>1) 对象及包装类使用equals判、注意NPE<br>2) 浮点型要考虑差值判断(二进制无法精准表示浮点型)</li>
<li>任何货币金额，均以最小货币单位且整型类型来进行存储<br>1)还是浮点型数据的锅，可以用BigDecimal<br>2)BigDecimal为保证浮点型精度，入参使用String</li>
<li>基本数据类型与包装数据类型的使用标准如下：<br>1）所有的POJO类属性必须使用包装数据类型。<br>2）RPC 方法的返回值和参数必须使用包装数据类型。<br>3）所有的局部变量使用基本数据类型。</li>
<li>POJO类<br>1) 不要设定任何属性默认值<br>2) 基本数据类型属性必须是包装类<br>3) 必须写 toString 方法<br>4) 序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败.<br>5）getter/setter 方法中，不要增加业务逻辑</li>
<li>Object 的 clone 方法来拷贝对象(默认是浅copy,要自己实现深copy)</li>
<li>String<br>1) split生成的数组会有空的情况<br>2）方法内拼接字符串使用StringBuilder<br>3) 与数值转换，使用工具类NumberUtils</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>L1-深入拆解java虚拟机</title>
    <url>/hexoblog/20200506121404.html</url>
    <content><![CDATA[<h1 id="课程地址"><a href="#课程地址" class="headerlink" title="课程地址"></a>课程地址</h1><p><a href="https://time.geekbang.org/column/article/11289" target="_blank" rel="noopener">https://time.geekbang.org/column/article/11289</a></p>
<h2 id="1-Java代码是怎么运行的"><a href="#1-Java代码是怎么运行的" class="headerlink" title="1.Java代码是怎么运行的"></a>1.Java代码是怎么运行的</h2><h3 id="内容总结"><a href="#内容总结" class="headerlink" title="内容总结"></a>内容总结</h3><ol>
<li><p>字节码是啥？<br>编译器将 Java 程序转换成该虚拟机所能识别的指令序列，也称 Java 字节码。<br>之所以这么取名，是因为 Java 字节码指令的操作码（opcode）被固定为一个字节。</p>
</li>
<li><p>jvm如何工作的？<br>从虚拟机视角来看，执行 Java 代码首先需要将它编译而成的 class 文件加载到 Java 虚拟机中。<br>加载后的 Java 类会被存放于方法区（Method Area）中。实际运行时，虚拟机会执行方法区内的代码。<br>Java 虚拟机会将栈细分为面向 Java 方法的 Java 方法栈，面向本地方法（用 C++ 写的 native 方法）<br>的本地方法栈，以及存放各个线程执行位置的 PC 寄存器。<br>在运行过程中，每当调用进入一个 Java 方法，Java 虚拟机会在当前线程的 Java 方法栈中生成一个栈帧，用以存放局部变量以及字节码的操作数。</p>
</li>
</ol>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>观察两个条件判断语句的运行结果，来思考 Java 语言和 Java 虚拟机看待 boolean 类型的方式是否不同。     </p>
<ol>
<li><p>Foo.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (flag) System.out.println(<span class="string">"Hello, Java!"</span>);</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="keyword">true</span>) System.out.println(<span class="string">"Hello, JVM!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译并运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ javac Foo.java    #将Foo.java编译为Foo.class(16进制的字节码文件)</span><br><span class="line">$ java Foo          #jvm执行Foo.class文件</span><br><span class="line">Hello, Java!</span><br><span class="line">Hello, JVM!</span><br></pre></td></tr></table></figure>
</li>
<li><p>基于asmtools将Foo.class转换成可编辑的文本文件    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ java -cp ~/asmtools.jar org.openjdk.asmtools.jdis.Main Foo.class &gt; Foo.jasm</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改asm中iconst_1值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ awk &apos;NR==1,/iconst_1/&#123;sub(/iconst_1/, &quot;iconst_2&quot;)&#125; 1&apos; Foo.jasm.1 &gt; Foo.jasm</span><br><span class="line">$ java -cp ~/asmtools.jar org.openjdk.asmtools.jasm.Main Foo.jasm</span><br><span class="line">$ java Foo</span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lixldeMacBook-Air:demo lixl$ cat Foo.jasm.1 </span><br><span class="line"></span><br><span class="line">super public class Foo</span><br><span class="line">	version 52:0</span><br><span class="line">&#123;</span><br><span class="line">  public Method &quot;&lt;init&gt;&quot;:&quot;()V&quot;</span><br><span class="line">	stack 1 locals 1</span><br><span class="line">  &#123;</span><br><span class="line">		aload_0;</span><br><span class="line">		invokespecial	Method java/lang/Object.&quot;&lt;init&gt;&quot;:&quot;()V&quot;;</span><br><span class="line">		return;</span><br><span class="line">  &#125;</span><br><span class="line">  public static Method main:&quot;([Ljava/lang/String;)V&quot;</span><br><span class="line">	stack 2 locals 2</span><br><span class="line">  &#123;</span><br><span class="line">		iconst_1;</span><br><span class="line">		istore_1;</span><br><span class="line">		iload_1;</span><br><span class="line">		ifeq	L14;</span><br><span class="line">		getstatic	Field java/lang/System.out:&quot;Ljava/io/PrintStream;&quot;;</span><br><span class="line">		ldc	String &quot;Hello, Java!&quot;;</span><br><span class="line">		invokevirtual	Method java/io/PrintStream.println:&quot;(Ljava/lang/String;)V&quot;;</span><br><span class="line">	L14:	stack_frame_type append;</span><br><span class="line">		locals_map int;</span><br><span class="line">		iload_1;</span><br><span class="line">		iconst_1;</span><br><span class="line">		if_icmpne	L27;</span><br><span class="line">		getstatic	Field java/lang/System.out:&quot;Ljava/io/PrintStream;&quot;;</span><br><span class="line">		ldc	String &quot;Hello, JVM!&quot;;</span><br><span class="line">		invokevirtual	Method java/io/PrintStream.println:&quot;(Ljava/lang/String;)V&quot;;</span><br><span class="line">	L27:	stack_frame_type same;</span><br><span class="line">		return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125; // end Class Foo</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/hexoblog/20190705205025.html</url>
    <content><![CDATA[<h1 id="文件下载-复制"><a href="#文件下载-复制" class="headerlink" title="文件下载/复制"></a>文件下载/复制</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http://dfkdl/file.zip</span><br><span class="line"></span><br><span class="line">-- 本地文件复制到远程主机</span><br><span class="line">scp  a.zip user@ip:/home/user</span><br><span class="line"></span><br><span class="line">-- 复制远程文件到本地</span><br><span class="line">scp user@ip:/home/user/a.zip ~</span><br></pre></td></tr></table></figure>

<h1 id="yum-apt-配置"><a href="#yum-apt-配置" class="headerlink" title="yum/apt 配置"></a>yum/apt 配置</h1><p>centos/oracle linux</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#<span class="built_in">cd</span> /etc/yum.repo.d</span><br><span class="line">#vim aliyun.repo</span><br><span class="line">[base]</span><br><span class="line">name=CentOS-$releasever - Base</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/os/$basearch/</span><br><span class="line">gpgcheck=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">清理缓存</span><br><span class="line">#yum clean all </span><br><span class="line"></span><br><span class="line">更新软件</span><br><span class="line">#yum update</span><br><span class="line"></span><br><span class="line">安装</span><br><span class="line">#yum install java -y</span><br><span class="line"></span><br><span class="line">卸载</span><br><span class="line">#yum remove java* -y</span><br></pre></td></tr></table></figure>

<p>ubuntu</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">配置apt源</span><br><span class="line">$sudo vi /etc/apt/sources.list</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">更新依赖</span><br><span class="line">$sudo apt-get update</span><br><span class="line"></span><br><span class="line">升级软件</span><br><span class="line">$sudo apt-get upgrade -y</span><br><span class="line"></span><br><span class="line">安装软件</span><br><span class="line">$sudo apt-get install nginx</span><br></pre></td></tr></table></figure>

<h1 id="查看操作系统版本"><a href="#查看操作系统版本" class="headerlink" title="查看操作系统版本"></a>查看操作系统版本</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">lixl@DESKTOP-GRDL0QL:/etc/apt$ lsb_release -a</span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID: Ubuntu</span><br><span class="line"><span class="function">Description:    <span class="title">Ubuntu</span> 18.04.2 <span class="title">LTS</span></span></span><br><span class="line"><span class="function"><span class="title">Release</span>:        18.04</span></span><br><span class="line"><span class="function"><span class="title">Codename</span>:       <span class="title">bionic</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ yum install -y redhat-lsb</span><br><span class="line">[oracle@enmoedu1 ~]$ lsb_release -a</span><br><span class="line">LSB Version:	:base-<span class="number">4</span>.<span class="number">0</span>-amd64:base-<span class="number">4</span>.<span class="number">0</span>-noarch:core-<span class="number">4</span>.<span class="number">0</span>-amd64:core-<span class="number">4</span>.<span class="number">0</span>-noarch:graphics-<span class="number">4</span>.<span class="number">0</span>-amd64:graphics-<span class="number">4</span>.<span class="number">0</span>-noarch:printing-<span class="number">4</span>.<span class="number">0</span>-amd64:printing-<span class="number">4</span>.<span class="number">0</span>-noarch</span><br><span class="line">Distributor ID:	RedHatEnterpriseServer</span><br><span class="line"><span class="function">Description:	<span class="title">Red</span> <span class="title">Hat</span> <span class="title">Enterprise</span> <span class="title">Linux</span> <span class="title">Server</span> <span class="title">release</span> 6.4 (<span class="title">Santiago</span>)</span></span><br><span class="line"><span class="function"><span class="title">Release</span>:	6.4</span></span><br><span class="line"><span class="function"><span class="title">Codename</span>:	<span class="title">Santiago</span></span></span><br></pre></td></tr></table></figure>

<p>操作系统内核及架构</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure>

<h1 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">lixl@DESKTOP-GRDL0QL:/etc/apt$ free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line"><span class="function">Mem:            11<span class="title">G</span>        5.5<span class="title">G</span>        5.7<span class="title">G</span>         17<span class="title">M</span>        223<span class="title">M</span>        5.8<span class="title">G</span></span></span><br><span class="line"><span class="function"><span class="title">Swap</span>:           12<span class="title">G</span>         80<span class="title">M</span>         12<span class="title">G</span></span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/LeoBoy/p/7976612.html" target="_blank" rel="noopener">top命令</a></p>
<h1 id="查看磁盘空间"><a href="#查看磁盘空间" class="headerlink" title="查看磁盘空间"></a>查看磁盘空间</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">[oracle@enmoedu1 ~]$ df -h</span><br><span class="line">Filesystem            Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/vg_enmoedu1-lv_root</span><br><span class="line">                       <span class="number">20</span>G  <span class="number">5</span>.<span class="number">1</span>G   <span class="number">14</span>G  <span class="number">28</span>% /</span><br><span class="line">tmpfs                 <span class="number">2</span>.<span class="number">0</span>G  <span class="number">245</span>M  <span class="number">1</span>.<span class="number">8</span>G  <span class="number">12</span>% /dev/shm</span><br><span class="line">/dev/sda1             <span class="number">477</span>M   <span class="number">65</span>M  <span class="number">387</span>M  <span class="number">15</span>% /boot</span><br><span class="line">/dev/mapper/vg_enmoedu1-lv_u01</span><br><span class="line">                       <span class="number">35</span>G  <span class="number">8</span>.<span class="number">0</span>G   <span class="number">26</span>G  <span class="number">24</span>% /u01</span><br></pre></td></tr></table></figure>

<h1 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h1><p>centos系列</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network</span><br><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>

<h1 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ps -ef| grep java</span><br><span class="line"></span><br><span class="line">$jps</span><br></pre></td></tr></table></figure>

<h1 id="读取文件内容"><a href="#读取文件内容" class="headerlink" title="读取文件内容"></a>读取文件内容</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">读取全部内容</span><br><span class="line">$cat a.txt</span><br><span class="line"></span><br><span class="line">控制台行</span><br><span class="line">$tail -f a.log</span><br><span class="line"></span><br><span class="line">查看最后<span class="number">10</span>行</span><br><span class="line">$tail -<span class="number">10</span> a.log</span><br><span class="line"></span><br><span class="line">查看前<span class="number">10</span>行</span><br><span class="line">$head -<span class="number">10</span> a.log</span><br></pre></td></tr></table></figure>

<h1 id="文件解压、压缩"><a href="#文件解压、压缩" class="headerlink" title="文件解压、压缩"></a>文件解压、压缩</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">解压a.zip到当前目录</span><br><span class="line">$unzip a.zip</span><br><span class="line"></span><br><span class="line">解压到指定目录</span><br><span class="line">$unzip -d /temp a.zip</span><br><span class="line"></span><br><span class="line">压缩temp文件夹</span><br><span class="line">$zip -r temp.zip temp/</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">解压tar.gz</span><br><span class="line">$tar zxvf package.tar.gz</span><br><span class="line">$tar zxvf package.tar.gz -C target_dir</span><br></pre></td></tr></table></figure>

<h1 id="查看端口占用情况"><a href="#查看端口占用情况" class="headerlink" title="查看端口占用情况"></a>查看端口占用情况</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ps -ef|grep <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"># lsof -i:<span class="number">22</span></span><br></pre></td></tr></table></figure>

<h1 id="后台运行命令"><a href="#后台运行命令" class="headerlink" title="后台运行命令"></a>后台运行命令</h1><p>例：        </p>
<ol>
<li>后台执行docker pull oraclelinux:7.7      <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup docker pull registry.cn-beijing.aliyuncs.com/lixl_repo/oracle_database:11.2.0.4.0 &gt; out.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>out.log是输出的日志文件     </p>
<ol start="2">
<li>jobs 查看当前有多少在后台运行的命令<br>jobs -l选项可显示所有任务的PID，jobs的状态可以是running, stopped, Terminated。<br>但是如果任务被终止了（kill），shell 从当前的shell环境已知的列表中删除任务的进程标识</li>
</ol>
<h1 id="开机执行命令"><a href="#开机执行命令" class="headerlink" title="开机执行命令"></a>开机执行命令</h1><p>配置开机自启动<br>vim /etc/rc.d/rc.local          </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su - nexus -c &quot;/nexus/nexus-3.13.0-01/bin/nexus start&quot;</span><br></pre></td></tr></table></figure>

<p>切换到nexus用户来执行命令</p>
<h1 id="挂载共享磁盘-samba"><a href="#挂载共享磁盘-samba" class="headerlink" title="挂载共享磁盘(samba)"></a>挂载共享磁盘(samba)</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 挂载</span><br><span class="line">mount -t cifs //192.168.5.200/share/p2m/lixl /media/ -o &quot;rw,username=oracle,password=123456&quot;</span><br><span class="line"></span><br><span class="line">#卸载</span><br><span class="line">umount media/</span><br></pre></td></tr></table></figure>

<h1 id="服务器时间设置-ntp"><a href="#服务器时间设置-ntp" class="headerlink" title="服务器时间设置(ntp)"></a>服务器时间设置(ntp)</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装ntp服务</span><br><span class="line">yum install ntp</span><br><span class="line"># 开机启动服务</span><br><span class="line">systemctl enable ntpd</span><br><span class="line"># 启动服务</span><br><span class="line">systemctl start ntpd</span><br><span class="line"># 设置亚洲时区</span><br><span class="line">timedatectl set-timezone Asia/Shanghai</span><br><span class="line"># 启用NTP同步</span><br><span class="line">timedatectl set-ntp yes</span><br><span class="line"># 重启ntp服务</span><br><span class="line">systemctl restart ntpd</span><br><span class="line"># 手动同步时间</span><br><span class="line">ntpq -p</span><br></pre></td></tr></table></figure>

<h1 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h1><ul>
<li>ssh服务安装及启动</li>
<li><a href="https://www.cnblogs.com/wenxingxu/p/9597307.html" target="_blank" rel="noopener">免密码登录</a><br>  centos:         <pre><code>1.客户端生成公私秘钥 ssh-keygen</code></pre>  ssh-copy-id -i ~/.ssh/id_rsa.pub <a href="mailto:user1@192.158.5.41" target="_blank" rel="noopener">user1@192.158.5.41</a> </li>
<li><a href="https://blog.csdn.net/TongxinV/article/details/94883101" target="_blank" rel="noopener">win10 ssh配置</a></li>
<li><a href="https://blog.csdn.net/weixin_43064185/article/details/90080815" target="_blank" rel="noopener">win10 开启ssh服务</a></li>
</ul>
<h1 id="NFS使用"><a href="#NFS使用" class="headerlink" title="NFS使用"></a>NFS使用</h1><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><ul>
<li><p>nfs 服务安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install nfs-utils -y</span><br><span class="line"></span><br><span class="line">systemctl start nfs-server</span><br><span class="line"></span><br><span class="line">systemctl enable nfs-server</span><br></pre></td></tr></table></figure>
</li>
<li><p>暴露共享目录 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/exports   #编辑配置文件</span><br><span class="line"></span><br><span class="line"> 1 /mnt     *(sync,rw,anonuid=1001,anongid=1001)</span><br><span class="line"> #共享目录   对所有用户共享（同步数据，读写权限，指定用户ID，组ID&apos;如建立的文件属于此用户&apos;）</span><br><span class="line"> 2 /nfsshare 172.25.151.0/24(sync)  172.25.151.50(sync,rw)</span><br><span class="line"> #共享目录    对此网段的共享（数据同步）对此 IP 进行共享（数据同步，读写）</span><br><span class="line"></span><br><span class="line"> 编辑完成后执行：exportfs -rv 进行刷新</span><br><span class="line"> exportfs   #维护导出的NFS文件系统的表</span><br><span class="line">      -r    #重新导出所有目录</span><br><span class="line">      -v    #示导出选项列表</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><ul>
<li><p>挂载nfs共享目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看服务端都有哪些共享文件夹</span><br><span class="line">showmount -e 192.168.18.147 </span><br><span class="line"></span><br><span class="line"># 挂载到本地目录(如/data)</span><br><span class="line">mount 192.168.18.147:/nfshare /data</span><br></pre></td></tr></table></figure>
</li>
<li><p>开机自动挂载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/fstab</span><br><span class="line"></span><br><span class="line">192.168.18.147:/data/sharedir /data     nfs     defaults 0 0</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MEM考试</title>
    <url>/hexoblog/20200505001559.html</url>
    <content><![CDATA[<h1 id="MEM"><a href="#MEM" class="headerlink" title="MEM"></a>MEM</h1><p>工程管理硕士</p>
<h1 id="初试（统考）考试"><a href="#初试（统考）考试" class="headerlink" title="初试（统考）考试"></a>初试（统考）考试</h1><p>考试形式<br>一、试卷满分及考试时间<br>综合试卷满分为200分，英语试卷满分100分，共300分，考试时间各为180分钟。<br>二、答题方式<br>答题方式为闭卷、笔试。不允许使用计算器。<br>三、试卷内容与题型结构<br>数学基础 75分，有以下两种题型：<br>问题求解 15小题，每小题3分，共45分<br>条件充分性判断 10小题，每小题3分，共30分<br>逻辑推理 30小题，每小题2分，共60分<br>写作 2小题，其中论证有效性分析30分，论说文35分，共65分<br>英语试卷100分，考试时间为180分钟。      </p>
<h1 id="计算机类考试"><a href="#计算机类考试" class="headerlink" title="计算机类考试"></a>计算机类考试</h1><p>① 101 思想政治理论<br>② 201 英语一<br>③ 301 数学一<br>④ 923 操作系统原理 或 925 数据结构      </p>
<p>02102 离散数学      </p>
<p>002 计算机与信息技术学院 085212 软件工程 非全日制 专硕 270 39 59</p>
<h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p>操作系统原理 视频[<a href="https://www.bilibili.com/video/BV1C4411b7M6?p=6]" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1C4411b7M6?p=6]</a></p>
<h1 id="北京交通大学"><a href="#北京交通大学" class="headerlink" title="北京交通大学"></a>北京交通大学</h1><p><a href="http://bbs.kaoyan.com/t8714009p1" target="_blank" rel="noopener">http://bbs.kaoyan.com/t8714009p1</a><br><a href="http://www.chinamem.net/zsjz/1478-2020-mem-18.html" target="_blank" rel="noopener">http://www.chinamem.net/zsjz/1478-2020-mem-18.html</a><br><a href="https://gs.bjtu.edu.cn/cms/zszt/item/1965.html" target="_blank" rel="noopener">招生简章</a>              </p>
]]></content>
  </entry>
  <entry>
    <title>SQL-DDL与DML语句</title>
    <url>/hexoblog/20190727143512.html</url>
    <content><![CDATA[<h1 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h1><p>数据操纵语言 Data Manipulation Language</p>
<h2 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept (deptno,dname,loc) <span class="keyword">values</span> (<span class="number">50</span>,<span class="string">'DEVELOPMENT'</span>,<span class="string">'DETROIT'</span>);</span><br></pre></td></tr></table></figure>

<h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">## delete</span></span><br><span class="line">```sql</span><br></pre></td></tr></table></figure>

<h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><p>从test2合并数据到test1表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">merge</span> <span class="keyword">into</span> test1 t1</span><br><span class="line"><span class="keyword">using</span> test2 t2</span><br><span class="line"><span class="keyword">on</span> (t1.deptno = t2.deptno)</span><br><span class="line"><span class="keyword">when</span> <span class="keyword">matched</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">set</span> t1.dname=t2.dname,t1.loc=t2.loc</span><br><span class="line"><span class="keyword">when</span> <span class="keyword">not</span> <span class="keyword">matched</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">insert</span> (deptno,dname,loc) <span class="keyword">values</span> (t2.deptno,t2.dname,t2.loc);</span><br></pre></td></tr></table></figure>

<h2 id="oracle-锁"><a href="#oracle-锁" class="headerlink" title="oracle 锁"></a>oracle 锁</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> empno=<span class="number">7890</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure>

<h1 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h1><p>drop/alter/</p>
]]></content>
  </entry>
  <entry>
    <title>SQL-关键字的解析顺序</title>
    <url>/hexoblog/2019070995518.html</url>
    <content><![CDATA[<h1 id="sql执行顺序"><a href="#sql执行顺序" class="headerlink" title="sql执行顺序"></a>sql执行顺序</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sql执行顺序 </span><br><span class="line">(1)from </span><br><span class="line">(3) join </span><br><span class="line">(2) on </span><br><span class="line">(4) where </span><br><span class="line">(5)group by(开始使用select中的别名，后面的语句中都可以使用)</span><br><span class="line">(6) avg,sum.... </span><br><span class="line">(7)having </span><br><span class="line">(8) select </span><br><span class="line">(9) distinct </span><br><span class="line">(10) order by</span><br></pre></td></tr></table></figure>

<h1 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h1><p><a href="https://www.cnblogs.com/yyjie/p/7788413.html" target="_blank" rel="noopener">深入理解SQL的四种连接-左外连接、右外连接、内连接、全连接</a></p>
<h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 等值连接 </span></span><br><span class="line"><span class="keyword">SELECT</span> E1.EMPNO,E1.ENAME,E1.MGR,E2.ENAME <span class="keyword">AS</span> MGRNAME <span class="keyword">FROM</span> EMP E1,EMP E2 <span class="keyword">WHERE</span> E1.MGR=E2.EMPNO;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内连接</span></span><br><span class="line"><span class="keyword">SELECT</span> E1.EMPNO,E1.ENAME,E1.MGR,E2.ENAME <span class="keyword">AS</span> MGRNAME <span class="keyword">FROM</span> EMP E1 <span class="keyword">JOIN</span> EMP E2 <span class="keyword">ON</span> E1.MGR=E2.EMPNO;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用using连接等值字段</span></span><br><span class="line"><span class="keyword">SELECT</span> EMPNO,ENAME, DNAME <span class="keyword">FROM</span> EMP <span class="keyword">JOIN</span> DEPT <span class="keyword">USING</span> (DEPTNO);</span><br></pre></td></tr></table></figure>

<h2 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> E1.EMPNO,E1.ENAME,E1.MGR,E2.ENAME <span class="keyword">AS</span> MGRNAME <span class="keyword">FROM</span> EMP E1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> EMP E2 <span class="keyword">ON</span> E1.MGR=E2.EMPNO;</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.2cto.com/database/201803/728372.html" target="_blank" rel="noopener">Oracle SQL语句执行流程与顺序原理详解</a><br><a href="https://www.cnblogs.com/yyjie/p/7788428.html" target="_blank" rel="noopener">关于sql和MySQL的语句执行顺序</a></p>
]]></content>
  </entry>
  <entry>
    <title>SQL-基于oracle验证drop、truncate和delete</title>
    <url>/hexoblog/2019070694912.html</url>
    <content><![CDATA[<h1 id="三者差异"><a href="#三者差异" class="headerlink" title="三者差异"></a>三者差异</h1><p>都可以用来删除指定表的所有数据，但三者在删除速度、事务、误删除恢复时的不同，导致在使用上的差异。</p>
<h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、delete是DML，执行delete操作时，每次从表中删除一行，并且同时将该行的的删除操作记录在redo和undo表空间中</span><br><span class="line">以便进行回滚（rollback）和重做操作，但要注意表空间要足够大，需要手动提交（commit）操作才能生效，</span><br><span class="line">可以通过rollback撤消操作。</span><br><span class="line">2、delete可根据条件删除表中满足条件的数据，如果不指定where子句，那么删除表中所有记录。</span><br><span class="line">3、delete语句不影响表所占用的extent，高水线(high watermark)保持原位置不变。</span><br></pre></td></tr></table></figure>

<h2 id="truncate"><a href="#truncate" class="headerlink" title="truncate"></a>truncate</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、truncate是DDL，会隐式提交，所以，不能回滚，不会触发触发器。</span><br><span class="line">2、truncate会删除表中所有记录，并且将重新设置高水线和所有的索引，缺省情况下将空间释放到minextents个extent，</span><br><span class="line">除非使用reuse storage，。不会记录日志，所以执行速度很快，但不能通过rollback撤消操作</span><br><span class="line">（如果一不小心把一个表truncate掉，也是可以恢复的，只是不能通过rollback来恢复）。</span><br><span class="line">3、对于外键（foreignkey ）约束引用的表，不能使用 truncate table，而应使用不带 where 子句的 delete 语句。</span><br><span class="line">4、truncatetable不能用于参与了索引视图的表。</span><br></pre></td></tr></table></figure>

<h2 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、drop是DDL，会隐式提交，所以，不能回滚，不会触发触发器。</span><br><span class="line">2、drop语句删除表结构及所有数据，并将表所占用的空间全部释放。</span><br><span class="line">3、drop语句将删除表的结构所依赖的约束，触发器，索引，依赖于该表的存储过程/函数将保留,但是变为invalid状态。</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、在速度上，一般来说，drop&gt; truncate &gt; delete。</span><br><span class="line">2、在使用drop和truncate时一定要注意，虽然可以恢复，但为了减少麻烦，还是要慎重。</span><br><span class="line">3、如果想删除部分数据用delete，注意带上where子句，回滚段要足够大；</span><br><span class="line">如果想删除表，当然用drop；</span><br><span class="line">如果想保留表而将所有数据删除，如果和事务无关，用truncate即可；</span><br><span class="line">如果和事务有关，或者想触发trigger，还是用delete；</span><br><span class="line">如果是整理表内部的碎片，可以用truncate跟上reuse stroage，再重新导入/插入数据。</span><br></pre></td></tr></table></figure>

<h1 id="验证示例"><a href="#验证示例" class="headerlink" title="验证示例"></a>验证示例</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>使用scott用户，备份EMP表并启用ROW MOVEMENT</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 备份EMP表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> EMP_BAK <span class="keyword">AS</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> EMP;</span><br></pre></td></tr></table></figure>

<h2 id="drop-表及其表内所有数据"><a href="#drop-表及其表内所有数据" class="headerlink" title="drop 表及其表内所有数据"></a>drop 表及其表内所有数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 启用ROW MOVEMENT</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> EMP <span class="keyword">ENABLE</span> <span class="keyword">ROW</span> <span class="keyword">MOVEMENT</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行完drop语句后，该表丢失(ddl语句会隐式提交 auto commit)</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> EMP;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询RECYCLEBIN,该drop语句被放在回收站了</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> RECYCLEBIN;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用FLASHBACK即可将EMP表恢复到drop前状态</span></span><br><span class="line">FLASHBACK TABLE EMP TO BEFORE <span class="keyword">DROP</span>;</span><br></pre></td></tr></table></figure>

<h2 id="delete-删除数据-支持事务"><a href="#delete-删除数据-支持事务" class="headerlink" title="delete 删除数据(支持事务)"></a>delete 删除数据(支持事务)</h2><p>有where条件的delete语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 查询当前SCN号</span></span><br><span class="line"><span class="keyword">select</span> timestamp_to_scn(<span class="keyword">sysdate</span>) <span class="keyword">from</span> dual; <span class="comment">-- 1278689</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 执行delete语句并提交</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> EMP <span class="keyword">where</span> EMPNO =<span class="number">7566</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> EMP <span class="keyword">where</span> EMPNO =<span class="number">7654</span>;  <span class="comment">-- 1278841</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 恢复到删除前的状态</span></span><br><span class="line">FLASHBACK TABLE EMP TO SCN 1278689;</span><br></pre></td></tr></table></figure>

<p>无where条件的delete语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">FROM</span> EMP; <span class="comment">-- 12条 SCN 1279180</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> EMP;</span><br><span class="line"><span class="keyword">COMMIT</span>;                   <span class="comment">-- 0条 SCN 1279733</span></span><br><span class="line">FLASHBACK TABLE EMP TO SCN 1279180;</span><br></pre></td></tr></table></figure>

<h2 id="truncate-删除所有表内数据"><a href="#truncate-删除所有表内数据" class="headerlink" title="truncate 删除所有表内数据"></a>truncate 删除所有表内数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">FROM</span> EMP; <span class="comment">-- 12条 SCN 1279866</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> EMP;</span><br><span class="line"><span class="keyword">COMMIT</span>;                   <span class="comment">-- 0条 SCN 1279908</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--SQL 错误: ORA-01466: unable to read data - table definition has changed</span></span><br><span class="line"><span class="comment">--01466. 00000 -  "unable to read data - table definition has changed"</span></span><br><span class="line"><span class="comment">--*Cause:    Query parsed after tbl (or index) change, and executed</span></span><br><span class="line"><span class="comment">--           w/old snapshot</span></span><br><span class="line"><span class="comment">--*Action:   commit (or rollback) transaction, and re-execute</span></span><br><span class="line">FLASHBACK TABLE EMP TO SCN 1279866;</span><br></pre></td></tr></table></figure>

<h2 id="oracle-flashback相关"><a href="#oracle-flashback相关" class="headerlink" title="oracle flashback相关"></a>oracle flashback相关</h2><ol>
<li><p>删除table的数据闪回依赖RECYCLEBIN<br>使用DROP TABLE XX PURGE无法闪回;<br>RECYCLEBIN查询不到(已被清理)的无法闪回;      </p>
</li>
<li><p>delete的数据闪回依赖UNDO<br>使用TRUNCATE TABLE XX无法闪回</p>
</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/skyay/p/7271468.html" target="_blank" rel="noopener">oracle中delete、truncate、drop的区别</a><br><a href="https://blog.csdn.net/qq_34556414/article/details/86130943" target="_blank" rel="noopener">Oracle undo表空间管理</a></p>
]]></content>
  </entry>
  <entry>
    <title>activemq使用</title>
    <url>/hexoblog/20190708111612.html</url>
    <content><![CDATA[<p><a href="https://gitee.com/lixl/mq-example.git" target="_blank" rel="noopener">https://gitee.com/lixl/mq-example.git</a></p>
<p><a href="https://www.jianshu.com/p/ecdc6eab554c" target="_blank" rel="noopener">参考</a></p>
]]></content>
  </entry>
  <entry>
    <title>docker-compose组件使用</title>
    <url>/hexoblog/20200725104348.html</url>
    <content><![CDATA[<p><a href="https://www.runoob.com/docker/docker-compose.html" target="_blank" rel="noopener">https://www.runoob.com/docker/docker-compose.html</a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul>
<li><p>下载安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>
</li>
<li><p>yum安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装epel源</span><br><span class="line">yum install -y docker-compose</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="部署gitlib"><a href="#部署gitlib" class="headerlink" title="部署gitlib"></a><a href="https://hub.docker.com/r/twang2218/gitlab-ce-zh" target="_blank" rel="noopener">部署gitlib</a></h1><ul>
<li><p>docker-compose.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">gitlab:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">'twang2218/gitlab-ce-zh'</span></span><br><span class="line">      <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">      <span class="attr">hostname:</span> <span class="string">'192.168.18.147'</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">TZ:</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line">        <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">external_url</span> <span class="string">'http://192.168.18.147/'</span></span><br><span class="line">          <span class="string">gitlab_rails['time_zone']</span> <span class="string">=</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">'80:80'</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">'443:443'</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">'2222:22'</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./config:/etc/gitlab</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./data:/var/opt/gitlab</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./logs:/var/log/gitlab</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>部署容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line">docker-compose down -d</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="部署mysql"><a href="#部署mysql" class="headerlink" title="部署mysql"></a><a href="https://www.runoob.com/docker/docker-install-mysql.html" target="_blank" rel="noopener">部署mysql</a></h1><ul>
<li>docker run<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name mysql-test \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-v /root/mysql/data:/var/lib/mysql \</span><br><span class="line">-itd 192.168.5.41:5000/mysql:5.6</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><code>不知道啥原因，-v宿主机文件目录:容器目录 这里，只能需要指定宿主机目录的绝对路径(相对路径不行)</code></p>
<ul>
<li>docker-compose.yml<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 这个是docker-compose的兼容版本</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">'2.1'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## 容器名称</span></span><br><span class="line">  <span class="attr">db_mysql_dev:</span></span><br><span class="line">    <span class="comment">## 镜像</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">'192.168.5.41:5000/mysql:5.6'</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="comment"># 环境变量</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">'123456'</span></span><br><span class="line">    <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span>  </span><br><span class="line">    <span class="comment"># 目录映射 宿主机:容器</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./data:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db_adminer_dev:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">'192.168.5.41:5000/adminer'</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>docker基本用法</title>
    <url>/hexoblog/20191218181323.html</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul>
<li><p>ubuntu<br><a href="https://developer.aliyun.com/mirror/docker-ce" target="_blank" rel="noopener">https://developer.aliyun.com/mirror/docker-ce</a>   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://m9s2f0vg.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;insecure-registries&quot;: [&quot;192.168.5.41:5000&quot;],</span><br><span class="line">  &quot;graph&quot;:&quot;/data/docker&quot;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
</li>
<li><p>windows<br><a href="https://www.docker.com/products/docker-desktop/" target="_blank" rel="noopener">https://www.docker.com/products/docker-desktop/</a></p>
</li>
<li><p>macos<br>brew install docker </p>
</li>
<li><p>centos8 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[docker-ce-stable]</span><br><span class="line">name=Docker CE Stable - $basearch</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/8/$basearch/stable</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure>
</li>
<li><p>centos7<br><a href="https://developer.aliyun.com/mirror/docker-ce" target="_blank" rel="noopener">https://developer.aliyun.com/mirror/docker-ce</a>       </p>
</li>
</ul>
<ol>
<li><p>yum源配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[docker-ce-stable]</span><br><span class="line">name=Docker CE Stable - $basearch</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/7/$basearch/stable</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">[base]</span><br><span class="line">name=CentOS-$releasever - Base - mirrors.aliyun.com</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/os/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">[updates]</span><br><span class="line">name=CentOS-$releasever - Updates - mirrors.aliyun.com</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/updates/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-$releasever - Extras - mirrors.aliyun.com</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/extras/$basearch/</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装并启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install docker-ce</span><br><span class="line"></span><br><span class="line"># 启动服务</span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"># 设置开机启动</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>centos6<br>yum源配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[dockerproject]</span><br><span class="line">name=Docker Repository</span><br><span class="line">baseurl=https://yum.dockerproject.org/repo/main/centos/6/</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>yum install docker-engine -y<br>service docker start<br><a href="https://blog.csdn.net/weixin_40027906/article/details/85274347" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40027906/article/details/85274347</a>      </p>
<p>/etc/sysconfig/docker文件，other_args修改<br><code>other_args=&quot;--insecure-registry 192.168.18.1:5000&quot;</code></p>
<h1 id="镜像管理"><a href="#镜像管理" class="headerlink" title="镜像管理"></a>镜像管理</h1><ul>
<li><p>镜像搜索<br><a href="https://cr.console.aliyun.com/cn-beijing/instances/artifact" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-beijing/instances/artifact</a></p>
</li>
<li><p>从远程仓库下载镜像<br>docker pull registry.aliyuncs.com/helowin/oracle_11g</p>
</li>
<li><p>查看本地镜像<br>docker images</p>
</li>
<li><p>删除<br>docker rmi #imageid</p>
</li>
<li><p>从容器生成镜像(操作前最好先关闭容器)<br>docker commit -p containerId newImageName</p>
</li>
<li><p>导出镜像文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker save -o rocketmq.tar rocketmq </span><br><span class="line"># rocketmq.tar 导出的文件名</span><br><span class="line"># rocketmq 镜像名称</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">- gzip压缩</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h1><p>docker save imageId | gzip &gt; imageName.tar.gz</p>
<h1 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h1><p>gunzip -c imageName.tar.gz | docker load</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 导入镜像文件</span><br></pre></td></tr></table></figure>

<p>docker load –input rocketmq.tar<br>或<br>docker load &lt; rocketmq.tar</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"># 容器管理</span><br><span class="line">- 创建一个容器（镜像如果不存在会自动pull）      </span><br><span class="line">docker run -d -p 1521:1521 --name oracle_11g registry.aliyuncs.com/helowin/oracle_11g</span><br><span class="line"></span><br><span class="line">- 启动容器     </span><br><span class="line">docker start oracle_11g      </span><br><span class="line">-p 端口绑定 前边值是主机端口：后边值是容器端口  </span><br><span class="line">--name 指定容器名称     </span><br><span class="line"></span><br><span class="line">- 关闭容器</span><br><span class="line">docke stop oracle_11g</span><br><span class="line"></span><br><span class="line">- 进入容器     </span><br><span class="line">docker exec -it  oracle_11g /bin/bash</span><br><span class="line"></span><br><span class="line">- 查看所有容器      </span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line"># 上传镜像文件到nexus3仓库</span><br><span class="line">- 登录</span><br></pre></td></tr></table></figure>

<p>docker login 192.168.6.1:5000</p>
<p>1.不支持http请求时<br>配置 vim /etc/docker/daemon.json<br>{<br>    “insecure-registries”: [“192.168.6.1:5000” ]<br>}<br>2.重启docker服务<br>service docker restart</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 准备要上传的镜像文件</span><br></pre></td></tr></table></figure>

<p>1.标记要上传的镜像<br>docker tag oracle_11g:latest 192.168.6.1:5000/oracle11g:0.1   </p>
<p>2.使用容器来创建镜像<br>docker commit efb37e45c0ab 192.168.6.1:5000/oracle11g:0.2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 上传      </span><br><span class="line">docker push 192.168.6.1:5000/oracle11g:0.1</span><br><span class="line"></span><br><span class="line"># 构建镜像</span><br><span class="line">https://www.runoob.com/docker/docker-dockerfile.html            </span><br><span class="line">https://www.cnblogs.com/xiaochangwei/p/8204992.html         </span><br><span class="line"></span><br><span class="line"># 其他</span><br><span class="line">## save/load/export/import命令区别</span><br><span class="line">save/load操作的是镜像;export/import操作的是容器</span><br><span class="line"></span><br><span class="line"># 命令</span><br><span class="line">- 停止所有的容器    </span><br><span class="line">`docker stop $(docker ps -aq)`</span><br><span class="line">- 删除所有容器</span><br><span class="line">`docker rm $(docker ps -aq)`</span><br><span class="line"></span><br><span class="line">- 删除所有不使用的镜像</span><br></pre></td></tr></table></figure>

<p>docker image prune –force –all<br>或者<br>docker image prune -f -a<br>```</p>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker镜像操作-封装oracle11g数据库</title>
    <url>/hexoblog/20200326145650.html</url>
    <content><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>下载<br><code>docker pull registry.cn-beijing.aliyuncs.com/lixl_repo/oracle_database:11.2.0.4.0</code>     </p>
<p>运行<br><code>docker run -idt -p 1521:1521 --name oracledb registry.cn-beijing.aliyuncs.com/lixl_repo/oracle_database:11.2.0.4.0</code>     </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># url访问</span><br><span class="line">localhost:1521/sysware system/sysware</span><br><span class="line"></span><br><span class="line"># sqlplus访问</span><br><span class="line">docker exec -it oracledb /bin/bash</span><br><span class="line"></span><br><span class="line">sqlplus / as sysdba</span><br><span class="line">sqlplus system/sysware</span><br></pre></td></tr></table></figure>

<h1 id="镜像制作"><a href="#镜像制作" class="headerlink" title="镜像制作"></a>镜像制作</h1><p>Dockerfile <code>https://gitee.com/lixl/docker-oracledatabase</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker build -t oracle_database:11.2.0.4.0 ./</span><br></pre></td></tr></table></figure>

<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="官方docker镜像"><a href="#官方docker镜像" class="headerlink" title="官方docker镜像"></a>官方docker镜像</h2><p><a href="https://github.com/oracle/docker-images/blob/master/OracleDatabase/SingleInstance/README.md" target="_blank" rel="noopener">数据库官方docker镜像制作文档</a></p>
<h2 id="如何增加docker容器中-dev-shm的大小"><a href="#如何增加docker容器中-dev-shm的大小" class="headerlink" title="如何增加docker容器中/dev/shm的大小"></a>如何增加docker容器中/dev/shm的大小</h2><p>docker默认的shm大小为：64MB<br>可通过shm-size参数指定shm的大小<br><code>docker run -idt --shm-size=1G --user root oracle11g /bin/bash</code></p>
<h2 id="oracle报错ORA-00845-MEMORY-TARGET-not-supported-on-this-system"><a href="#oracle报错ORA-00845-MEMORY-TARGET-not-supported-on-this-system" class="headerlink" title="oracle报错ORA-00845: MEMORY_TARGET not supported on this system"></a>oracle报错ORA-00845: MEMORY_TARGET not supported on this system</h2><h3 id="方法1-增加shm大小"><a href="#方法1-增加shm大小" class="headerlink" title="方法1 增加shm大小"></a>方法1 增加shm大小</h3><ol>
<li>在操作系统直接安装oracle，直接调整OS的shm大小即可</li>
<li>在docker里安装oracle，增加容器的shm即可<h3 id="方法2-调整oracle的MEMORY-TARGET值"><a href="#方法2-调整oracle的MEMORY-TARGET值" class="headerlink" title="方法2 调整oracle的MEMORY_TARGET值"></a>方法2 调整oracle的MEMORY_TARGET值</h3><a href="http://blog.itpub.net/30162081/viewspace-1742293/" target="_blank" rel="noopener">Oracle11g修改MEMORY_TARGET</a>       </li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SQL&gt; create pfile from spfile;</span><br><span class="line"></span><br><span class="line">File created.</span><br><span class="line"></span><br><span class="line">SQL&gt; show parameter memory</span><br><span class="line"></span><br><span class="line">NAME				     TYPE	 VALUE</span><br><span class="line">------------------------------------ ----------- ------------------------------</span><br><span class="line">hi_shared_memory_address	     integer	 0</span><br><span class="line">memory_max_target		     big integer 696M</span><br><span class="line">memory_target			     big integer 696M</span><br><span class="line">shared_memory_address		     integer	 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SQL&gt; alter system set memory_target=64m;</span><br><span class="line"></span><br><span class="line">SQL&gt; alter system set memory_max_target=64m scope=spfile;</span><br></pre></td></tr></table></figure>

<h2 id="docker-sqlplus使用"><a href="#docker-sqlplus使用" class="headerlink" title="docker-sqlplus使用"></a>docker-sqlplus使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$docker pull sflyr/sqlplus</span><br><span class="line">$docker tag sflyr/sqlplus 192.168.18.144:5000/oracle/sqlplus:11.2.0.3.0</span><br><span class="line">$docker run --rm \</span><br><span class="line">-e URL=P2M_SF_DEV_20200305/P2M_SF_DEV_20200305@192.168.5.200:1521/sysware1 \</span><br><span class="line">-it 192.168.18.144:5000/oracle/sqlplus:11.2.0.3.0</span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>docker</tag>
        <tag>oracle11g安装</tag>
      </tags>
  </entry>
  <entry>
    <title>docker镜像操作</title>
    <url>/hexoblog/20200314183647.html</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/FengGeBlog/p/10571961.html" target="_blank" rel="noopener">dockfile构建镜像示例</a></p>
<h1 id="构建并运行一个简单的镜像文件"><a href="#构建并运行一个简单的镜像文件" class="headerlink" title="构建并运行一个简单的镜像文件"></a>构建并运行一个简单的镜像文件</h1><ul>
<li><p>1.下载基础镜像<br>  <code>docker pull busybox:latest</code><br>  <a href="https://blog.csdn.net/feelinghappy/article/details/92133067" target="_blank" rel="noopener">busybox的作用和功能</a></p>
</li>
<li><p>2.编写Dockerfile</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Description: httpd image</span><br><span class="line">FROM busybox:latest</span><br><span class="line">MAINTAINER      &quot;xxx&quot;</span><br><span class="line">COPY index.html /data/web/html/</span><br></pre></td></tr></table></figure>

<p>  注意点：<br>  COPY等指令 文件夹必须以/结尾<br>  FROM 镜像会自动下载<br>  <code>docker run --name busybox --rm busybox cat /proc/version</code> 查看镜像包含的linux系统版本</p>
</li>
<li><p>3.构建镜像</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker build -t tinyhttpd:v0.1 ./</span><br></pre></td></tr></table></figure>
</li>
<li><p>4.运行</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name tinyhttpd --rm tinyhttpd:v0.1 cat /data/web/html/index.html</span><br></pre></td></tr></table></figure>

<p>  注意点：<br>  rm 删除新创建的tinyhttpd容器<br>  cat /data/web/html/index.html 命令(查看文件)</p>
</li>
</ul>
<h1 id="制作一个nginx镜像"><a href="#制作一个nginx镜像" class="headerlink" title="制作一个nginx镜像"></a>制作一个nginx镜像</h1><ul>
<li><p>编写Dockerfile</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM busybox:latest</span><br><span class="line">MAINTAINER &quot;lixl&quot;</span><br><span class="line">ADD nginx-1.17.9.tar.gz /usr/local/src/ </span><br><span class="line">EXPOSE 80/tcp</span><br></pre></td></tr></table></figure>

<p>  把下载好的nginx源码添加到src目录<br>  docker build -t mynginx:v1 ./</p>
<p>  docker run –name mynginx –rm mynginx:v1 ls /usr/local/src/</p>
</li>
</ul>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM tinyhttpd:v0.1</span><br><span class="line">LABEL maintainer=&quot;xxx&quot;</span><br><span class="line">ENV NGX_DOC_ROOT=&apos;/data/web/html/&apos;</span><br><span class="line">ADD entrypoint.sh /bin/</span><br><span class="line">CMD [&quot;/usr/sbin/nginx&quot;,&quot;-g&quot;,&quot;daemon off;&quot;]</span><br><span class="line">ENTRYPOINT [&quot;/bin/entrypoint.sh&quot;]</span><br></pre></td></tr></table></figure></code></pre><ul>
<li><p>entrypoint.sh</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/nginx/conf.d/www.conf &lt;&lt; EOF</span><br><span class="line">server&#123;</span><br><span class="line">        server_name $&#123;HOSTNAME&#125;;</span><br><span class="line">        listen $&#123;IP:-0.0.0.0&#125;:$&#123;PORT:-80&#125;;</span><br><span class="line">        root $&#123;NGX_DOC_ROOT:-/usr/share/nginx/html&#125;;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">exec &quot;$@&quot;</span><br></pre></td></tr></table></figure>

<p>  给entrypoint.sh文件授权<br>  <code>chmod +x entrypoint.sh</code></p>
</li>
</ul>
<h1 id="通过docker-history查看镜像构建过程"><a href="#通过docker-history查看镜像构建过程" class="headerlink" title="通过docker history查看镜像构建过程"></a><a href="https://www.cnblogs.com/cooper-73/p/9830371.html" target="_blank" rel="noopener">通过docker history查看镜像构建过程</a></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看构建过程</span><br><span class="line"># docker history  kubeguide/tomcat-app:v1</span><br><span class="line"></span><br><span class="line">查看完整的CreatedBy信息</span><br><span class="line"># docker history  kubeguide/tomcat-app:v1 --no-trunc </span><br><span class="line"></span><br><span class="line">自定义输出格式</span><br><span class="line"># docker history  kubeguide/tomcat-app:v1 --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.CreatedBy&#125;&#125;&quot; --no-trunc</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>dockfile</tag>
      </tags>
  </entry>
  <entry>
    <title>docker集群操作-swarm</title>
    <url>/hexoblog/20200411205538.html</url>
    <content><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ol>
<li><p>centos7设置主机名      </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># hostnamectl set-hostname swarm-node01</span><br><span class="line"># bash</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装docker-ce<br>vim /etc/yum.repo.d/docker-ce.repo      </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[docker-ce-stable]</span><br><span class="line">name=Docker CE Stable - $basearch</span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/7/$basearch/stable</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>yum -y install docker-ce<br>systemctl start docker.service<br>systemctl enable docker.service     </p>
<p>vim /etc/docker/daemon.json         </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;insecure-registries&quot;: [&quot;192.168.18.144:5000&quot; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>systemctl restart docker.service</p>
<ol start="3">
<li>集群信息<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip              hostname</span><br><span class="line">192.168.18.144  swarm-manager</span><br><span class="line">192.168.18.143  swarm-node01</span><br><span class="line">192.168.18.139  swarm-node02</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h1><ol>
<li><p>manager节点创建集群</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@swarm-manager ~]# docker swarm init --advertise-addr 192.168.18.144</span><br><span class="line">Swarm initialized: current node (kr2eg2qxh4osz5oimhvdp2ge2) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following command:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-122qbqs2mtppjkv8i8xyel5ozcupuzlwcbln1regjfr8qhm7k4-6w8o15u0868kouuz5jxkhf1vq 192.168.18.144:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run &apos;docker swarm join-token manager&apos; and follow the instructions.</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看节点信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@swarm-manager ~]# docker node ls</span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION</span><br><span class="line">kr2eg2qxh4osz5oimhvdp2ge2 *   swarm-manager       Ready               Active              Leader              19.03.8</span><br><span class="line">pyzo42dqj7fwdhzhu8ffmod0n     swarm-node01        Ready               Active                                  19.03.8</span><br><span class="line">q3gx53izmcwelw08e6kiz2s2j     swarm-node02        Ready               Active                                  19.03.8</span><br></pre></td></tr></table></figure>
</li>
<li><p>向集群添加节点       </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker swarm join --token SWMTKN-1-122qbqs2mtppjkv8i8xyel5ozcupuzlwcbln1regjfr8qhm7k4-6w8o15u0868kouuz5jxkhf1vq 192.168.18.144:2377</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h1><ol>
<li>创建任务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">--replicas 3 \</span><br><span class="line">-p 80:80 \</span><br><span class="line">--with-registry-auth \</span><br><span class="line">--name nginx \</span><br><span class="line">192.168.18.144:5000/nginx:1.17.9</span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">--replicas 2 \</span><br><span class="line">-p 1521:1521 \</span><br><span class="line">--with-registry-auth \</span><br><span class="line">--name oracle11g \</span><br><span class="line">192.168.18.144:5000/oracle/database:11.2.0.4.0</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>查看任务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker service ls</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看任务详情</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker service ps nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除任务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker service rm nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://www.yiibai.com/docker/service_update.html" target="_blank" rel="noopener">服务参数更新</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker service update --replicas=3 nginx</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="集群查看工具"><a href="#集群查看工具" class="headerlink" title="集群查看工具"></a>集群查看工具</h1><ol>
<li>部署docker-visualizer<br>单机部署visualizer<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 -v /var/run/docker.sock:/var/run/docker.sock --name visualizer 192.168.18.144:5000/dockersamples/visualizer</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>集群部署</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">--name=viz \</span><br><span class="line">--publish=8080:8080/tcp \</span><br><span class="line">--constraint=node.role==manager \</span><br><span class="line">--mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \</span><br><span class="line">192.168.18.144:5000/dockersamples/visualizer</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>搭建Portainer<br>Portainer是一个管理swarm的UI工具            <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  --name portainer \</span><br><span class="line">  --publish 9000:9000 \</span><br><span class="line">  --constraint &apos;node.role == manager&apos; \</span><br><span class="line">  --mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \</span><br><span class="line">  192.168.18.144:5000/portainer/portainer:1.23.2 \</span><br><span class="line">  -H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><h2 id="1-有新版本镜像时如何自动更新到各个服务？"><a href="#1-有新版本镜像时如何自动更新到各个服务？" class="headerlink" title="1.有新版本镜像时如何自动更新到各个服务？"></a>1.有新版本镜像时如何自动更新到各个服务？</h2><ol>
<li>创建服务   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">--replicas 3 \</span><br><span class="line">-p 80:80 \</span><br><span class="line">--with-registry-auth \</span><br><span class="line">--name nginx \</span><br><span class="line">192.168.18.144:5000/nginx:1.17.9</span><br><span class="line">``` </span><br><span class="line">使用`--with-registry-auth`参数        </span><br><span class="line">使用已登录的认证信息，不配置会报no such image   </span><br><span class="line">2. 滚动更新</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>docker service update nginx <br>–image 192.168.18.144:5000/nginx:1.17.10<br>```</p>
]]></content>
  </entry>
  <entry>
    <title>fastdfs使用</title>
    <url>/hexoblog/20200421101354.html</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p><a href="https://github.com/happyfish100/fastdfs" target="_blank" rel="noopener">https://github.com/happyfish100/fastdfs</a><br><a href="https://github.com/tobato/FastDFS_Client" target="_blank" rel="noopener">https://github.com/tobato/FastDFS_Client</a>        </p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="http://www.ityouknow.com/fastdfs/2017/10/10/cluster-building-fastdfs.html" target="_blank" rel="noopener">http://www.ityouknow.com/fastdfs/2017/10/10/cluster-building-fastdfs.html</a>   </p>
<p>安装包下载      </p>
<p><a href="https://github.com/happyfish100/libfastcommon.git" target="_blank" rel="noopener">https://github.com/happyfish100/libfastcommon.git</a><br><a href="https://github.com/happyfish100/libfastcommon/archive/V1.0.43.tar.gz" target="_blank" rel="noopener">https://github.com/happyfish100/libfastcommon/archive/V1.0.43.tar.gz</a>      </p>
<p><a href="https://github.com/happyfish100/fastdfs.git" target="_blank" rel="noopener">https://github.com/happyfish100/fastdfs.git</a><br><a href="https://github.com/happyfish100/fastdfs/archive/V6.06.tar.gz" target="_blank" rel="noopener">https://github.com/happyfish100/fastdfs/archive/V6.06.tar.gz</a>      </p>
<p><a href="https://github.com/happyfish100/fastdfs-nginx-module.git" target="_blank" rel="noopener">https://github.com/happyfish100/fastdfs-nginx-module.git</a><br><a href="https://github.com/happyfish100/fastdfs-nginx-module/archive/V1.22.tar.gz" target="_blank" rel="noopener">https://github.com/happyfish100/fastdfs-nginx-module/archive/V1.22.tar.gz</a>         </p>
<p><a href="http://nginx.org/download/nginx-1.15.4.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.15.4.tar.gz</a></p>
<h2 id="单机安装部署"><a href="#单机安装部署" class="headerlink" title="单机安装部署"></a>单机安装部署</h2><p>1.基础依赖      </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install git gcc gcc-c++ make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl-devel wget vim -y</span><br><span class="line">```     </span><br><span class="line"></span><br><span class="line">2.安装libfastcommon</span><br></pre></td></tr></table></figure>

<p>cd /usr/local/src<br>git clone <a href="https://github.com/happyfish100/libfastcommon.git" target="_blank" rel="noopener">https://github.com/happyfish100/libfastcommon.git</a> –depth 1<br>cd libfastcommon<br>./make.sh &amp;&amp; ./make.sh install</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3.安装fastdfs</span><br></pre></td></tr></table></figure>

<p>cd /usr/local/src<br>git clone <a href="https://github.com/happyfish100/fastdfs.git" target="_blank" rel="noopener">https://github.com/happyfish100/fastdfs.git</a> –depth 1<br>cd fastdfs<br>./make.sh &amp;&amp; ./make.sh install</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">4.配置tracker       </span><br><span class="line">4.1 tracker.conf</span><br></pre></td></tr></table></figure>

<p>cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf</p>
<p>#启用配置文件<br>disabled=false</p>
<p>#设置tracker的端口号<br>port=22122</p>
<p>#设置tracker的数据文件和日志目录（需手动创建）<br>base_path=/data/fastdfs/tracker/</p>
<p>#设置http端口号<br>http.server_port=8888</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4.2 启动tracker       </span><br><span class="line">`fdfs_trackerd /etc/fdfs/tracker.conf restart`          </span><br><span class="line">日志`cat /data/fastdfs/logs/trackerd.log`          </span><br><span class="line"></span><br><span class="line">5.配置storage           </span><br><span class="line">5.1 storage.conf</span><br></pre></td></tr></table></figure>

<p>cp storage.conf.sample storage.conf</p>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>group_name=group1                   # 组名（第一组为group1，第二组为group2，依次类推…）<br>base_path=/data/fastdfs/storage             # 数据和日志文件存储根目录<br>store_path0=/data/fastdfs/storage           #第一个存储目录，第二个存储目录起名为：store_path1=xxx，其它存储目录名依次类推…<br>store_path_count=1                  # 存储路径个数，需要和store_path个数匹配<br>tracker_server=192.168.18.147:22122          # tracker服务器IP和端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5.2 启动storage节点</span><br></pre></td></tr></table></figure>

<p>fdfs_storaged /etc/fdfs/storage.conf restart ##启动<br>cat /data/fastdfs/storage/logs/storaged.log ## 日志文件</p>
<p>fdfs_monitor /etc/fdfs/storage.conf ##  查看storage服务器是否已经登记到tracker服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">6.storage节点nginx配置    </span><br><span class="line">6.1 fastdfs-nginx-module配置</span><br></pre></td></tr></table></figure>

<p>cd /usr/local/src<br>wget <a href="http://nginx.org/download/nginx-1.15.4.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.15.4.tar.gz</a><br>tar -zxvf nginx-1.15.4.tar.gz<br>cd nginx-1.15.4/<br>./configure –add-module=/usr/local/src/fastdfs-nginx-module/src/<br>make &amp;&amp; make install</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6.2 mod_fastdfs.conf配置</span><br></pre></td></tr></table></figure>

<p>cp /usr/local/src/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/</p>
<p>vim /etc/fdfs/mod_fastdfs.conf</p>
<p>一般只需改动以下几个参数即可：<br>base_path=/data/fastdfs/storage           #保存日志目录<br>tracker_server=192.168.18.147:22122<br>storage_server_port=23000         #storage服务器的端口号<br>group_name=group1                 #当前服务器的group名<br>url_have_group_name = true        #文件url中是否有group名<br>store_path_count=1                #存储路径个数，需要和store_path个数匹配<br>store_path0=/data/fastdfs/storage         #存储路径<br>group_count = 0                   #设置组的个数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6.3 nginx.conf</span><br></pre></td></tr></table></figure>

<p>ln -s /data/fastdfs/storage/data /data/fastdfs/storage/data/M00</p>
<p>vim /usr/local/nginx/conf/nginx.conf<br>在server段中添加：</p>
<p>location ~/group[1-2]/M00 {<br>    root /data/fastdfs/storage/data;<br>    ngx_fastdfs_module;<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6.4 启动nginx</span><br></pre></td></tr></table></figure>

<p>cp /usr/local/src/fastdfs/conf/http.conf /etc/fdfs/<br>cp /usr/local/src/fastdfs/conf/mime.types /etc/fdfs/</p>
<p>/usr/local/nginx/sbin/nginx<br>/usr/local/nginx/sbin/nginx -s reload ##重启nginx</p>
<p>tail -f /usr/local/nginx/logs/error.log ## nginx日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">7.tracker端口配置</span><br></pre></td></tr></table></figure>

<p>vim /usr/local/nginx/conf/nginx.conf</p>
<p>server {</p>
<p>  #设置服务器端口<br>  listen       8888;</p>
<p>  #设置group1的负载均衡参数<br>  location /group1/M00 {<br>      proxy_pass <a href="http://192.168.18.147" target="_blank" rel="noopener">http://192.168.18.147</a>;<br>  }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">8.上传测试</span><br></pre></td></tr></table></figure>

<p>[root@localhost ~]# cp /etc/fdfs/client.conf.sample client.conf<br>[root@localhost ~]# mkdir /data/fastdfs/client<br>[root@localhost ~]# vim client.conf<br>base_path=/data/fastdfs/client                   #日志存放路径<br>tracker_server=192.168.18.147:22122<br>http.tracker_server_port=8080</p>
<p>[root@localhost ~]# fdfs_upload_file client.conf test.jpg<br>group1/M00/00/00/wKgSk16fpQyAH5AiAAAuxhLY-MA119.jpg</p>
<pre><code>

# docker

# 其他
https://zhuanlan.zhihu.com/p/32734357   
https://zhuanlan.zhihu.com/p/32798888   </code></pre>]]></content>
  </entry>
  <entry>
    <title>git常用操作</title>
    <url>/hexoblog/20190705162611.html</url>
    <content><![CDATA[<h1 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h1><h2 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h2><p>yum -y install git</p>
<h2 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h2><h1 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h1><ul>
<li><p>下载远程仓库代码默认分支<br>git clone url</p>
</li>
<li><p>下载指定分支<br>git clone url -b dev_branch</p>
</li>
<li><p>切换分支<br>git checkout b1 </p>
</li>
<li><p>删除本地未提交(uncommit修改过的)代码<br>git clean -xdf</p>
</li>
<li><p>查看当前分支<br>git branch</p>
</li>
<li><p>合并另一个分支代码到当前分支<br>git merge dev</p>
</li>
<li><p>带合并记录，方便追溯<br>git merge dev –no-ff </p>
</li>
<li><p>不产生合并记录<br>git rebase dev</p>
</li>
</ul>
<h1 id="记住密码"><a href="#记住密码" class="headerlink" title="记住密码"></a>记住密码</h1><ul>
<li><p>bash操作<br>git config –global credential.helper store</p>
</li>
<li><p>修改~/.gitconfig文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[credential]</span><br><span class="line">    helper = store</span><br></pre></td></tr></table></figure>

<p>git config –global user.email “<a href="mailto:you@example.com" target="_blank" rel="noopener">you@example.com</a>“<br>git config –global user.name “Your Name”</p>
</li>
</ul>
<h1 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h1><ul>
<li><p>添加远程仓库地址<br>git remote add origin <a href="mailto:git@192.168.5.166" target="_blank" rel="noopener">git@192.168.5.166</a>:lixl/p2m-sf-history.git</p>
</li>
<li><p>推送到本地到远程分支<br>git push origin b_local:b_remote</p>
</li>
</ul>
<h1 id="jgit"><a href="#jgit" class="headerlink" title="jgit"></a>jgit</h1><p><a href="https://github.com/centic9/jgit-cookbook" target="_blank" rel="noopener">jgit示例代码</a></p>


<h1 id="从svn迁移到git"><a href="#从svn迁移到git" class="headerlink" title="从svn迁移到git"></a>从svn迁移到git</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#yum -y install git-svn</span><br><span class="line"></span><br><span class="line">$git svn clone svnRepoUrl localDir -r 5:HEAD --username userA</span><br></pre></td></tr></table></figure>

<p>爬坑-使用windows转换时，如果svn历史记录里有大量的文件删除操作，在转换为git记录时可能会出错;<br>使用linux进行改操作比较好。</p>
]]></content>
  </entry>
  <entry>
    <title>h2 database</title>
    <url>/hexoblog/20200526233751.html</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>h2-database java版本的数据库        </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.197<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>help说明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[lixl@localhost h2db]$ java -cp h2*.jar org.h2.tools.Server -?</span><br><span class="line">Starts the H2 Console (web-) server, TCP, and PG server.</span><br><span class="line">Usage: java org.h2.tools.Server &lt;options&gt;</span><br><span class="line">When running without options, -tcp, -web, -browser and -pg are started.</span><br><span class="line">Options are case sensitive. Supported options are:</span><br><span class="line">[-help] or [-?]         Print the list of options</span><br><span class="line">[-web]                  Start the web server with the H2 Console</span><br><span class="line">[-webAllowOthers]       Allow other computers to connect - see below  http访问,默认只能本机使用</span><br><span class="line">[-webDaemon]            Use a daemon thread</span><br><span class="line">[-webPort &lt;port&gt;]       The port (default: 8082) http访问端口号</span><br><span class="line">[-webSSL]               Use encrypted (HTTPS) connections</span><br><span class="line">[-browser]              Start a browser connecting to the web server</span><br><span class="line">[-tcp]                  Start the TCP server</span><br><span class="line">[-tcpAllowOthers]       Allow other computers to connect - see below tcp访问,默认只能本机使用</span><br><span class="line">[-tcpDaemon]            Use a daemon thread</span><br><span class="line">[-tcpPort &lt;port&gt;]       The port (default: 9092)</span><br><span class="line">[-tcpSSL]               Use encrypted (SSL) connections</span><br><span class="line">[-tcpPassword &lt;pwd&gt;]    The password for shutting down a TCP server</span><br><span class="line">[-tcpShutdown &quot;&lt;url&gt;&quot;]  Stop the TCP server; example: tcp://localhost</span><br><span class="line">[-tcpShutdownForce]     Do not wait until all connections are closed</span><br><span class="line">[-pg]                   Start the PG server</span><br><span class="line">[-pgAllowOthers]        Allow other computers to connect - see below</span><br><span class="line">[-pgDaemon]             Use a daemon thread</span><br><span class="line">[-pgPort &lt;port&gt;]        The port (default: 5435)</span><br><span class="line">[-properties &quot;&lt;dir&gt;&quot;]   Server properties (default: ~, disable: null)</span><br><span class="line">[-baseDir &lt;dir&gt;]        The base directory for H2 databases (all servers)</span><br><span class="line">[-ifExists]             Only existing databases may be opened (all servers)</span><br><span class="line">[-trace]                Print additional trace information (all servers)</span><br><span class="line">[-key &lt;from&gt; &lt;to&gt;]      Allows to map a database name to another (all servers)</span><br><span class="line">The options -xAllowOthers are potentially risky.</span><br><span class="line">For details, see Advanced Topics / Protection against Remote Access.</span><br><span class="line">See also http://h2database.com/javadoc/org/h2/tools/Server.html</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[lixl@localhost h2db]$ java -cp h2*.jar org.h2.tools.Shell -?</span><br><span class="line">Interactive command line tool to access a database using JDBC.</span><br><span class="line">Usage: java org.h2.tools.Shell &lt;options&gt;</span><br><span class="line">Options are case sensitive. Supported options are:</span><br><span class="line">[-help] or [-?]        Print the list of options</span><br><span class="line">[-url &quot;&lt;url&gt;&quot;]         The database URL (jdbc:h2:...)</span><br><span class="line">[-user &lt;user&gt;]         The user name</span><br><span class="line">[-password &lt;pwd&gt;]      The password</span><br><span class="line">[-driver &lt;class&gt;]      The JDBC driver class to use (not required in most cases)</span><br><span class="line">[-sql &quot;&lt;statements&gt;&quot;]  Execute the SQL statements and exit</span><br><span class="line">[-properties &quot;&lt;dir&gt;&quot;]  Load the server properties from this directory</span><br><span class="line">If special characters don&apos;t work as expected, you may need to use</span><br><span class="line"> -Dfile.encoding=UTF-8 (Mac OS X) or CP850 (Windows).</span><br><span class="line">See also http://h2database.com/javadoc/org/h2/tools/Shell.html</span><br></pre></td></tr></table></figure>

<h1 id="database-url"><a href="#database-url" class="headerlink" title="database_url"></a><a href="http://www.h2database.com/html/features.html#database_url" target="_blank" rel="noopener">database_url</a></h1><ul>
<li><p>tcp<br><code>java -cp h2-1.4.197.jar org.h2.tools.Server -tcpAllowOthers -webAllowOthers</code></p>
</li>
<li><p>jdbc-url-tcp      </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">driverClassName = org.h2.Driver</span><br><span class="line">url= jdbc:h2:tcp://localhost:9092/~/test</span><br><span class="line">username = test</span><br><span class="line">password = test</span><br></pre></td></tr></table></figure>
</li>
<li><p>jdbc-url-local<br><code>jdbc:h2:~/dbtest;MODE=Oracle;AUTO_SERVER=TRUE</code><br><a href="http://www.h2database.com/html/features.html#compatibility" target="_blank" rel="noopener">兼容性</a></p>
</li>
<li><p>jdbc-url-mem<br><code>jdbc:h2:mem:test</code></p>
</li>
<li><p>console<br><code>java -cp h2-1.4.197.jar org.h2.tools.Shell -url &quot;jdbc:h2:tcp://192.168.18.147:9092/~/test&quot; -user test -password test</code><br><code>java -cp h2-1.4.197.jar org.h2.tools.Shell -url &quot;jdbc:h2:/data/h2database/test&quot; -user test -password test</code></p>
</li>
<li><p>maven exec-maven-plugin启动<br>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.199<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>exec-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>java<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>org.h2.tools.Server<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">arguments</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">argument</span>&gt;</span>-tcpAllowOthers<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">argument</span>&gt;</span>-webAllowOthers<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- db文件不存在时，可以直接创建一个新的，而不是报错 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">argument</span>&gt;</span>-ifNotExists<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><code>mvn ecec:java</code> 等同于 <code>java -cp h2-1.4.197.jar org.h2.tools.Server -tcpAllowOthers -webAllowOthers -ifNotExists</code></p>
<h1 id="CSV操作"><a href="#CSV操作" class="headerlink" title="CSV操作"></a>CSV操作</h1><ul>
<li><p>通过数据库读取 CSV 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM CSVREAD(&apos;test.csv&apos;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 CSV 文件导入数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE TEST AS SELECT * FROM CSVREAD(&apos;test.csv&apos;);</span><br><span class="line">CREATE TABLE TEST(ID INT PRIMARY KEY, NAME VARCHAR(255))</span><br><span class="line">    AS SELECT * FROM CSVREAD(&apos;test.csv&apos;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过数据库写入CSV 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE TEST(ID INT, NAME VARCHAR);</span><br><span class="line">INSERT INTO TEST VALUES(1, &apos;Hello&apos;), (2, &apos;World&apos;);</span><br><span class="line">CALL CSVWRITE(&apos;test.csv&apos;, &apos;SELECT * FROM TEST&apos;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>java-Csv工具读写CSV文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sysware.p2m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.h2.tools.Csv;</span><br><span class="line"><span class="keyword">import</span> org.h2.tools.SimpleResultSet;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSetMetaData;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Types;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">H2CSVTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String csv_file = <span class="string">"d://test2.csv"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读写本地csv文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        SimpleResultSet rs = <span class="keyword">new</span> SimpleResultSet();</span><br><span class="line">        rs.addColumn(<span class="string">"NAME"</span>, Types.VARCHAR, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line">        rs.addColumn(<span class="string">"EMAIL"</span>, Types.VARCHAR, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line">        rs.addRow(<span class="string">"Bob Meier"</span>, <span class="string">"bob.meier@abcde.abc"</span>);</span><br><span class="line">        rs.addRow(<span class="string">"John Jones"</span>, <span class="string">"john.jones@abcde.abc"</span>);</span><br><span class="line">        <span class="keyword">new</span> Csv().write(csv_file, rs, <span class="string">"UTF-8"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ResultSet rs = <span class="keyword">new</span> Csv().read(csv_file, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        ResultSetMetaData meta = rs.getMetaData();</span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; meta.getColumnCount(); i++) &#123;</span><br><span class="line">                System.out.println(</span><br><span class="line">                        meta.getColumnLabel(i + <span class="number">1</span>) + <span class="string">": "</span> +</span><br><span class="line">                                rs.getString(i + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        rs.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.h2.jdbcx.JdbcConnectionPool.create</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://gitee.com/lixl/spring-schedule.git" target="_blank" rel="noopener">https://gitee.com/lixl/spring-schedule.git</a><br><a href="https://github.com/waylau/h2-database-doc" target="_blank" rel="noopener">h2使用文档</a><br><a href="https://github.com/h2database/h2database" target="_blank" rel="noopener">h2database</a>      </p>
]]></content>
  </entry>
  <entry>
    <title>hexo使用</title>
    <url>/hexoblog/20190705162535.html</url>
    <content><![CDATA[<h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官网</a><br>Hexo是一个基于NodeJS环境的、快速、简洁且高效的博客框架。  </p>
<ol>
<li>能快速将MarkDown格式文件生成静态网页 </li>
<li>将静态网页托管到GitPage(github提供的免费的静态网站托管服务)        </li>
<li>后期个人博客维护</li>
</ol>
<h1 id="git安装与配置"><a href="#git安装与配置" class="headerlink" title="git安装与配置"></a>git安装与配置</h1><p><a href="https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="noopener">git安装教程</a>     </p>
<h1 id="nodejs环境安装及配置"><a href="#nodejs环境安装及配置" class="headerlink" title="nodejs环境安装及配置"></a>nodejs环境安装及配置</h1><ol>
<li>下载安装<br><a href="https://nodejs.org/dist/v8.1.3/node-v8.1.3-win-x64.zip" target="_blank" rel="noopener">https://nodejs.org/dist/v8.1.3/node-v8.1.3-win-x64.zip</a><br><a href="https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-x64.tar.xz" target="_blank" rel="noopener">https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-x64.tar.xz</a><br>$ xz -d node-v6.10.1-linux-x64.tar.xz<br>$ tar -xvf node-v6.10.1-linux-x64.tar   </li>
<li>解压，配置PATH    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">npm config set prefix &quot;/u0/lixl/nodejs/node_global&quot;</span><br><span class="line">npm config set cache &quot;/u0/lixl/nodejs/node_cache&quot;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="安装hexo及初始化"><a href="#安装hexo及初始化" class="headerlink" title="安装hexo及初始化"></a>安装hexo及初始化</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 安装 hexo</span><br><span class="line">npm install hexo@3.9.0 -g</span><br><span class="line"></span><br><span class="line">-- 初始化myblog文件夹</span><br><span class="line">hexo init myblog</span><br><span class="line">-- 安装依赖</span><br><span class="line">cd myblog //进入这个myblog文件夹</span><br><span class="line">npm install</span><br><span class="line">-- 本地查看</span><br><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<h1 id="hexo中git配置"><a href="#hexo中git配置" class="headerlink" title="hexo中git配置"></a>hexo中git配置</h1><h2 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<h2 id="推送到github"><a href="#推送到github" class="headerlink" title="推送到github"></a>推送到github</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git@1.0.0 --save</span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<h2 id="使用ssh-redeploy"><a href="#使用ssh-redeploy" class="headerlink" title="使用ssh redeploy"></a>使用ssh redeploy</h2><ol>
<li>重新生成 SSH key    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;Github的注册邮箱地址&quot;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>打开 /c/Users/user/.ssh/id_rsa.pub 并复制其内容   </p>
<ol start="2">
<li>配置git   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">访问 GitHub – Settings – SSH and GPG keys – New SSH key</span><br><span class="line">Title:  blog       Key:  id_rsa.pub 的内容</span><br><span class="line">```   </span><br><span class="line">3. 修改站点配置文件 _config.yml      </span><br><span class="line">```yml</span><br><span class="line"># 把deploy中的repo由注释的格式改为以下格式</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  #repo: https://github.com/username/username.github.io.git</span><br><span class="line">  repo: git@github.com:username/username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="创建新页面"><a href="#创建新页面" class="headerlink" title="创建新页面"></a>创建新页面</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo creat &quot;新页面&quot;</span><br><span class="line"></span><br><span class="line">## 设置ID</span><br><span class="line">hexo new &quot;标题&quot; --id=&quot;20190705170110&quot;</span><br><span class="line"></span><br><span class="line">## 搜狗输入法自定义时间戳 sjc快捷键</span><br><span class="line">#$year$month_mm$day_dd$fullhour$minute$second</span><br></pre></td></tr></table></figure>

<h1 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h1><p>1.npm安装插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>2.修改配置_config.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>3.修改主题配置themes/next/_config.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h1 id="本地图片显示"><a href="#本地图片显示" class="headerlink" title="本地图片显示"></a>本地图片显示</h1><p>1.找到Hexo下的_config.yml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>

<p>2.安装插件hexo-asset-image</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p>3.创建md文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n &quot;本地图片显示&quot;</span><br></pre></td></tr></table></figure>

<p>生成文件 “本地图片显示.md” 和”本地图片显示”文件夹<br>4.md文件中添加图片</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img 2019070495711.png 图片文字 %&#125;</span><br></pre></td></tr></table></figure>

<p>5.图片放大效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$git clone https://github.com/theme-next/theme-next-fancybox3 themes/next/source/lib/fancybox</span><br><span class="line"></span><br><span class="line">$vim themes/next/_config.yml</span><br><span class="line">fancybox: true</span><br></pre></td></tr></table></figure>

<h1 id="静态资源的相对路径问题"><a href="#静态资源的相对路径问题" class="headerlink" title="静态资源的相对路径问题"></a>静态资源的相对路径问题</h1><p>生成的html页面部署以后js/css路径不正确?</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">_config.yml</span></span><br><span class="line">    <span class="attr">relative_link:</span> <span class="literal">false</span> <span class="comment">## 关闭相对路径</span></span><br></pre></td></tr></table></figure>

<h1 id="添加gitalk评论"><a href="#添加gitalk评论" class="headerlink" title="添加gitalk评论"></a>添加gitalk评论</h1><p><a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk官方文档</a>             </p>
<h2 id="创建评论存储仓库"><a href="#创建评论存储仓库" class="headerlink" title="创建评论存储仓库"></a>创建评论存储仓库</h2><p>登录github创建一个库，用来存储评论<br>1.1 new repository,如<a href="https://github.com/lixl-site/blogtalk" target="_blank" rel="noopener">https://github.com/lixl-site/blogtalk</a><br>1.2 开启issue<br>Settings–》Options–》Features–》Issues 勾上</p>
<h2 id="申请GitHub-APP-key"><a href="#申请GitHub-APP-key" class="headerlink" title="申请GitHub APP key"></a>申请GitHub APP key</h2><p>地址 <a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a>        </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Application name/description 任意填写，不可为空 </span><br><span class="line">Homepage URL 域名 如：https://lixl-site.github.io</span><br><span class="line">Authorization callback URL 域名</span><br></pre></td></tr></table></figure>

<h1 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h1><p>基于hexo 3.9.0/hexo-theme-next 7.2.0 版本</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">## 开启gitalk功能</span></span><br><span class="line">  <span class="attr">github_id:</span> <span class="string">lixl-site</span> <span class="comment"># Github repo owner</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">blogtalk</span> <span class="comment"># 存储评论的仓库名称 </span></span><br><span class="line">  <span class="attr">client_id:</span>  <span class="comment"># 第2步申请来的app id</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="comment"># 第2步申请来的app secret</span></span><br><span class="line">  <span class="attr">admin_user:</span> <span class="string">lixl-site</span> <span class="comment"># GitHub repo owner and collaborators, only these guys can initialize github issues</span></span><br><span class="line">  <span class="attr">distraction_free_mode:</span> <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span>  <span class="comment">## 界面语言</span></span><br></pre></td></tr></table></figure>

<h2 id="高亮主题"><a href="#高亮主题" class="headerlink" title="高亮主题"></a>高亮主题</h2><p>NexT提供了5种代码块高亮主题</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Code Highlight theme</span></span><br><span class="line"><span class="comment"># Available values: normal | night | night eighties | night blue | night bright</span></span><br><span class="line"><span class="comment"># https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">normal</span></span><br></pre></td></tr></table></figure>

<p>参考<a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="noopener">chriskempson/tomorrow-theme</a>和<a href="http://theme-next.iissnan.com/theme-settings.html#syntax-highlight-scheme" target="_blank" rel="noopener">设置代码高亮主题</a></p>
<h2 id="代码块复制"><a href="#代码块复制" class="headerlink" title="代码块复制"></a>代码块复制</h2><p>修改主题themes/next/_config.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">    <span class="comment"># Manual define the border radius in codeblock</span></span><br><span class="line">    <span class="comment"># Leave it empty for the default 1</span></span><br><span class="line">    <span class="attr">border_radius:</span></span><br><span class="line">    <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">    <span class="attr">copy_button:</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># Show text copy result</span></span><br><span class="line">        <span class="attr">show_result:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>设置属性copy_button为true，同时设置show_result为true，显示代码复制结果</p>
<h1 id="添加mermaid支持"><a href="#添加mermaid支持" class="headerlink" title="添加mermaid支持"></a><a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams" target="_blank" rel="noopener">添加mermaid支持</a></h1><ol>
<li><p>安装mermaid插件<br><code>npm install hexo-filter-mermaid-diagrams</code></p>
</li>
<li><p>启用主题支持     </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">themes\next\_config.yml</span><br><span class="line"></span><br><span class="line">mermaid:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://mermaid-js.github.io/mermaid/" target="_blank" rel="noopener">mermaid语法</a></p>
</li>
</ol>
<p>甘特图</p>
<pre class="mermaid">gantt
    title A Gantt Diagram
    dateFormat  YYYY-MM-DD
    section Section
    A task           :a1, 2014-01-01, 30d
    Another task     :after a1  , 20d
    section Another
    Task in sec      :2014-01-12  , 12d
    another task      : 24d</pre>

<p>序列图</p>
<pre class="mermaid">sequenceDiagram
Alice->>John: Hello John, how are you?
loop Healthcheck
    John->>John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John-->>Alice: Great!
John->>Bob: How about you?
Bob-->>John: Jolly good!</pre>

<p>类图</p>
<pre class="mermaid">classDiagram
    Class01 <|-- averylongclass : cool <<interface>> Class01
    Class09 --> C2 : Where am i?
    Class09 --* C3
    Class09 --|> Class07
    Class07 : equals()
    Class07 : Object[] elementData
    Class01 : size()
    Class01 : int chimp
    Class01 : int gorilla</|--></pre>

<p>饼状图</p>
<pre class="mermaid">pie
    title Key elements in Product X
    "Calcium" : 42.96
    "Potassium" : 50.05
    "Magnesium" : 10.01
    "Iron" :  5</pre>

<h1 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h1><p>1.页面导出pdf<br>2.关键字搜索     </p>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>http协议相关</title>
    <url>/hexoblog/20201117104656.html</url>
    <content><![CDATA[<h1 id="get与post请求区别"><a href="#get与post请求区别" class="headerlink" title="get与post请求区别"></a>get与post请求区别</h1><ol>
<li>get请求只能使用query方式请求参数，post参数可以放到body里</li>
<li>get请求长度有限制      <ul>
<li>get请求参数长度(过长服务端返回400),<br>经测试，<br>使用httpclient可达到7810 byte,<br>使用ajax及浏览器可达到6930 bytes</li>
</ul>
</li>
<li>下载文件时,get方式前端处理更方便一些      <ul>
<li>get方式可以通过a标签或者window.href下载</li>
<li>post方式需要模拟form表单提交参数并下载(不能直接使用ajax方式)</li>
</ul>
</li>
</ol>
<h1 id="base64编码"><a href="#base64编码" class="headerlink" title="base64编码"></a>base64编码</h1><p>作用：</p>
<ul>
<li>1.base64编码后的字符串会比原来长三分之一，不会压缩字符串长度        </li>
<li>2.在必须使用get请求(如文件下载)时，而参数又过多或包含中文时，可以使用base64编码参数         </li>
</ul>
<p>实现方式：</p>
<ul>
<li><a href="https://blog.csdn.net/weixin_30588675/article/details/97717482" target="_blank" rel="noopener">js使用base64实现</a></li>
<li>java.util.Base64</li>
</ul>
]]></content>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>java-ThreadLocal使用</title>
    <url>/hexoblog/20200510161444.html</url>
    <content><![CDATA[<h1 id="ThreadLocal能用来做什么"><a href="#ThreadLocal能用来做什么" class="headerlink" title="ThreadLocal能用来做什么"></a>ThreadLocal能用来做什么</h1><p>保证在ThreadLocal中保存的对象，在同一个线程中获取到的是同一个实例。<br>如：spring-Transaction中的connetcion对象，hibernate-session对象及mybatis-session对象。 </p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;D&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        D d = <span class="keyword">new</span> D();</span><br><span class="line"></span><br><span class="line">        threadLocal.set(d);</span><br><span class="line">        System.out.println(d==threadLocal.get());<span class="comment">//返回ture,说明是同一个对象</span></span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(threadLocal.get());<span class="comment">// null,说明其他线程是获取不到的啊</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不remove的话会导致内存泄露</span></span><br><span class="line">        System.out.println(threadLocal.get());</span><br><span class="line">        <span class="comment">//threadLocal.remove();</span></span><br><span class="line"></span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：同一个线程中获取到的是同一个对象，其他线程获取不到。<br>不使用的对象要调用remove方法删除掉。</p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>java.lang.ThreadLocal#set方法       </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">     Thread t = Thread.currentThread();</span><br><span class="line">     ThreadLocalMap map = getMap(t);</span><br><span class="line">     <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">         map.set(<span class="keyword">this</span>, value);</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">         createMap(t, value);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> t.threadLocals;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>调用向ThreadLocal set(value)时，是将value放入当前线程对象的currentThread#<br>threadLocals(ThreadLocal.ThreadLocalMap类型)变量中了。</p>
<p>接着看ThreadLocalMap#set方法的实现      </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">        Object value;</span><br><span class="line"></span><br><span class="line">        Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">            <span class="keyword">super</span>(k);</span><br><span class="line">            value = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</span><br><span class="line">        Entry[] tab = table;</span><br><span class="line">        <span class="keyword">int</span> len = tab.length;</span><br><span class="line">        <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Entry e = tab[i];</span><br><span class="line">             e != <span class="keyword">null</span>;</span><br><span class="line">             e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">            ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">                e.value = value;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">                replaceStaleEntry(key, value, i);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tab[i] = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line">        <span class="keyword">int</span> sz = ++size;</span><br><span class="line">        <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">            rehash();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以Entry&lt;threadLocal对象, value&gt;方式放进ThreadLocalMap。</p>
<h1 id="对象引用"><a href="#对象引用" class="headerlink" title="对象引用"></a>对象引用</h1><h2 id="强引用-普通new对象"><a href="#强引用-普通new对象" class="headerlink" title="强引用(普通new对象)"></a>强引用(普通new对象)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"finalize"</span>);<span class="comment">//输出这个说明垃圾回收器回收了该对象</span></span><br><span class="line">        <span class="keyword">super</span>.finalize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T1_CommonReferenceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.正常new对象并使用</span></span><br><span class="line">        D d = <span class="keyword">new</span> D();</span><br><span class="line">        System.out.println(d);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.等于null时，该对象没有引用了</span></span><br><span class="line">        <span class="comment">//表示可以被gc回收，但需要等待gc运行才真正被回收</span></span><br><span class="line">        d = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.手动运行gc，一般情况下是不需要的</span></span><br><span class="line">        System.gc();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.检查改对象是否为null</span></span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：d对象一直会存在，只有当对象引用被删除时，gc才会回收空间</p>
<h2 id="SoftReference软引用"><a href="#SoftReference软引用" class="headerlink" title="SoftReference软引用"></a>SoftReference软引用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.ref.SoftReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T2_SoftReferenceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置JVM最大堆内存为20M</span></span><br><span class="line">    <span class="comment">// -Xms20M -Xmx20M</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.生成一个对象，占用内存10M</span></span><br><span class="line">        SoftReference&lt;<span class="keyword">byte</span>[]&gt; softReference = <span class="keyword">new</span> SoftReference&lt;<span class="keyword">byte</span>[]&gt;(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">10</span>]);</span><br><span class="line">        System.out.println(softReference.get());</span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="comment">//2.对象还存在，没有被回收</span></span><br><span class="line">        System.out.println(softReference.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里又生成了个大对象</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">10</span>];</span><br><span class="line">        System.out.println(bytes2);</span><br><span class="line">        <span class="comment">//3.对象被回收了</span></span><br><span class="line">        System.out.println(softReference.get());<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：当堆空间不足时，gc会自动回收软引用对象；<br>所以，SoftReference对象适合来做缓存。</p>
<h2 id="WeakReference弱引用"><a href="#WeakReference弱引用" class="headerlink" title="WeakReference弱引用"></a>WeakReference弱引用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T3_WeakReferenceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WeakReference&lt;D&gt; weakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(<span class="keyword">new</span> D());</span><br><span class="line">        <span class="comment">//1.获取到内存对象</span></span><br><span class="line">        System.out.println(weakReference.get());</span><br><span class="line">        System.gc();<span class="comment">//2.运行gc</span></span><br><span class="line">        <span class="comment">//3.gc运行以后为空，说明空间已经被垃圾回收器释放了</span></span><br><span class="line">        System.out.println(weakReference.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.继续使用该对象的话则不会被清除</span></span><br><span class="line">        <span class="comment">//System.out.println(dInstance.getId());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：gc会自动回收不再使用的弱引用对象。<br>对比ThreadLocal中，如果不是弱引用对象的话，可能会导致内存泄露。</p>
<h2 id="PhantomReference虚引用"><a href="#PhantomReference虚引用" class="headerlink" title="PhantomReference虚引用"></a>PhantomReference虚引用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.PhantomReference;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.ReferenceQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T4_PhantomReferenceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.观察引用队列</span></span><br><span class="line">        ReferenceQueue&lt;D&gt; referenceQueue = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</span><br><span class="line">        PhantomReference&lt;D&gt; phantomReference = <span class="keyword">new</span> PhantomReference&lt;D&gt;(<span class="keyword">new</span> D(), referenceQueue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(referenceQueue.poll()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                        System.out.println(<span class="string">"1111"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    System.out.println(phantomReference.get());<span class="comment">//null,获取不到</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用输入流，阻塞住main线程，否则观察不到</span></span><br><span class="line">        System.in.read();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：phantomReference.get()是一致为空的，说明在jvm内存中是一直获取不到的。<br>作用：用来管理堆外内存的。<br>如NIO中DirectByteBuffer对象，使用的是堆外内存；<br>由专门的gc线程负责监视ReferenceQueue并销毁。</p>
<p><a href="https://www.jianshu.com/p/91a824948d1d" target="_blank" rel="noopener">内存映射文件与DirectMemory</a></p>
]]></content>
  </entry>
  <entry>
    <title>java-commons-cli使用</title>
    <url>/hexoblog/20210527174644.html</url>
    <content><![CDATA[<h1 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h1><p>使用commons-cli可以方便的解析java参数<code>main(String[] args)</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-cli&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-cli&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://blog.csdn.net/yamaxifeng_132/article/details/87822812</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Options options = <span class="keyword">new</span> Options();</span><br><span class="line">    options.addOption(<span class="string">"h"</span>, <span class="string">"help"</span>, <span class="keyword">false</span>, <span class="string">"print options' information"</span>);</span><br><span class="line">    options.addOption(<span class="string">"p"</span>, <span class="string">"port"</span>, <span class="keyword">true</span>, <span class="string">"http proxy port"</span>);</span><br><span class="line">    options.addOption(<span class="string">"s"</span>, <span class="string">"start"</span>, <span class="keyword">false</span>, <span class="string">"commond: start http proxy server"</span>);</span><br><span class="line">    CommandLineParser parser = <span class="keyword">new</span> DefaultParser();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        CommandLine cli = parser.parse(options, args);</span><br><span class="line">        <span class="keyword">if</span>(cli.hasOption(<span class="string">"h"</span>))&#123;</span><br><span class="line">            HelpFormatter hf = <span class="keyword">new</span> HelpFormatter();</span><br><span class="line">            hf.printHelp(<span class="string">"Options"</span>, options);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            String port = cli.getOptionValue(<span class="string">"p"</span>);</span><br><span class="line">            <span class="keyword">int</span> portInt = <span class="number">8580</span>;</span><br><span class="line">            <span class="keyword">if</span>(port!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                portInt = Integer.parseInt(port);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(port);</span><br><span class="line">            System.out.println(System.getProperty(<span class="string">"logback.configurationFile"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>命令行运行jar </p>
<ul>
<li>短命令<code>java -jar xx.jar -p=8888 -s</code></li>
<li>长命令<code>java -jar xx.jar -port=8888 -start</code></li>
<li>带jvm参数 <code>java -jar -Dlogback.configurationFile=./conf/logback.xml xx.jar -p=8888 -s</code></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>java-jdk与cglib代理</title>
    <url>/hexoblog/20200617170059.html</url>
    <content><![CDATA[<h1 id="先理解这几个概念"><a href="#先理解这几个概念" class="headerlink" title="先理解这几个概念"></a>先理解这几个概念</h1><p>reflect、jdk-proxy、cglib-proxy、asm/javassist<br><a href="https://gitee.com/lixl/springboot-demo/tree/intercepter/src/test/java/com/example/springbootdemo/proxy" target="_blank" rel="noopener">示例代码</a></p>
<h2 id="reflect反射"><a href="#reflect反射" class="headerlink" title="reflect反射"></a>reflect反射</h2><ul>
<li>不使用new关键字创建对象</li>
<li>反射创建对象分两步<ul>
<li>1.加载class<br><code>GoodsService.class 或者 Class.forName(&quot;com.example.GoodsService&quot;)</code></li>
<li>2.创建对象<br>  使用默认的构造器生成对象    <code>clazz.newInstance()</code><br>  使用私有构造器生成对象  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Constructor constructor = clazz.getDeclaredConstructor()</span><br><span class="line">constructor.setAccessible(true);</span><br><span class="line">Object object = constructor.newInstance();</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="javassist、asm"><a href="#javassist、asm" class="headerlink" title="javassist、asm"></a>javassist、asm</h2><ul>
<li>字节码操作框架</li>
<li>直接生成字节码流 ==&gt; 类加载器 ==&gt; 对象<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javassist&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javassist&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.12.0.GA&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="jdk-proxy"><a href="#jdk-proxy" class="headerlink" title="jdk-proxy"></a>jdk-proxy</h2><p><code>java.lang.reflect.Proxy</code>可根据原对象生成代理对象;<br><code>java.lang.reflect.InvocationHandler</code>可以代理对象方法调用过程中织入新逻辑</p>
<h2 id="cglib-proxy"><a href="#cglib-proxy" class="headerlink" title="cglib-proxy"></a>cglib-proxy</h2><p><code>org.springframework.cglib.proxy.Enhancer</code>可增强原类生成代理类；</p>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><ul>
<li>对现有类功能的增强；</li>
<li>实现方式：生成一个增强后的class、或者在方法调用时增加逻辑</li>
<li>实现途径：<br>  1、织入静态代码 (javassit/asm都能生成新class)<br>  2、调用过程中加逻辑(reflect)</li>
</ul>
<h1 id="jdk-proxy与cgib对比"><a href="#jdk-proxy与cgib对比" class="headerlink" title="jdk-proxy与cgib对比"></a>jdk-proxy与cgib对比</h1><ul>
<li>1.使用场景：<ul>
<li>jdk动态代理，只能代理接口；cglib动态代理，所有类都能</li>
<li>都能实现AOP</li>
</ul>
</li>
<li>2.实现方式<ul>
<li>jdk动态代理，是通过原对象生成代理对象；<br>cglib动态代理，是通过原类生成代理类，然后生成对象</li>
</ul>
</li>
</ul>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul>
<li>1.cglib与jdk-proxy是否生成新class???</li>
<li>2.使用什么方式去实现aop的？？(reflect还是asm还是其他的)</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>java-jvm问题排错</title>
    <url>/hexoblog/20190714234553.html</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>main方法执行过程中卡死，没有日志也没有继续执行      </p>
<h1 id="排错过程"><a href="#排错过程" class="headerlink" title="排错过程"></a>排错过程</h1><h2 id="jps查看pid"><a href="#jps查看pid" class="headerlink" title="jps查看pid"></a>jps查看pid</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\develop\git\hexoblog&gt;jps</span><br><span class="line">9344 Jps</span><br><span class="line">5924 RemoteTestRunner</span><br><span class="line">13372</span><br></pre></td></tr></table></figure>

<h2 id="输出堆栈日志"><a href="#输出堆栈日志" class="headerlink" title="输出堆栈日志"></a>输出堆栈日志</h2><p>D:\develop\git\hexoblog&gt;jstack -l 5924 &gt;&gt; p.log</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">"main" #1 prio=5 os_prio=0 tid=0x0000000002b32800 nid=0x23e0 runnable [0x000000000102d000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">	at com.lixl.spring.sampler.CSVFileImportDB.upload(CSVFileImportDB.java:<span class="number">147</span>)</span><br><span class="line">	at com.lixl.spring.sampler.CSVFileImportDB.test(CSVFileImportDB.java:<span class="number">55</span>)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">	at org.junit.runners.model.FrameworkMethod$<span class="number">1</span>.runReflectiveCall(FrameworkMethod.java:<span class="number">50</span>)</span><br><span class="line">	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:<span class="number">12</span>)</span><br><span class="line">	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:<span class="number">47</span>)</span><br><span class="line">	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:<span class="number">17</span>)</span><br><span class="line">	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:<span class="number">74</span>)</span><br><span class="line">	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:<span class="number">83</span>)</span><br><span class="line">	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:<span class="number">72</span>)</span><br><span class="line">	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:<span class="number">231</span>)</span><br><span class="line">	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:<span class="number">57</span>)</span><br><span class="line">	at org.junit.runners.ParentRunner$<span class="number">3</span>.run(ParentRunner.java:<span class="number">290</span>)</span><br><span class="line">	at org.junit.runners.ParentRunner$<span class="number">1</span>.schedule(ParentRunner.java:<span class="number">71</span>)</span><br><span class="line">	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:<span class="number">288</span>)</span><br><span class="line">	at org.junit.runners.ParentRunner.access$<span class="number">000</span>(ParentRunner.java:<span class="number">58</span>)</span><br><span class="line">	at org.junit.runners.ParentRunner$<span class="number">2</span>.evaluate(ParentRunner.java:<span class="number">268</span>)</span><br><span class="line">	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:<span class="number">61</span>)</span><br><span class="line">	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:<span class="number">71</span>)</span><br><span class="line">	at org.junit.runners.ParentRunner.run(ParentRunner.java:<span class="number">363</span>)</span><br><span class="line">	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:<span class="number">174</span>)</span><br><span class="line">	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:<span class="number">89</span>)</span><br><span class="line">	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:<span class="number">41</span>)</span><br><span class="line">	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:<span class="number">541</span>)</span><br><span class="line">	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:<span class="number">763</span>)</span><br><span class="line">	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:<span class="number">463</span>)</span><br><span class="line">	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:<span class="number">209</span>)</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">	- None</span><br></pre></td></tr></table></figure>

<h2 id="定位出错位置"><a href="#定位出错位置" class="headerlink" title="定位出错位置"></a>定位出错位置</h2><p>CSVFileImportDB.java:147</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">23</span>:<span class="number">12</span>:<span class="number">39</span>,<span class="number">160</span>  INFO CSVFileImportDB:<span class="number">151</span> - [<span class="number">12084</span>, <span class="number">102783</span>, <span class="number">3.0</span>, <span class="number">3.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">1265183460000</span>]</span><br><span class="line"></span><br><span class="line">(line.endsWith(<span class="string">"\""</span>) &amp;&amp; (!line.endsWith(<span class="string">"\"\""</span>)) &amp;&amp; line.startsWith(<span class="string">"\""</span>)) || (line.isEmpty())</span><br></pre></td></tr></table></figure>

<h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><p>jdk1.8/oracle11g</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">"RATINGS"</span> </span><br><span class="line">   (	<span class="string">"USERID"</span> <span class="built_in">NUMBER</span>, </span><br><span class="line">	<span class="string">"RESTID"</span> <span class="built_in">VARCHAR2</span>(<span class="number">20</span> <span class="keyword">BYTE</span>), </span><br><span class="line">	<span class="string">"RATING"</span> <span class="built_in">NUMBER</span>, </span><br><span class="line">	<span class="string">"RATING_ENV"</span> <span class="built_in">NUMBER</span>, </span><br><span class="line">	<span class="string">"RATING_FLAVOR"</span> <span class="built_in">NUMBER</span>, </span><br><span class="line">	<span class="string">"RATING_SERVICE"</span> <span class="built_in">NUMBER</span>, </span><br><span class="line">	<span class="string">"TIMESTAMP"</span> <span class="built_in">VARCHAR2</span>(<span class="number">20</span> <span class="keyword">BYTE</span>), </span><br><span class="line">	<span class="string">"RATINGS_COMMENT"</span> <span class="keyword">CLOB</span></span><br><span class="line">   );</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/lixl-site/spring-sampler.git" target="_blank" rel="noopener">https://github.com/lixl-site/spring-sampler.git</a></p>
<p>lineCount=18114384     rowCount=4110345</p>
]]></content>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-oracle内置函数</title>
    <url>/hexoblog/20190707153044.html</url>
    <content><![CDATA[<h1 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 替换符  </span></span><br><span class="line"><span class="keyword">SELECT</span> q<span class="string">'=I'</span>m fine.=<span class="string">' FROM dual;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-- 连接符</span></span><br><span class="line"><span class="string">SELECT '</span>Im <span class="string">'||'</span>fine.<span class="string">' FROM dual;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-- 空值处理</span></span><br><span class="line"><span class="string">select empno, sal, nvl(sal, 0), ename, nvl(ename, '</span>无<span class="string">') from emp;</span></span><br></pre></td></tr></table></figure>

<h1 id="多行函数"><a href="#多行函数" class="headerlink" title="多行函数"></a>多行函数</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 求和</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- 求平均值</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- 最大值</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- 最小值</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- 计数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(empno) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<h1 id="字符处理"><a href="#字符处理" class="headerlink" title="字符处理"></a>字符处理</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- lower 转小写</span></span><br><span class="line"><span class="keyword">select</span> ename, <span class="keyword">lower</span>(ename) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- upper 转大写</span></span><br><span class="line"><span class="keyword">select</span> ename, <span class="keyword">upper</span>(ename) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- initcap 单词首字母大写</span></span><br><span class="line"><span class="keyword">select</span> ename, initcap(ename) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- concat 字符连接</span></span><br><span class="line"><span class="keyword">select</span> ename, <span class="keyword">concat</span>(ename, <span class="string">'12'</span>) <span class="keyword">from</span> emp; <span class="comment">-- 最多两个参数</span></span><br><span class="line"><span class="comment">-- substr 截取</span></span><br><span class="line"><span class="keyword">select</span> ename, <span class="keyword">substr</span>(ename, <span class="number">0</span>, <span class="number">1</span>) <span class="keyword">from</span> emp; <span class="comment">-- 取名称的第一个字符</span></span><br><span class="line"><span class="comment">-- length 字符串长度</span></span><br><span class="line"><span class="keyword">select</span> ename, <span class="keyword">length</span>(ename) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">--  replace 替换</span></span><br><span class="line"><span class="comment">-- trim 去除首尾空格</span></span><br><span class="line"><span class="comment">-- instr 字符搜索</span></span><br><span class="line"><span class="comment">-- rpad 从右边填充字符</span></span><br><span class="line"><span class="comment">-- lpad 从左边填充字符</span></span><br></pre></td></tr></table></figure>

<h1 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 格式化</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sysdate</span>, to_char(<span class="keyword">sysdate</span>, <span class="string">'yyyy-MM-dd hh24:mi:ss'</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- moths_between两个日期间隔的月数</span></span><br><span class="line"><span class="keyword">select</span> empno, ename,</span><br><span class="line">       hiredate, <span class="comment">-- 入职时间</span></span><br><span class="line">       months_between(<span class="keyword">sysdate</span>, hiredate), <span class="comment">-- 入职多少个月</span></span><br><span class="line">       (<span class="keyword">sysdate</span> - hiredate) <span class="keyword">months</span> <span class="comment">-- 入职所少天了</span></span><br><span class="line"><span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- next_day 返回下一个星期一的日期</span></span><br><span class="line"><span class="keyword">select</span> next_day(<span class="keyword">sysdate</span>, <span class="number">1</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> next_day(<span class="keyword">sysdate</span>, <span class="string">'Mon'</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- last_day 返回该月的最后一天的日期</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">last_day</span>(<span class="keyword">sysdate</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- add_months 返回几个月以后的日期</span></span><br><span class="line"><span class="keyword">select</span> add_months(<span class="keyword">sysdate</span>, <span class="number">3</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>

<h1 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- round 四舍五入</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="number">17.561</span>, <span class="number">-1</span>) <span class="keyword">from</span> dual; <span class="comment">-- 20</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="number">17.561</span>,<span class="number">2</span>) <span class="keyword">from</span> dual; <span class="comment">-- 17.56</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- trunc 截断</span></span><br><span class="line"><span class="keyword">select</span> trunc(<span class="number">17.561</span>, <span class="number">-1</span>) <span class="keyword">from</span> dual; <span class="comment">-- 10</span></span><br><span class="line"><span class="keyword">select</span> trunc(<span class="number">17.561</span>,<span class="number">2</span>) <span class="keyword">from</span> dual; <span class="comment">-- 17.56</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- mod 取余</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">mod</span>(<span class="number">10</span>,<span class="number">3</span>) <span class="keyword">from</span> dual; <span class="comment">-- 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 加减乘除运算</span></span><br><span class="line">+ - * / ( )</span><br></pre></td></tr></table></figure>

<h1 id="数值、字符、日期之间的类型转换"><a href="#数值、字符、日期之间的类型转换" class="headerlink" title="数值、字符、日期之间的类型转换"></a>数值、字符、日期之间的类型转换</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 日期转字符</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sysdate</span>, to_char(<span class="keyword">sysdate</span>, <span class="string">'yyyy-MM-dd hh24:mi:ss'</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 字符转日期类型 (都是日期类型才能做计算)</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">to_date</span>(<span class="string">'2018-06-07'</span>,<span class="string">'yyyy-MM-dd'</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> EMPNO,</span><br><span class="line">       EMPNO+<span class="string">'213'</span>, <span class="comment">-- 隐式转换(有索引时不会执行，一般不能用)</span></span><br><span class="line">       EMPNO+ to_number(<span class="string">'213'</span>) , <span class="comment">-- 字符转数值</span></span><br><span class="line">       EMPNO || <span class="string">'123'</span> <span class="comment">-- 字符串拼接</span></span><br><span class="line"><span class="keyword">from</span> EMP;</span><br></pre></td></tr></table></figure>

<h1 id="where后的条件"><a href="#where后的条件" class="headerlink" title="where后的条件"></a>where后的条件</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">= &gt;= &lt;= &gt; &lt; &lt;&gt; != </span><br><span class="line">不能用于null值比较;</span><br><span class="line">使用is (not) null 比较空值</span><br><span class="line"></span><br><span class="line"><span class="comment">-- between .. and</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal  <span class="keyword">between</span> <span class="number">500</span> <span class="keyword">and</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- and</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">20</span> <span class="keyword">and</span> sal=<span class="number">800</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- or</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">20</span> <span class="keyword">or</span> sal=<span class="number">800</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- in (null值自动忽略)</span></span><br><span class="line"><span class="keyword">select</span> ename,job,sal <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="keyword">in</span> (<span class="string">'CLERK'</span>,<span class="string">'ANALYST'</span>);</span><br><span class="line"><span class="comment">-- not in (不能有null值)</span></span><br><span class="line"><span class="keyword">select</span> ename,job,sal <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="keyword">in</span> (<span class="string">'CLERK'</span>,<span class="string">'ANALYST'</span>) <span class="keyword">and</span> sal <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">1000</span>,<span class="number">3000</span>,<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- like</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> empname <span class="keyword">like</span> <span class="string">'%sc%'</span>; <span class="comment">-- 'xx%'走索引;'%xx%'不走索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- all</span></span><br><span class="line">all的含义是将一个值与all后的每一个值去比较，满足全部比较条件才为true</span><br><span class="line"><span class="keyword">SELECT</span> promo_id <span class="keyword">FROM</span> promotions <span class="keyword">WHERE</span> promo_cost &lt; <span class="keyword">ALL</span> (<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(promo_cost) <span class="keyword">FROM</span> promotions <span class="keyword">GROUP</span> <span class="keyword">BY</span> (promo_end_date - promo_begin_date) );</span><br><span class="line"></span><br><span class="line"><span class="comment">-- any(some)</span></span><br><span class="line">any的含义是将一个值与any后的每一个值去比较，满足任何一个比较条件即为true</span><br></pre></td></tr></table></figure>

<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- union求并集，公共部分只有包含一次 </span></span><br><span class="line">例：求emp表ename中含’A‘或含有‘M’ </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">'%A%'</span> </span><br><span class="line">    <span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">'%M%'</span>; </span><br><span class="line"> </span><br><span class="line"><span class="comment">-- union all求集并，公共部分只有包含二次 </span></span><br><span class="line">例：求emp表ename中含’A‘或含有‘M’ </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">'%A%'</span> </span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">'%M%'</span>; </span><br><span class="line"> </span><br><span class="line"><span class="comment">-- intersect求交集，只有包含公共部分 </span></span><br><span class="line">例：求emp表ename中即含’A‘又含有‘M’ </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">'%A%'</span> </span><br><span class="line">    <span class="keyword">intersect</span> </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">'%M%'</span>; </span><br><span class="line"> </span><br><span class="line"><span class="comment">-- minus求差集，求集合A去除集合A和集合B的交集 </span></span><br><span class="line">例：求emp表sal从700到1200 </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">between</span> <span class="number">700</span> <span class="keyword">and</span> <span class="number">1300</span> </span><br><span class="line">    <span class="keyword">minus</span> </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">between</span> <span class="number">1200</span> <span class="keyword">and</span> <span class="number">1400</span>;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>java-rdb事务问题</title>
    <url>/hexoblog/20190816151813.html</url>
    <content><![CDATA[<h1 id="hibernate与mybatis混用导致的事务问题"><a href="#hibernate与mybatis混用导致的事务问题" class="headerlink" title="hibernate与mybatis混用导致的事务问题"></a>hibernate与mybatis混用导致的事务问题</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.executor.ExecutorException: Error preparing statement.  Cause: org.hibernate.HibernateException: connnection proxy not usable after transaction completion</span><br><span class="line">	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)</span><br><span class="line">	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:365)</span><br><span class="line">	at com.sun.proxy.$Proxy26.selectOne(Unknown Source)</span><br><span class="line">	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:160)</span><br><span class="line">	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:95)</span><br><span class="line">	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:40)</span><br><span class="line">	at com.sun.proxy.$Proxy65.selectByPrimaryKey(Unknown Source)</span><br><span class="line">	at com.sysware.p2m.datacenter.service.impl.DCDataCenterServiceImpl.getDCDataCenterFolder(DCDataCenterServiceImpl.java:98)</span><br><span class="line">	at com.sysware.p2m.datacenter.operation.CreateProcessDataCenterOperation.onAction(CreateProcessDataCenterOperation.java:43)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>java-socket的bio与nio示例</title>
    <url>/hexoblog/20210601175838.html</url>
    <content><![CDATA[<h1 id="socket-bio"><a href="#socket-bio" class="headerlink" title="socket-bio"></a>socket-bio</h1><p>传统的阻塞IO(blocking_io)的缺点：<br>1.服务器以阻塞方式处理客户端连接,所以服务器需要创建大量线程来处理客户端连接；线程的创建与销毁影响服务器性能<br>2.服务器需要维护已连接的客户端信息，遍历过程会消耗服务器性能<br>3.服务器以阻塞方式读取客户端信息，服务端会因客户端响应不及时而无法释放连接影响性        </p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String, Socket&gt; clientSocketMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用bio处理多个客户端连接&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * TODO 客户端直接关闭的话，不会及时通知服务端释放资源，需要服务端额外通过心跳检测客户端状态才行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBlockingServer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"启动服务器"</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//没有客户端连接时，此处会阻塞</span></span><br><span class="line">            <span class="comment">//所以服务器在处理 传统的blocking_socket时，需要使用单独线程(线程池)来处理socket连接，放在阻塞主线程(只能处理一个客户端连接)</span></span><br><span class="line">            Socket socket = serverSocket.accept();</span><br><span class="line">            SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMddHHmmss"</span>);</span><br><span class="line">            String clientId = simpleDateFormat.format(<span class="keyword">new</span> Date());</span><br><span class="line">            clientSocketMap.put(clientId, socket);</span><br><span class="line">            System.out.println(<span class="string">"客户端"</span>+clientId+<span class="string">"连接到服务器,服务器访问数："</span>+clientSocketMap.size());</span><br><span class="line">            <span class="keyword">new</span> BioSocketHandler(clientId).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * socket处理器</span></span><br><span class="line"><span class="comment">     * 使用子线程处理客户端socket连接，防止主线程阻塞</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BioSocketHandler</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String clientId;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BioSocketHandler</span><span class="params">(String clientId)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.clientId = clientId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Socket socket = clientSocketMap.get(clientId);</span><br><span class="line">            <span class="comment">//使用循环处理客户端连接</span></span><br><span class="line">            <span class="comment">// 客户端端口连接或者客户端发出结束信号(bye) 时，跳出循环并结束处理线程及关闭客户端连接</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//客户端先连接后关闭的情况下，会报异常，这种情况不需要服务端处理</span></span><br><span class="line">                    inputStream = socket.getInputStream();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(inputStream==<span class="keyword">null</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">int</span> i = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    i = inputStream.read(bytes);<span class="comment">//客户端连接上，没发送数据时，此处会阻塞</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(i==-<span class="number">1</span>) <span class="keyword">continue</span>; <span class="comment">//-1表示没接收到客户端数据，继续保持连接</span></span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"读取到客户端数据 clientId:"</span>+clientId);</span><br><span class="line">                String str = <span class="keyword">new</span> String(bytes);</span><br><span class="line">                <span class="keyword">if</span>(str!=<span class="keyword">null</span> &amp;&amp; str.startsWith(<span class="string">"bye"</span>))&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        inputStream.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(str);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"客户端退出或关闭:"</span>+clientId);</span><br><span class="line">                socket.close();</span><br><span class="line">                clientSocketMap.remove(clientId);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">//e.printStackTrace();</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"服务端连接数据："</span>+clientSocketMap.size());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="nio"><a href="#nio" class="headerlink" title="nio"></a>nio</h1><p>使用nio API处理客户端请求示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixl.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过nio api处理客户端连接和请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NioSocketServerDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBlockingServer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open()</span><br><span class="line">                .bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9999</span>));</span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="keyword">true</span>);<span class="comment">//默认为true,不能设置为false java.nio.channels.IllegalBlockingModeException</span></span><br><span class="line"></span><br><span class="line">        ServerSocket serverSocket = serverSocketChannel.socket();</span><br><span class="line"></span><br><span class="line">        Socket socket = serverSocket.accept();<span class="comment">// block=true,此处会阻塞方式等待客户端连接</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> i = socket.getInputStream().read(bytes);<span class="comment">// 与blocking_io一样，阻塞在</span></span><br><span class="line">        <span class="keyword">if</span> (i != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(bytes));</span><br><span class="line">        &#125;</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">        serverSocketChannel.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doServer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建ServerSocketChannel</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open()</span><br><span class="line">                .bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9999</span>));</span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="keyword">false</span>);<span class="comment">//设置为非阻塞</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建选择器Selector</span></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.将ServerSocketChannel注册到Selector(默认监听客户端的连接请求)</span></span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);<span class="comment">//block=true的话此处会报错</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            selector.select();<span class="comment">//阻塞在此处并等待客户端连接及请求</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4.通过Selector获取需要处理的客户端连接</span></span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">            <span class="keyword">for</span> (SelectionKey selectionKey : selectionKeys) &#123;</span><br><span class="line">                <span class="comment">// 5.循环处理接收到的客户端请求</span></span><br><span class="line">                <span class="keyword">if</span> (selectionKey.isAcceptable()) &#123;<span class="comment">//处理客户端的连接请求</span></span><br><span class="line">                    ServerSocketChannel server = (ServerSocketChannel) selectionKey.channel();</span><br><span class="line">                    <span class="comment">//获取到真实的客户端</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        SocketChannel client = server.accept();</span><br><span class="line">                        client.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                        <span class="comment">//客户端连接注册到selector</span></span><br><span class="line">                        client.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        <span class="comment">//e.printStackTrace();</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (selectionKey.isReadable()) &#123;<span class="comment">//处理客户端的访问请求</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        SocketChannel client = (SocketChannel) selectionKey.channel();</span><br><span class="line">                        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                        <span class="comment">//服务端读数据到Buffer</span></span><br><span class="line">                        <span class="keyword">int</span> count = client.read(byteBuffer);</span><br><span class="line">                        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">//读写转换</span></span><br><span class="line">                            byteBuffer.flip();</span><br><span class="line">                            System.out.println(<span class="keyword">new</span> String(byteBuffer.array()));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        <span class="comment">//e.printStackTrace();</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            selectionKeys.clear();<span class="comment">//循环处理完客户端请求后，需要清空Selector中已处理过的事件索引，防止下次重复处理</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>java-springmvc配置</title>
    <url>/hexoblog/20201117154446.html</url>
    <content><![CDATA[<h1 id="xml配置springmvc"><a href="#xml配置springmvc" class="headerlink" title="xml配置springmvc"></a><a href="https://gitee.com/lixl/spring-demo/tree/springmvc-simple/" target="_blank" rel="noopener">xml配置springmvc</a></h1><h2 id="applicaiton-xml文件位置"><a href="#applicaiton-xml文件位置" class="headerlink" title="applicaiton.xml文件位置"></a>applicaiton.xml文件位置</h2><p>Spring ContextLoaderListener和DispatcherServlet加载文件的位置<br>web.xml中如何配置spring配置文件<br>在使用Spring框架的时候，如果我们使用的是XML文件配置Bean的方式的话，<br>我们往往会在web.xml里面配置如下内容：           </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/application-beanconfig.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">            classpath:spring/dispatcher-servlet.xml</span><br><span class="line">        <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.json<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ContextLoaderListener通过contextConfigLocation参数，加载配置；默认加载”/WEB-INF/applicationContext.xml”       </li>
<li>DispatcherServlet默认加载”WEB-INF/dispatcherServlet-servlet.xml”，也可通过contextConfigLocation参数指定配置文件路径       </li>
<li>配置文件顺序，可以在param-value中指定顺序；也可以通过import方式来指定依赖关系</li>
</ul>
<h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><p>实现事务的三种方式</p>
<ul>
<li><p>1.手动事务<br>  applicaiton.xml配置</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.support.TransactionTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">TransactionTemplate transactionTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excuteTransactionTemplate</span><span class="params">(String idA, String idB, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    transactionTemplate.execute(<span class="keyword">new</span> TransactionCallback&lt;Boolean&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Boolean <span class="title">doInTransaction</span><span class="params">(TransactionStatus status)</span> </span>&#123;</span><br><span class="line">            doSomething(idA, idB, num);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">PlatformTransactionManager transactionManager;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeTransactionManager</span><span class="params">(String idA, String idB, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    DefaultTransactionDefinition definition = <span class="keyword">new</span> DefaultTransactionDefinition();</span><br><span class="line">    TransactionStatus transactionStatus = transactionManager.getTransaction(definition);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        doSomething(idA, idB, num);</span><br><span class="line">        transactionManager.commit(transactionStatus);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        transactionManager.rollback(transactionStatus);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.aop</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务增强 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--aop配置，拦截哪些方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"servicePointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.sysware.p2m.service.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"servicePointcut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>3.Transactional注解</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用@Transaction注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 扫描哪些类上的注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span>  <span class="attr">base-package</span>=<span class="string">"com.sysware"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span> <span class="comment">//用于类或者方法上</span></span><br><span class="line"><span class="meta">@Service</span>(DataServiceImpl.BEAN_NAME)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataServiceImpl</span> <span class="keyword">implements</span> <span class="title">DataService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>问题总结<br>  <a href="https://www.cnblogs.com/myseries/p/12082254.html" target="_blank" rel="noopener">Spring @Transactional注解在什么情况下会失效，为什么?</a><br>  <a href="https://www.cnblogs.com/ynyhl/p/12066530.html" target="_blank" rel="noopener">分析spring事务@Transactional注解在同一个类中的方法之间调用不生效的原因及解决方案</a>           </p>
</li>
</ul>
<h1 id="注解配置springmvc"><a href="#注解配置springmvc" class="headerlink" title="注解配置springmvc"></a>注解配置springmvc</h1><ul>
<li><a href="https://gitee.com/lixl/spring-demo/tree/spring-annotation/" target="_blank" rel="noopener">纯注解配置springmvc</a></li>
<li><a href="https://gitee.com/lixl/simple-web" target="_blank" rel="noopener">注解配置web应用</a></li>
</ul>
<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><ul>
<li>下载 <code>git clone --branch v3.2.18.RELEASE https://gitee.com/mirrors/Spring-Framework.git</code></li>
<li></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>java-spring与flyway加载jar包内文件示例</title>
    <url>/hexoblog/20201127162409.html</url>
    <content><![CDATA[<h1 id="文件加载"><a href="#文件加载" class="headerlink" title="文件加载"></a>文件加载</h1><p>操作磁盘文件 java.io.File<br>操作jar包内文件 java.util.jar.JarFile<br>扫描classpath下文件(含jar包内文件) Enumeration<url> urlEnumerations = classLoader.getResources(path);      </url></p>
<h1 id="flyway示例"><a href="#flyway示例" class="headerlink" title="flyway示例"></a>flyway示例</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sysware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.flywaydb.core.internal.util.scanner.Resource;</span><br><span class="line"><span class="keyword">import</span> org.flywaydb.core.internal.util.scanner.classpath.ClassPathLocationScanner;</span><br><span class="line"><span class="keyword">import</span> org.flywaydb.core.internal.util.scanner.classpath.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.flywaydb.core.internal.util.scanner.classpath.FileSystemClassPathLocationScanner;</span><br><span class="line"><span class="keyword">import</span> org.flywaydb.core.internal.util.scanner.classpath.JarFileClassPathLocationScanner;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlywayFileScannerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jarScanner</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String path = <span class="string">"customize/sql"</span>;<span class="comment">//classpath:</span></span><br><span class="line">        ClassLoader classLoader = getClass().getClassLoader();</span><br><span class="line">        Set&lt;Resource&gt; resources = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Enumeration&lt;URL&gt; urlEnumerations = classLoader.getResources(path);</span><br><span class="line">        <span class="keyword">while</span> (urlEnumerations.hasMoreElements()) &#123;</span><br><span class="line">            URL url = urlEnumerations.nextElement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// jar/file</span></span><br><span class="line">            String protocol = url.getProtocol();</span><br><span class="line">            ClassPathLocationScanner locationScanner = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//文件的话直接读</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"file"</span>.equalsIgnoreCase(protocol)) &#123;</span><br><span class="line">                locationScanner = <span class="keyword">new</span> FileSystemClassPathLocationScanner();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"jar"</span>.equalsIgnoreCase(protocol)) &#123;</span><br><span class="line">                locationScanner = <span class="keyword">new</span> JarFileClassPathLocationScanner();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (locationScanner == <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.err.println(url.getFile());</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Set&lt;String&gt; resourceNames = locationScanner.findResourceNames(path, url);</span><br><span class="line">            <span class="keyword">for</span> (String resourceName : resourceNames) &#123;</span><br><span class="line">                <span class="keyword">if</span> (resourceName == <span class="keyword">null</span> || !resourceName.endsWith(<span class="string">"sql"</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                resources.add(<span class="keyword">new</span> ClassPathResource(resourceName, classLoader));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(resources);</span><br><span class="line">        <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">            System.out.println(resource.getFilename());</span><br><span class="line">            System.out.println(resource.loadAsString(<span class="string">"UTF-8"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="spring示例"><a href="#spring示例" class="headerlink" title="spring示例"></a>spring示例</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sysware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringFileScannerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jarScanner</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        PathMatchingResourcePatternResolver resourcePatternResolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">        Resource[] resources = resourcePatternResolver.getResources(<span class="string">"classpath*:customize/sql/*.sql"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">            System.out.println(resource.getFilename());</span><br><span class="line">            System.out.println(IOUtils.toString(resource.getInputStream()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>java-system-exit问题</title>
    <url>/hexoblog/20200603175559.html</url>
    <content><![CDATA[<h1 id="System-exit-1-有什么用"><a href="#System-exit-1-有什么用" class="headerlink" title="System.exit(1)有什么用"></a>System.exit(1)有什么用</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemExitDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"begin..."</span>);</span><br><span class="line"></span><br><span class="line">        doSometings();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//主线程阻塞一会儿，让子线程先执行完</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"end..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSometings</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="number">111</span>);</span><br><span class="line">                System.exit(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">begin...</span><br><span class="line">111</span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure>

<p>从输出结果看，System.exit(status)会退出整个jvm，而不只是当前线程。       </p>
<h1 id="自定义SecurityManager"><a href="#自定义SecurityManager" class="headerlink" title="自定义SecurityManager"></a>自定义SecurityManager</h1><p>System.exit(status) ==》  Runtime.getRuntime().exit(status)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">     SecurityManager security = System.getSecurityManager();</span><br><span class="line">     <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;</span><br><span class="line">         security.checkExit(status);</span><br><span class="line">     &#125;</span><br><span class="line">     Shutdown.exit(status);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>如果想要控制exit，需要自定义SecurityManager来处理   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySecurityManager</span> <span class="keyword">extends</span> <span class="title">SecurityManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkExit</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        super.checkExit(status);</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"not allow user System.exit"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemExitDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.setSecurityManager(<span class="keyword">new</span> MySecurityManager());</span><br><span class="line">        System.out.println(<span class="string">"begin..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            doSometings();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//主线程阻塞一会儿，让子线程先执行完</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"end..."</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSometings</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="number">111</span>);</span><br><span class="line">                System.exit(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">begin...</span><br><span class="line">111</span><br><span class="line">Exception in thread &quot;Thread-0&quot; java.lang.SecurityException: not allow user System.exit</span><br><span class="line">	at com.mydemo.MySecurityManager.checkExit(MySecurityManager.java:8)</span><br><span class="line">	at java.lang.Runtime.exit(Runtime.java:107)</span><br><span class="line">	at java.lang.System.exit(System.java:962)</span><br><span class="line">	at com.mydemo.SystemExitDemo$1.run(SystemExitDemo.java:32)</span><br><span class="line">end...</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>System.exit(status)默认情况下是暴露给SecurityManager来控制并退出jvm的</li>
<li>只是在程序中达到退出线程的目的，应该使用异常而不是exit</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>java-多线程与锁</title>
    <url>/hexoblog/20200715185349.html</url>
    <content><![CDATA[<h1 id="多线程与锁"><a href="#多线程与锁" class="headerlink" title="多线程与锁"></a>多线程与锁</h1><p>多线程并发执行任务的过程中，通过锁将并行的任务转为串行任务执行。</p>
<h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="synchronized-对象锁"><a href="#synchronized-对象锁" class="headerlink" title="synchronized 对象锁"></a>synchronized 对象锁</h3><ul>
<li>自动加锁和解锁      </li>
<li>锁升级过程(了解jmm java内存布局)<ul>
<li>无锁 只有一个线程时，标志位0，记录threadId</li>
<li>偏向锁 两个线程竞争，标志位1，记录threadId</li>
<li>自旋锁 多个线程但竞争不大时，都会先尝试获取锁(默认10次)</li>
<li>重量级锁 多个线程竞争锁而且尝试多次获取不到时，进入阻塞队列，依次执行</li>
</ul>
</li>
</ul>
<h3 id="lock-显式锁"><a href="#lock-显式锁" class="headerlink" title="lock 显式锁"></a>lock 显式锁</h3><ul>
<li><p>lock/tryLock 获取锁</p>
</li>
<li><p>unlock 释放锁</p>
</li>
<li><p>java.util.concurrent.locks.ReentrantLock 可重入锁</p>
</li>
<li><p>java.util.concurrent.locks.ReentrantReadWriteLock 读写锁<br>写加锁，读不加锁</p>
</li>
<li><p>java.util.concurrent.ConcurrentHashMap</p>
</li>
</ul>
<h3 id="cas-compareAndSwap"><a href="#cas-compareAndSwap" class="headerlink" title="cas (compareAndSwap)"></a>cas (compareAndSwap)</h3><ul>
<li><p>自旋锁、乐观锁、无锁</p>
</li>
<li><p>原子操作(cpu级别保证操作不会发生指令重排)</p>
<ul>
<li>java.util.concurrent.atomic.AtomicInteger</li>
</ul>
</li>
<li><p>sun.misc.Unsafe jdk提供的原子操作方法的接口</p>
<ul>
<li>unsafe.compareAndSwapInt(this, valueOffset, expect, update) </li>
</ul>
</li>
<li><p><a href="https://hesey.wang/2011/09/resolve-aba-by-atomicstampedreference.html" target="_blank" rel="noopener">ABA问题</a></p>
<ul>
<li>AtomicStampedReference 加时间戳解决ABA问题<h3 id="volatile-线程可见性"><a href="#volatile-线程可见性" class="headerlink" title="volatile 线程可见性"></a>volatile 线程可见性</h3>多线程共享变量要加volatile，保证每个线程获取变量值时，都能从内存获取最新的，而不是获取自己线程栈内的变量值</li>
</ul>
</li>
<li><p>ThreadLocal 是把一个变量在线程栈内复制多个副本，空间换时间</p>
</li>
</ul>
<h3 id="锁的类型"><a href="#锁的类型" class="headerlink" title="锁的类型"></a>锁的类型</h3><ul>
<li><p>乐观锁、悲观锁<br>乐观锁：每个线程先尝试获取锁，获取不到后进入阻塞队列<br>悲观锁：直接进入阻塞队列</p>
</li>
<li><p>公平锁、非公平锁<br>公平锁：每个线程都要进入阻塞队列排队后等待cpu调度<br>非公平锁：抢占执行</p>
</li>
<li><p>可重入锁、不可重入锁<br>可重入锁：一个线程获取到外层锁后还可以获取内层锁<br>不可重入锁：一个线程获取外层锁后，只有释放后才能获取内层锁</p>
</li>
<li><p>偏向锁</p>
</li>
<li><p>行锁、表锁</p>
</li>
<li><p>读写锁</p>
</li>
</ul>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h3><ul>
<li>cmd java命令，即可启动一个jvm就是一个进程(包含一个main线程)</li>
<li>main线程可以创建一或多个子线程</li>
<li>deamon线程下的普通线程执行完后，会自动结束(如gc-deamon线程，会自动结束)</li>
</ul>
<h3 id="如何创建线程"><a href="#如何创建线程" class="headerlink" title="如何创建线程"></a>如何创建线程</h3><ul>
<li>继承Thread类</li>
<li>实现Runnable接口</li>
<li>Callable/Future/CompletableFuture 有返回值</li>
</ul>
<h3 id="线程的状态与变化"><a href="#线程的状态与变化" class="headerlink" title="线程的状态与变化"></a>线程的状态与变化</h3><pre class="mermaid">graph LR;

New --start--> Runnable --获得cpu时间片--> Running --运行完成--> Dead 

Running --执行完cpu时间片--> Runnable

Running --sleep/锁等待--> Blocked --sleep结束/获得锁--> Runnable</pre>

<p>线程的方法</p>
<ul>
<li>join 主线程在此处会等待子线程执行完</li>
<li>sleep 当前线程进入阻塞态，会释放cpu，但不会释放锁</li>
<li>wait 释放cpu，不释放锁</li>
<li>yield 释放cpu</li>
<li>notifyAll 唤醒cpu与持有锁的线程</li>
</ul>
<h3 id="线程池是什么？线程池的创建？"><a href="#线程池是什么？线程池的创建？" class="headerlink" title="线程池是什么？线程池的创建？"></a>线程池是什么？线程池的创建？</h3><ul>
<li><p>java.util.concurrent.Executors       </p>
<ul>
<li>newCachedThreadPool 无限的新线程</li>
<li>newFixedThreadPool 核心线程数固定，无限排队线程</li>
<li>newSingleThreadExecutor 只有一个线程运行，其他线程排队</li>
<li>newScheduledThreadPool 定时执行线程</li>
<li>newWorkStealingPool 抢占式运行线程</li>
</ul>
</li>
<li><p>java.util.concurrent.ThreadPoolExecutor<br>  可根据需要定制线程池        </p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public ThreadPoolExecutor(int corePoolSize,  核心(初始化)线程数</span><br><span class="line">                        int maximumPoolSize, 最大线程数</span><br><span class="line">                        long keepAliveTime, 存活时间</span><br><span class="line">                        TimeUnit unit,</span><br><span class="line">                        BlockingQueue&lt;Runnable&gt; workQueue, 任务队列</span><br><span class="line">                        ThreadFactory threadFactory, 线程工厂</span><br><span class="line">                        RejectedExecutionHandler handler) 拒绝策略</span><br></pre></td></tr></table></figure>
</li>
<li><p>BlockingQueue 阻塞队列</p>
<ul>
<li>ArrayBlockingQueue</li>
<li>LinkedBlockingQueue</li>
<li>DelagedWorkQueue</li>
</ul>
</li>
<li><p>ThreadFactory 线程工厂</p>
</li>
<li><p>RejectedExecutionHandler 拒绝策略</p>
<ul>
<li>ThreadPoolExecutor.AbortPolicy</li>
<li>ThreadPoolExecutor.DiscardPolicy</li>
</ul>
</li>
</ul>
<h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h1><p>多线程下编程时，导致结果不唯一的处理方式都是不安全的，</p>
<p>多线程时会遇到哪些问题？</p>
<ul>
<li>指令重排 （加锁，原子操作）</li>
<li>伪共享 （volatile、ThreadLocal）</li>
<li>线程安全</li>
</ul>
<h1 id="如何停止正在运行的线程？"><a href="#如何停止正在运行的线程？" class="headerlink" title="如何停止正在运行的线程？"></a>如何停止正在运行的线程？</h1><p>使用标志位，在线程运行时，定期去检查标志</p>
<ul>
<li>jvm stop-the-world</li>
<li>tomcat stop</li>
</ul>
<h1 id="线程同步类"><a href="#线程同步类" class="headerlink" title="线程同步类"></a>线程同步类</h1><p>通过这些类，可以给多个异步执行的线程设置集合点，在此以后可以同步执行</p>
<ul>
<li><p>java.util.concurrent.CountDownLatch 计数器</p>
</li>
<li><p>java.util.concurrent.CyclicBarrier 循环栅栏</p>
</li>
<li><p>java.util.concurrent.Semaphore 信号量</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>java-异常错误演示</title>
    <url>/hexoblog/20200510230513.html</url>
    <content><![CDATA[<p>常遇到的JVM错误，知道出错原因并能演示，后边才能想办法解决它。</p>
<h1 id="堆空间不足异常"><a href="#堆空间不足异常" class="headerlink" title="堆空间不足异常"></a>堆空间不足异常</h1><p>jvm参数指定最大堆内存为10M,再加载10M的byte[]数组就会空间不足而出错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//java.lang.OutOfMemoryError: Java heap space</span></span><br><span class="line">    <span class="comment">// -Xmx10M</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="comment">//10M的byte[]数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">10</span>];</span><br><span class="line">        System.out.println(bytes);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="栈溢出异常"><a href="#栈溢出异常" class="headerlink" title="栈溢出异常"></a>栈溢出异常</h1><p><a href="https://www.cnblogs.com/newAndHui/p/11168791.html" target="_blank" rel="noopener">虚拟机栈</a>，给每个线程分配的空间默认是1M,可通过参数-Xss1M设置；<br>java方法运行时，jvm会为每个线程分配一个jvm栈，每个方法有自己的栈帧(栈帧里记录了局部变量和方法出口等信息)，<br>栈长度超过jvm允许的最大深度的就会报StackOverflowError异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//java.lang.StackOverflowError</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T2_stackoverflow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        T2_stackoverflow t2_stackoverflow = <span class="keyword">new</span> T2_stackoverflow();</span><br><span class="line">        t2_stackoverflow.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一个方法内一直递归导致找不到出口；就会报stackoverflowerror</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="方法区异常"><a href="#方法区异常" class="headerlink" title="方法区异常"></a>方法区异常</h1><p>jvm方法区记录着被jvm所加载的类信息。<br>所以当类加载器加载过多类时，就会异常报错</p>
<p>依赖asm <code>wget https://repo1.maven.org/maven2/asm/asm/3.1/asm-3.1.jar</code></p>
<p>vim T3_oom.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.objectweb.asm.Opcodes;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T3_oom</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span></span>&#123;</span><br><span class="line">	<span class="keyword">static</span> MyClassLoader myClassLoader = <span class="keyword">new</span> MyClassLoader();</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//1.7 -Xss1M -Xmx10M -XX:MaxPermSize=10M -XX:+PrintGC</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// java.lang.OutOfMemoryError: Metaspace</span></span><br><span class="line">    <span class="comment">//1.8 -Xss1M -Xmx10M -XX:MaxMetaspaceSize=10m -XX:+PrintGC</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">		Class clazz = myClassLoader.findClass(<span class="string">"ClassA"</span>);</span><br><span class="line">		System.out.println(clazz);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义类加载器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SPC-00D</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">		MyClassWriter classWriter = <span class="keyword">new</span> MyClassWriter(<span class="number">0</span>);</span><br><span class="line">		classWriter.visit(name);</span><br><span class="line">		<span class="keyword">byte</span>[] bytes = classWriter.toByteArray();</span><br><span class="line">		<span class="comment">//加载字节码</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.defineClass(name, bytes,<span class="number">0</span>, bytes.length);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于asm生成字节码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SPC-00D</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClassWriter</span> <span class="keyword">extends</span> <span class="title">ClassWriter</span> <span class="keyword">implements</span> <span class="title">Opcodes</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyClassWriter</span><span class="params">(<span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(flag);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.visit(V1_6, ACC_PUBLIC, name, <span class="keyword">null</span>, <span class="string">"java/lang/Object"</span>, <span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译 <code>javac -cp asm-3.1.jar T3_oom.java</code><br>运行 <code>java -cp asm-3.1.jar:. T3_oom</code></p>
<h1 id="String字面量"><a href="#String字面量" class="headerlink" title="String字面量"></a>String字面量</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringOomMock</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> String base = <span class="string">"string"</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; Integer.MAX_VALUE;i++)&#123;</span><br><span class="line">      String str = base + base;</span><br><span class="line">      base = str;</span><br><span class="line">      list.add(str.intern());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>java-非常有用的类库</title>
    <url>/hexoblog/20200609102427.html</url>
    <content><![CDATA[<h1 id="JMH"><a href="#JMH" class="headerlink" title="JMH"></a>JMH</h1><p>可以对java代码做精准测试</p>
<p><a href="https://www.jianshu.com/p/0da2988b9846" target="_blank" rel="noopener">https://www.jianshu.com/p/0da2988b9846</a><br><a href="https://testerhome.com/topics/11250" target="_blank" rel="noopener">https://testerhome.com/topics/11250</a>         </p>
<h1 id="easyexcel"><a href="#easyexcel" class="headerlink" title="easyexcel"></a>easyexcel</h1><p>基于POI封装的excel操作库，更节约内存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="asm"><a href="#asm" class="headerlink" title="asm"></a>asm</h1><p>字节码操作库</p>
<h1 id="guava"><a href="#guava" class="headerlink" title="guava"></a>guava</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可用来替换commons-io/commons-collection等的一个工具类，带cache</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">com.google</span><br><span class="line">com.google.common</span><br><span class="line">com.google.common.annotations       </span><br><span class="line">com.google.common.base</span><br><span class="line">com.google.common.cache         java-cache工具</span><br><span class="line">com.google.common.collect       集合</span><br><span class="line">com.google.common.escape</span><br><span class="line">com.google.common.eventbus</span><br><span class="line">com.google.common.hash</span><br><span class="line">com.google.common.html          html编码</span><br><span class="line">com.google.common.io            IO</span><br><span class="line">com.google.common.math          数学计算</span><br><span class="line">com.google.common.net</span><br><span class="line">com.google.common.primitives    原语</span><br><span class="line">com.google.common.reflect       反射</span><br><span class="line">com.google.common.util.concurrent 并发</span><br><span class="line">com.google.common.xml</span><br></pre></td></tr></table></figure>

<h1 id="java-sizeof"><a href="#java-sizeof" class="headerlink" title="java-sizeof"></a>java-sizeof</h1><p>很方便计算java对象占用内存大小</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.carrotsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-sizeof<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">com.carrotsearch.sizeof.RamUsageEstimator.humanReadableUnits(obj)</span><br></pre></td></tr></table></figure>

<h1 id="ecj"><a href="#ecj" class="headerlink" title="ecj"></a>ecj</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.eclipse.jdt.core.compiler&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ecj&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.5.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>java对象内存计算工具</title>
    <url>/hexoblog/20200503102518.html</url>
    <content><![CDATA[<h1 id="java-sizeof"><a href="#java-sizeof" class="headerlink" title="java-sizeof"></a>java-sizeof</h1><p>作用：计算java对象内存占用情况      </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.carrotsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-sizeof<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如：计算object占用多少内存空间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object object = <span class="keyword">new</span> Object();</span><br><span class="line">System.out.println(com.carrotsearch.sizeof.RamUsageEstimator.humanSizeOf(object));</span><br></pre></td></tr></table></figure>

<h1 id="openjdk-jol"><a href="#openjdk-jol" class="headerlink" title="openjdk-jol"></a>openjdk-jol</h1><p>作用：java object layout(java对象布局 查看工具)                 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jol<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jol-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如：查看object内存布局及占用情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> hascode = user.hashCode();</span><br><span class="line">    System.out.println(hascode);</span><br><span class="line">    System.out.println(Integer.toBinaryString(hascode));</span><br><span class="line">    System.out.println(org.openjdk.jol.info.ClassLayout.parseInstance(user).toPrintable());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出x信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1837543557</span><br><span class="line">1101101100001101011000010000101</span><br><span class="line">com.demo.User object internals:</span><br><span class="line"> OFFSET  SIZE               TYPE DESCRIPTION                               VALUE</span><br><span class="line">      0     4                    (object header)                           01 85 b0 86 (00000001 10000101 10110000 10000110) (-2035251967)</span><br><span class="line">      4     4                    (object header)                           6d 00 00 00 (01101101 00000000 00000000 00000000) (109)</span><br><span class="line">      8     4                    (object header)                           07 52 01 f8 (00000111 01010010 00000001 11111000) (-134131193)</span><br><span class="line">     12     4                int User.id                                   1</span><br><span class="line">     16     4   java.lang.String User.name                                 null</span><br><span class="line">     20     4                    (loss due to the next object alignment)</span><br><span class="line">Instance size: 24 bytes</span><br><span class="line">Space losses: 0 bytes internal + 4 bytes external = 4 bytes total</span><br></pre></td></tr></table></figure>

<h2 id="java对象结构"><a href="#java对象结构" class="headerlink" title="java对象结构"></a>java对象结构</h2><p><a href="https://blog.csdn.net/scdn_cp/article/details/86491792" target="_blank" rel="noopener">https://blog.csdn.net/scdn_cp/article/details/86491792</a>      </p>
<ol>
<li>Java对象组成<br><img src="https://img-blog.csdnimg.cn/20190115141050902.png" alt="Java对象组成"><br>对象的5个部分的作用：          </li>
</ol>
<ul>
<li>MarkWord主要用来表示对象的线程锁状态，另外还可以用来配合GC、存放该对象的hashCode           </li>
<li>KlassWord是一个指向方法区中Class信息的指针，意味着该对象可随时知道自己是哪个Class的实例               </li>
<li>数组长度这是可选的，只有当本对象是一个数组对象时才会有这个部分                </li>
<li>对象体是用于保存对象属性和值的主体部分，占用内存空间取决于对象的属性数量和类型                 </li>
<li>对齐字节(整个对象大小必须是8的倍数，不够的话，对齐字节来凑)          </li>
</ul>
<ol start="2">
<li>MarkWord与锁<br><img src="https://img-blog.csdnimg.cn/20190111092408622.png" alt="MarkWord与锁状态"><br><img src="https://img-blog.csdnimg.cn/20190111091608949.jpg" alt="MarkWord中锁标记"></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>java类加载器</title>
    <url>/hexoblog/20200511094318.html</url>
    <content><![CDATA[<h1 id="class字节码生成与反编译工具"><a href="#class字节码生成与反编译工具" class="headerlink" title="class字节码生成与反编译工具"></a>class字节码生成与反编译工具</h1><p>字节码操作<br><a href="https://www.cnblogs.com/rickiyang/p/11336268.html" target="_blank" rel="noopener">javassist</a><br><a href="https://www.cnblogs.com/zt007/p/6377789.html" target="_blank" rel="noopener">asm</a></p>
<h2 id="javac与javap"><a href="#javac与javap" class="headerlink" title="javac与javap"></a>javac与javap</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javac -encoding utf-8 Foo.java</span><br><span class="line"></span><br><span class="line">javap -c Foo.class</span><br></pre></td></tr></table></figure>

<h2 id="asmtools"><a href="#asmtools" class="headerlink" title="asmtools"></a>asmtools</h2><h3 id="1-准备asmtools-jar"><a href="#1-准备asmtools-jar" class="headerlink" title="1.准备asmtools.jar"></a>1.准备asmtools.jar</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载安装ant https://ant.apache.org/bindownload.cgi</span><br><span class="line"></span><br><span class="line">git clone -b 7.0-b09 --depth=1 https://gitee.com/mirrors_openjdk/asmtools.git </span><br><span class="line"></span><br><span class="line">cd asmtools/build</span><br><span class="line">ant</span><br></pre></td></tr></table></figure>

<h3 id="2-准备文件Foo-java"><a href="#2-准备文件Foo-java" class="headerlink" title="2. 准备文件Foo.java"></a>2. 准备文件Foo.java</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Foo &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        boolean boolValue = true; // 将这个true替换为2或者3，再看看打印结果</span><br><span class="line">        if (boolValue) System.out.println(&quot;Hello, Java!&quot;);</span><br><span class="line">        if (boolValue == true) System.out.println(&quot;Hello, JVM!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-javac编译为class"><a href="#3-javac编译为class" class="headerlink" title="3. javac编译为class"></a>3. javac编译为class</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javac Foo.java </span><br><span class="line"></span><br><span class="line">生成Foo.class</span><br></pre></td></tr></table></figure>

<h3 id="4-查看class内容"><a href="#4-查看class内容" class="headerlink" title="4. 查看class内容"></a>4. 查看class内容</h3><p>class文件是二进制文件，无法直接查看；需要反编译为jasm或java文件才行</p>
<p>Foo.jasm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ java -jar asmtools.jar jdis Foo.class</span><br><span class="line"></span><br><span class="line">super public class Foo</span><br><span class="line">        version 52:0</span><br><span class="line">&#123;</span><br><span class="line">  public Method &quot;&lt;init&gt;&quot;:&quot;()V&quot;</span><br><span class="line">        stack 1 locals 1</span><br><span class="line">  &#123;</span><br><span class="line">                aload_0;</span><br><span class="line">                invokespecial   Method java/lang/Object.&quot;&lt;init&gt;&quot;:&quot;()V&quot;;</span><br><span class="line">                return;</span><br><span class="line">  &#125;</span><br><span class="line">  public static Method main:&quot;([Ljava/lang/String;)V&quot;</span><br><span class="line">        stack 2 locals 2</span><br><span class="line">  &#123;</span><br><span class="line">                iconst_1;</span><br><span class="line">                istore_1;</span><br><span class="line">                iload_1;</span><br><span class="line">                ifeq    L14;</span><br><span class="line">                getstatic       Field java/lang/System.out:&quot;Ljava/io/PrintStream;&quot;;</span><br><span class="line">                ldc     String &quot;Hello, Java!&quot;;</span><br><span class="line">                invokevirtual   Method java/io/PrintStream.println:&quot;(Ljava/lang/String;)V&quot;;</span><br><span class="line">        L14:    stack_frame_type append;</span><br><span class="line">                locals_map int;</span><br><span class="line">                iload_1;</span><br><span class="line">                iconst_1;</span><br><span class="line">                if_icmpne       L27;</span><br><span class="line">                getstatic       Field java/lang/System.out:&quot;Ljava/io/PrintStream;&quot;;</span><br><span class="line">                ldc     String &quot;Hello, JVM!&quot;;</span><br><span class="line">                invokevirtual   Method java/io/PrintStream.println:&quot;(Ljava/lang/String;)V&quot;;</span><br><span class="line">        L27:    stack_frame_type same;</span><br><span class="line">                return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125; // end Class Foo</span><br></pre></td></tr></table></figure>

<p>反编译生成Foo.java <a href="http://www.benf.org/other/cfr/" target="_blank" rel="noopener">http://www.benf.org/other/cfr/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ java -jar cfr-0.152.jar Foo.class</span><br><span class="line">/*</span><br><span class="line"> * Decompiled with CFR 0.152.</span><br><span class="line"> */</span><br><span class="line">public class Foo &#123;</span><br><span class="line">    public static void main(String[] stringArray) &#123;</span><br><span class="line">        boolean bl = true;</span><br><span class="line">        if (bl) &#123;</span><br><span class="line">            System.out.println(&quot;Hello, Java!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (bl) &#123;</span><br><span class="line">            System.out.println(&quot;Hello, JVM!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-基于jasm生成class"><a href="#5-基于jasm生成class" class="headerlink" title="5.基于jasm生成class"></a>5.基于jasm生成class</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ java -jar asmtools.jar jasm Foo.jasm</span><br><span class="line"></span><br><span class="line">$ java Foo</span><br><span class="line">Hello, Java!</span><br><span class="line">Hello, JVM!</span><br></pre></td></tr></table></figure>

<h4 id="5-1-绕过java语言规范，看看boolean类型是啥"><a href="#5-1-绕过java语言规范，看看boolean类型是啥" class="headerlink" title="5.1 绕过java语言规范，看看boolean类型是啥"></a>5.1 绕过java语言规范，看看boolean类型是啥</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将Foo.jasm第14行iconst_1改为iconst_2</span><br><span class="line"></span><br><span class="line">$ java -jar asmtools.jar jasm Foo.jasm</span><br><span class="line"></span><br><span class="line">lixl@DESKTOP-0SMOHUS MINGW64 /f/test</span><br><span class="line">$ java Foo</span><br><span class="line">Hello, Java!</span><br><span class="line"></span><br><span class="line">lixl@DESKTOP-0SMOHUS MINGW64 /f/test</span><br><span class="line">$  java -jar cfr-0.152.jar Foo.class</span><br><span class="line">/*</span><br><span class="line"> * Decompiled with CFR 0.152.</span><br><span class="line"> */</span><br><span class="line">public class Foo &#123;</span><br><span class="line">    public static void main(String[] stringArray) &#123;</span><br><span class="line">        int n = 2;//证明java编译时将boolean处理成int(默认true=1,false=0)</span><br><span class="line">        if (n != 0) &#123;</span><br><span class="line">            System.out.println(&quot;Hello, Java!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (n == 1) &#123;</span><br><span class="line">            System.out.println(&quot;Hello, JVM!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-2-换个写法，把boolean-bl改为静态变量"><a href="#5-2-换个写法，把boolean-bl改为静态变量" class="headerlink" title="5.2 换个写法，把boolean bl改为静态变量"></a>5.2 换个写法，把boolean bl改为静态变量</h4><p>Foo.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Foo &#123;</span><br><span class="line">	</span><br><span class="line">	private static boolean boolValue;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        boolValue = true; // 将这个true替换为2或者3，再看看打印结果</span><br><span class="line">        if (boolValue) System.out.println(&quot;Hello, Java!&quot;);</span><br><span class="line">        if (boolValue == true) System.out.println(&quot;Hello, JVM!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将java编译为class后查看jasm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lixl@DESKTOP-0SMOHUS MINGW64 /f/test</span><br><span class="line">$ javac -encoding UTF-8 Foo.java</span><br><span class="line"></span><br><span class="line">lixl@DESKTOP-0SMOHUS MINGW64 /f/test</span><br><span class="line">$ java -jar asmtools.jar jdis Foo.class</span><br><span class="line"></span><br><span class="line">super public class Foo</span><br><span class="line">        version 52:0</span><br><span class="line">&#123;</span><br><span class="line">  private static Field boolValue:Z;</span><br><span class="line"></span><br><span class="line">  public Method &quot;&lt;init&gt;&quot;:&quot;()V&quot;</span><br><span class="line">        stack 1 locals 1</span><br><span class="line">  &#123;</span><br><span class="line">                aload_0;</span><br><span class="line">                invokespecial   Method java/lang/Object.&quot;&lt;init&gt;&quot;:&quot;()V&quot;;</span><br><span class="line">                return;</span><br><span class="line">  &#125;</span><br><span class="line">  public static Method main:&quot;([Ljava/lang/String;)V&quot;</span><br><span class="line">        stack 2 locals 1</span><br><span class="line">  &#123;</span><br><span class="line">                iconst_1;</span><br><span class="line">                putstatic       Field boolValue:&quot;Z&quot;;</span><br><span class="line">                getstatic       Field boolValue:&quot;Z&quot;;</span><br><span class="line">                ifeq    L18;</span><br><span class="line">                getstatic       Field java/lang/System.out:&quot;Ljava/io/PrintStream;&quot;;</span><br><span class="line">                ldc     String &quot;Hello, Java!&quot;;</span><br><span class="line">                invokevirtual   Method java/io/PrintStream.println:&quot;(Ljava/lang/String;)V&quot;;</span><br><span class="line">        L18:    stack_frame_type same;</span><br><span class="line">                getstatic       Field boolValue:&quot;Z&quot;;</span><br><span class="line">                iconst_1;</span><br><span class="line">                if_icmpne       L33;</span><br><span class="line">                getstatic       Field java/lang/System.out:&quot;Ljava/io/PrintStream;&quot;;</span><br><span class="line">                ldc     String &quot;Hello, JVM!&quot;;</span><br><span class="line">                invokevirtual   Method java/io/PrintStream.println:&quot;(Ljava/lang/String;)V&quot;;</span><br><span class="line">        L33:    stack_frame_type same;</span><br><span class="line">                return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125; // end Class Foo</span><br></pre></td></tr></table></figure>

<p>将Foo.jasm中16改为iconst_2；然后编译为class并执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ java -jar asmtools.jar jasm Foo.jasm</span><br><span class="line"></span><br><span class="line">lixl@DESKTOP-0SMOHUS MINGW64 /f/test</span><br><span class="line">$ java Foo</span><br><span class="line"></span><br><span class="line">没有输出结果</span><br></pre></td></tr></table></figure>

<p>将Foo.jasm中16改为iconst_3；然后编译为class并执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lixl@DESKTOP-0SMOHUS MINGW64 /f/test</span><br><span class="line">$ java -jar asmtools.jar jasm Foo.jasm</span><br><span class="line"></span><br><span class="line">lixl@DESKTOP-0SMOHUS MINGW64 /f/test</span><br><span class="line">$ java Foo</span><br><span class="line">Hello, Java!</span><br><span class="line">Hello, JVM!</span><br></pre></td></tr></table></figure>

<p>将class反编译为java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ java -jar cfr-0.152.jar Foo.class</span><br><span class="line">/*</span><br><span class="line"> * Decompiled with CFR 0.152.</span><br><span class="line"> */</span><br><span class="line">public class Foo &#123;</span><br><span class="line">    private static boolean boolValue;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] stringArray) &#123;</span><br><span class="line">        boolValue = 3;</span><br><span class="line">        if (boolValue) &#123;</span><br><span class="line">            System.out.println(&quot;Hello, Java!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (boolValue) &#123;</span><br><span class="line">            System.out.println(&quot;Hello, JVM!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.boolean只能为true和false，只是java语言规范，</span><br><span class="line"> 字节码层面是最为int处理的(true=1,false=0)；</span><br><span class="line">2.静态变量，在字节码层面已经确定类型 boolValue:&quot;Z&quot;</span><br><span class="line">3.boolean进行计算时会做掩码操作(2==0 3==1)</span><br></pre></td></tr></table></figure>

<h1 id="class加载过程"><a href="#class加载过程" class="headerlink" title="class加载过程"></a>class加载过程</h1><p><a href="https://blog.csdn.net/briblue/article/details/54973413" target="_blank" rel="noopener">https://blog.csdn.net/briblue/article/details/54973413</a></p>
<p><a href="https://gitee.com/lixl/dcevm.git" target="_blank" rel="noopener">https://gitee.com/lixl/dcevm.git</a></p>
<p><a href="https://gitee.com/lixl/HotswapAgent.git" target="_blank" rel="noopener">https://gitee.com/lixl/HotswapAgent.git</a></p>
]]></content>
  </entry>
  <entry>
    <title>java类加载过程</title>
    <url>/hexoblog/20200506225221.html</url>
    <content><![CDATA[<h1 id="Java运行机制"><a href="#Java运行机制" class="headerlink" title="Java运行机制"></a>Java运行机制</h1><p><img src="https://img2018.cnblogs.com/blog/1418466/201907/1418466-20190702112729217-1263884544.png" alt="java运行过程"></p>
<h1 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h1><p>字节码被装载到jvm内存区域的过程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">类装载过程</span><br><span class="line">    |_ 阶段1.加载 (class二进制文件读进内存里即ClassLoader实现)</span><br><span class="line">    |_ 阶段2.连接 (将静态的类信息转换为jvm方法区的运行期数据)</span><br><span class="line">        |_ 2.1验证 (文件格式、元数据、字节码、符号引用 验证)</span><br><span class="line">        |_ 2.2准备 (为类变量分配内存并设置类变量初始值的阶段,如int i=100,初始化为0，不包含对象)</span><br><span class="line">        |_ 2.3解析 (将常量池内的符号引用替换为直接引用)</span><br><span class="line">    |_ 阶段3.初始化 (执行类构造器&lt;clinit&gt;方法、静态代码块)</span><br><span class="line">    |_ 使用</span><br><span class="line">    |_ 卸载</span><br></pre></td></tr></table></figure>

<ul>
<li><p>关键点1：<a href="https://blog.csdn.net/weixin_38055381/article/details/81382115" target="_blank" rel="noopener">双亲委派</a></p>
</li>
<li><p>关键点2：类初始化</p>
</li>
</ul>
<ol>
<li><p>初始化什么东西？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对类变量进行初始化，</span><br><span class="line">即在Java类中对类变量指定初始值有两种方式：</span><br><span class="line">1.声明类变量时指定初始值</span><br><span class="line">2.使用静态初始化块为类变量指定初始值</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化一个类的3步骤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.假如这个类还没有被加载和连接，程序先加载并连接该类；</span><br><span class="line">2.假如该类的直接父类还没有被初始化，则先初始化其直接父类；</span><br><span class="line">3.假如类中有初始化语句，则系统依次执行这些初始化语句</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>jmeter使用</title>
    <url>/hexoblog/20200921175801.html</url>
    <content><![CDATA[<h1 id="编写测试用例"><a href="#编写测试用例" class="headerlink" title="编写测试用例"></a>编写测试用例</h1><p><a href="https://jmeter.apache.org/usermanual/component_reference.html" target="_blank" rel="noopener">文档</a></p>
<h2 id="http接口测试-webservice"><a href="#http接口测试-webservice" class="headerlink" title="http接口测试(webservice)"></a>http接口测试(webservice)</h2><ul>
<li><p>HTTP Request Defaults 请求默认信息<br>HTTP Request中没有配置的话，会从这里取值</p>
</li>
<li><p>User Defined Variables 定义变量<br>使用<code>${param}</code>取值</p>
</li>
<li><p>HTTP Request http请求配置</p>
</li>
<li><p>文件上传配置<br>Parameter Name : 服务器MultipartFile参数对象名<br>File Path : 客户端上传的文件路径<br>MIME type : multipart/form-data     </p>
</li>
<li><p><a href="https://www.cnblogs.com/Zhan-W/p/10985816.html" target="_blank" rel="noopener">jmeter中JSON Extractor用法</a></p>
</li>
</ul>
<h1 id="执行测试用户"><a href="#执行测试用户" class="headerlink" title="执行测试用户"></a>执行测试用户</h1><h2 id="集群运行"><a href="#集群运行" class="headerlink" title="集群运行"></a>集群运行</h2><ul>
<li>slave节点<br>jmeter.properties<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## slave server端口</span><br><span class="line">server_port=1099  </span><br><span class="line">## 关闭https服务</span><br><span class="line">server.rmi.ssl.disable=true</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><code>./jmeter-server</code> 启动slave节点<br><code>./bin/jmeter-server  -Djava.rmi.server.hostname=192.168.5.121</code> 多网卡需要指定IP</p>
<ul>
<li>master节点<br>jmeter.properties<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 配置多个slave的ip:port</span><br><span class="line">remote_hosts=192.168.18.141:1099,192.168.18.141:2099 </span><br><span class="line"></span><br><span class="line">## 关闭https服务</span><br><span class="line">server.rmi.ssl.disable=true</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><code>jmeter -n -t my_test.jmx -l log.jtl -e -o reports</code> 运行脚本</p>
<h2 id="jmeter-maven-plugin"><a href="#jmeter-maven-plugin" class="headerlink" title="jmeter-maven-plugin"></a><a href="https://github.com/jmeter-maven-plugin/jmeter-maven-plugin" target="_blank" rel="noopener">jmeter-maven-plugin</a></h2><ul>
<li><p>远程slave节点运行配置示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;com.lazerycode.jmeter&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jmeter-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.8.0&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;!-- -testfile xxx.jmx --&gt;</span><br><span class="line">        &lt;!--&lt;guiTestFile&gt;result/test01.jmx&lt;/guiTestFile&gt;--&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 测试脚本 *.jmx文件目录，默认路径src/test/jmeter --&gt;</span><br><span class="line">        &lt;testFilesDirectory&gt;testFiles&lt;/testFilesDirectory&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 设置jmeter jvm参数 --&gt;</span><br><span class="line">        &lt;jMeterProcessJVMSettings&gt;</span><br><span class="line">            &lt;xms&gt;1024&lt;/xms&gt;</span><br><span class="line">            &lt;xmx&gt;1024&lt;/xmx&gt;</span><br><span class="line">            &lt;arguments&gt;</span><br><span class="line">                &lt;argument&gt;-Dfile.encoding=UTF-8&lt;/argument&gt;</span><br><span class="line">            &lt;/arguments&gt;</span><br><span class="line">        &lt;/jMeterProcessJVMSettings&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- bin/jmeter.properties --&gt;</span><br><span class="line">        &lt;propertiesJMeter&gt;</span><br><span class="line">            &lt;language&gt;en&lt;/language&gt;</span><br><span class="line">            &lt;!--&lt;remote_hosts&gt;$&#123;remoteConfig.serverList&#125;&lt;/remote_hosts&gt;--&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- java.io.FileNotFoundException: rmi_keystore.jks --&gt;</span><br><span class="line">            &lt;server.rmi.ssl.disable&gt;true&lt;/server.rmi.ssl.disable&gt;</span><br><span class="line">        &lt;/propertiesJMeter&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 使用远程jmeter-slave执行jmx脚本 --&gt;</span><br><span class="line">        &lt;remoteConfig&gt;</span><br><span class="line">            &lt;startServersBeforeTests&gt;true&lt;/startServersBeforeTests&gt;</span><br><span class="line">            &lt;!-- slave集群 --&gt;</span><br><span class="line">            &lt;serverList&gt;192.168.5.41:7777,192.168.5.121:7777&lt;/serverList&gt;</span><br><span class="line">            &lt;!-- 执行完测试用例关闭slave进程 --&gt;</span><br><span class="line">            &lt;!--&lt;stopServersAfterTests&gt;true&lt;/stopServersAfterTests&gt;--&gt;</span><br><span class="line">        &lt;/remoteConfig&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- bin/user.properties --&gt;</span><br><span class="line">        &lt;propertiesUser&gt;</span><br><span class="line">            &lt;TestServerName&gt;192.168.5.133&lt;/TestServerName&gt;</span><br><span class="line">            &lt;TestServicePort&gt;80&lt;/TestServicePort&gt;</span><br><span class="line">            &lt;NumberOfUsers&gt;1&lt;/NumberOfUsers&gt;</span><br><span class="line">            &lt;QPSValue&gt;200&lt;/QPSValue&gt;</span><br><span class="line">        &lt;/propertiesUser&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;generateReports&gt;true&lt;/generateReports&gt;</span><br><span class="line">        &lt;testResultsTimestamp&gt;false&lt;/testResultsTimestamp&gt;</span><br><span class="line">        &lt;resultsFileNameDateFormat&gt;yyyyMMddhhmmss&lt;/resultsFileNameDateFormat&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>jmx脚本位置<br>src/test/jmeter</p>
</li>
<li><p>运行<br>mvn jmeter:jmeter</p>
</li>
</ul>
<h1 id="查看测试报告"><a href="#查看测试报告" class="headerlink" title="查看测试报告"></a>查看测试报告</h1><p><a href="https://www.cnblogs.com/hjianhui/p/9991361.html" target="_blank" rel="noopener">JMeter聚合报告（Aggregate Report）理解</a><br><a href="https://jmeter.apache.org/usermanual/component_reference.html#listeners" target="_blank" rel="noopener">https://jmeter.apache.org/usermanual/component_reference.html#listeners</a></p>
<h1 id="快捷使用"><a href="#快捷使用" class="headerlink" title="快捷使用"></a>快捷使用</h1><h2 id="windows快速打开jmx脚本"><a href="#windows快速打开jmx脚本" class="headerlink" title="windows快速打开jmx脚本"></a>windows快速打开jmx脚本</h2><ul>
<li><p>1.配置JMETER_HOME及PATH环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">保证 jmeter --? 命令可用</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.编写openJmeter.bat脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jmeter -t %1 -j C:\%HOMEPATH%\.jmeter\jmeter.log</span><br><span class="line"></span><br><span class="line">%1 获取到双击的jmx文件路径</span><br><span class="line">-t 指定打开的jmx文件</span><br><span class="line">-j 指定log文件</span><br></pre></td></tr></table></figure>
</li>
<li><p>3.设置jmx文件的默认打开程序为openJmeter.bat即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置完成后，双击jmx文件即可使用jmeter图形界面程序打开</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes安装配置</title>
    <url>/hexoblog/20200725173632.html</url>
    <content><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>环境说明：centos7<br><a href="https://www.jianshu.com/p/dbf4a343f56c" target="_blank" rel="noopener">https://www.jianshu.com/p/dbf4a343f56c</a></p>
<h2 id="配置静态ip"><a href="#配置静态ip" class="headerlink" title="配置静态ip"></a>配置静态ip</h2><p>vim /etc/sysconfig/network-scripts/ifcfg-ens33  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">IPADDR=&quot;192.168.18.160&quot;   # 设置的静态IP地址</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;    # 子网掩码</span><br><span class="line">GATEWAY=&quot;192.168.18.2&quot;    # 网关地址</span><br><span class="line">DNS1=&quot;192.168.18.2&quot;       # DNS服务器</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;ba32ad97-e154-4a8b-a064-c98701419811&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br></pre></td></tr></table></figure>

<p>systemctl restart network</p>
<h2 id="关闭swap"><a href="#关闭swap" class="headerlink" title="关闭swap"></a>关闭swap</h2><ul>
<li>临时关闭 <code>swapoff -a</code></li>
<li>永久关闭      <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/fstab</span><br><span class="line">注释掉swap</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>

<h2 id="关闭selinux"><a href="#关闭selinux" class="headerlink" title="关闭selinux"></a>关闭selinux</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/selinux</span><br><span class="line"></span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure>

<h2 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h2><p>所有要加入集群的节点主机名不能相同          </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># hostnamectl set-hostname k8s-master</span><br><span class="line"></span><br><span class="line"># vim /etc/hosts</span><br><span class="line"></span><br><span class="line"># reboot</span><br></pre></td></tr></table></figure>

<h2 id="centos7-安装docker"><a href="#centos7-安装docker" class="headerlink" title="centos7 安装docker"></a>centos7 安装docker</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum -y install docker-ce</span><br><span class="line"></span><br><span class="line"># 启动服务</span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"># 设置开机启动</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>

<h2 id="安装kubelet-kubeadm-kubectl"><a href="#安装kubelet-kubeadm-kubectl" class="headerlink" title="安装kubelet kubeadm kubectl"></a>安装kubelet kubeadm kubectl</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">yum install -y kubelet kubeadm kubectl</span><br><span class="line"></span><br><span class="line">systemctl enable kubelet.service</span><br></pre></td></tr></table></figure>

<h2 id="开启forward"><a href="#开启forward" class="headerlink" title="开启forward"></a>开启forward</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># Docker从1.13版本开始调整了默认的防火墙规则</span><br><span class="line"># 禁用了iptables filter表中FOWARD链</span><br><span class="line"># 这样会引起Kubernetes集群中跨Node的Pod无法通信</span><br><span class="line"></span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line"></span><br><span class="line"># 配置转发相关参数，否则可能会出错</span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">vm.swappiness=0</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure>

<h1 id="安装k8s集群"><a href="#安装k8s集群" class="headerlink" title="安装k8s集群"></a>安装k8s集群</h1><h2 id="master节点安装配置"><a href="#master节点安装配置" class="headerlink" title="master节点安装配置"></a>master节点安装配置</h2><ul>
<li><p>导出配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubeadm config print init-defaults --kubeconfig ClusterConfiguration &gt; kubeadm.yml</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置kubeadm.yml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">advertiseAddress : master节点ip</span><br><span class="line"></span><br><span class="line">imageRepository: registry.aliyuncs.com/google_containers</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看镜像资源<br>kubeadm config images list –config kubeadm.yml</p>
</li>
<li><p>拉取镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubeadm config images pull --config kubeadm.yml</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建单点 master 集群</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">--kubernetes-version v1.18.0 \</span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">--pod-network-cidr=10.96.0.0/12</span><br><span class="line"></span><br><span class="line">kubeadm init --config=kubeadm.yml</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果初始化失败，请使用如下代码清除后重新初始化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kubeadm reset</span><br><span class="line"># rm -rf /var/lib/etcd/*</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# mkdir -p ~/.kube</span><br><span class="line">[root@k8s-master ~]# cp -i /etc/kubernetes/admin.conf ~/.kube/config</span><br></pre></td></tr></table></figure>

<ul>
<li><p>添加节点（在node节点执行）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubeadm join xxx</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://docs.projectcalico.org/getting-started/clis/calicoctl/install#installing-calicoctl-as-a-kubernetes-pod" target="_blank" rel="noopener">k8s网络配置(calico)</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># kubectl apply -f https://docs.projectcalico.org/v3.14/manifests/calico.yaml</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><a href="https://docs.projectcalico.org/releases" target="_blank" rel="noopener">安装失败的话找更新的calico试试</a>           </p>
<ul>
<li>查看calico组件安装情况(全部running才算完成)<br><code>watch kubectl get pods --all-namespaces</code></li>
</ul>
<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a><a href="http://docs.kubernetes.org.cn/468.html" target="_blank" rel="noopener">命令</a></h1><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><ul>
<li>查看节点信息 <code>kubectl get nodes -o wide</code></li>
<li>查看节点状态 <code>kubectl get node</code></li>
<li>主机状态 <code>kubectl get cs</code></li>
<li>删除node <code>kubectl delete node k8s-node1</code>     </li>
<li>将k8s-node1节点设置为不可调度模式  <code>kubectl cordon k8s-node1</code></li>
<li>将当前运行在k8s-node1节点上的容器驱离 <code>kubectl drain k8s-node1</code>    </li>
<li>执行完维护后，将节点重新加入调度 <code>kubectl uncordon k8s-node1</code></li>
</ul>
<h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><ul>
<li>检查Master状态 <code>kubectl cluster-info</code></li>
<li>运行容器 <code>kubectl run nginx --image=nginx --replicas=2 --port=80</code></li>
<li>查看pods(运行容器的最小单元) <code>kubectl get pods</code></li>
<li>查看部署(k8s内部服务) <code>kubectl get deployment</code></li>
<li>查看对外暴露的服务 <code>kubectl get services</code></li>
<li>暴露服务端口 <code>kubectl expose deployment nginx --port=80 --type=LoadBalancer</code></li>
<li>删除已部署服务 <code>kubectl delete deployment nginx</code></li>
<li>删除已发布服务 <code>kubectl delete service nginx</code></li>
<li>删除pod <code>kubectl delete pod</code></li>
</ul>
<p><a href="https://blog.csdn.net/xiaobao7865/article/details/107513957" target="_blank" rel="noopener">https://blog.csdn.net/xiaobao7865/article/details/107513957</a></p>
<h1 id="带界面的安装工具"><a href="#带界面的安装工具" class="headerlink" title="带界面的安装工具"></a>带界面的安装工具</h1><ul>
<li><a href="https://github.com/Orientsoft/kubekit/wiki/Kubekit-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C" target="_blank" rel="noopener">使用kubekit安装</a></li>
<li><a href="https://docs.rancher.cn/rancher1x/" target="_blank" rel="noopener">rancher</a></li>
<li><a href="https://kubesphere.com.cn/docs/zh-CN/installation/all-in-one/" target="_blank" rel="noopener">kubesphere</a></li>
<li><a href="https://github.com/KubeOperator" target="_blank" rel="noopener">KubeOperator</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>linux-centos yum配置及使用</title>
    <url>/hexoblog/20200624170247.html</url>
    <content><![CDATA[<h1 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h1><ul>
<li><p>远程yum源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/mysql.repo</span><br><span class="line">[mysql]</span><br><span class="line">name=mysql</span><br><span class="line">baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/x86_64/</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure>
</li>
<li><p>本地yum源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/mysql.repo</span><br><span class="line">[mysql]</span><br><span class="line">name=mysql</span><br><span class="line">baseurl=file:///data/packages</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="yum下载rpm包"><a href="#yum下载rpm包" class="headerlink" title="yum下载rpm包"></a>yum下载rpm包</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install --downloadonly --downloaddir=./ mysql-community-server</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>linux-centos7编译安装软件</title>
    <url>/hexoblog/20200624161747.html</url>
    <content><![CDATA[<p>系统环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# lsb_release -a</span><br><span class="line">LSB Version:	:core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:desktop-4.1-amd64:desktop-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarch</span><br><span class="line">Distributor ID:	CentOS</span><br><span class="line">Description:	CentOS Linux release 7.6.1810 (Core) </span><br><span class="line">Release:	7.6.1810</span><br><span class="line">Codename:	Core</span><br></pre></td></tr></table></figure>

<h1 id="openjdk8编译安装"><a href="#openjdk8编译安装" class="headerlink" title="openjdk8编译安装"></a>openjdk8编译安装</h1><ul>
<li><p>下载<br><a href="https://gitee.com/lixl/openjdk8.git" target="_blank" rel="noopener">https://gitee.com/lixl/openjdk8.git</a></p>
</li>
<li><p>相关依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install unzip gcc gcc-c++ libXtst-devel libXt-devel libXrender-devel cups-devel freetype-devel alsa-lib-devel fontconfig-devel</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//打开要编译的openjdk目录</span><br><span class="line">//生成配置信息并构建编译环境</span><br><span class="line">./configure --with-target-bits=64 --with-boot-jdk=../jdk1.7.0_60/ --with-debug-level=slowdebug --enable-debug-symbols ZIP_DEBUGINFO_FILES=0</span><br><span class="line"></span><br><span class="line">//开始编译</span><br><span class="line">make all ZIP_DEBUGINFO_FILES=0</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="安装git-svn"><a href="#安装git-svn" class="headerlink" title="安装git(svn)"></a>安装git(svn)</h1><ul>
<li><p>下载<br><a href="https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.9.5.tar.gz" target="_blank" rel="noopener">https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.9.5.tar.gz</a></p>
</li>
<li><p>依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install libcurl-devel subversion-perl</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure --with-curl --with-expat --prefix=/usr/local </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置完成<br>git –version </p>
</li>
</ul>
<h1 id="nginx编译安装"><a href="#nginx编译安装" class="headerlink" title="nginx编译安装"></a>nginx编译安装</h1><p>wget <a href="http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz" target="_blank" rel="noopener">http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz</a><br>wget <a href="http://nginx.org/download/nginx-1.6.2.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.6.2.tar.gz</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=../pcre-8.35</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>/usr/local/nginx/sbin/nginx -v</p>
<h1 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h1><ul>
<li>依赖<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ make autoconf libtool-ltdl-devel gd-devel freetype-devel libxml2-devel libjpeg-devel libpng-devel openssl-devel curl-devel bison patch unzip libmcrypt-devel libmhash-devel ncurses-devel sudo bzip2 flex libaio-devel cmake</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line">- 编译并安装</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql/ -DMYSQL_UNIX_ADDR=/tmp/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_EXTRA_CHARSETS=all -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_MEMORY_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DWITH_INNODB_MEMCACHED=1 -DWITH_DEBUG=OFF -DWITH_ZLIB=bundled -DENABLED_LOCAL_INFILE=1 -DENABLED_PROFILING=ON -DMYSQL_MAINTAINER_MODE=OFF -DMYSQL_DATADIR=/usr/local/mysql/data -DMYSQL_TCP_PORT=3306</p>
<p>make &amp;&amp; make install</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 安装完成</span><br></pre></td></tr></table></figure>

<p> /usr/local/mysql/bin/mysql –version</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 配置 /etc/my.cnf</span><br></pre></td></tr></table></figure>

<p>[client]<br>port = 3306<br>socket = /tmp/mysql.sock<br>[mysqld]<br>replicate-ignore-db = mysql<br>replicate-ignore-db = test<br>replicate-ignore-db = information_schema<br>user = mysql<br>port = 3306<br>socket = /tmp/mysql.sock<br>basedir = /usr/local/mysql<br>datadir = /usr/local/mysql/data<br>log-error = /usr/local/mysql/mysql_error.log<br>pid-file = /usr/local/mysql/mysql.pid<br>open_files_limit = 65535<br>back_log = 600<br>max_connections = 5000<br>max_connect_errors = 1000<br>table_open_cache = 1024<br>external-locking = FALSE<br>max_allowed_packet = 32M<br>sort_buffer_size = 1M<br>join_buffer_size = 1M<br>thread_cache_size = 600</p>
<p>#thread_concurrency = 8<br>query_cache_size = 128M<br>query_cache_limit = 2M<br>query_cache_min_res_unit = 2k<br>default-storage-engine = MyISAM<br>default-tmp-storage-engine=MYISAM<br>thread_stack = 192K<br>transaction_isolation = READ-COMMITTED<br>tmp_table_size = 128M<br>max_heap_table_size = 128M<br>log-slave-updates<br>log-bin = /usr/local/mysql/binlog/binlog<br>binlog-do-db=oa_fb<br>binlog-ignore-db=mysql<br>binlog_cache_size = 4M<br>binlog_format = MIXED<br>max_binlog_cache_size = 8M<br>max_binlog_size = 1G<br>relay-log-index = /usr/local/mysql/relaylog/relaylog<br>relay-log-info-file = /usr/local/mysql/relaylog/relaylog<br>relay-log = /usr/local/mysql/relaylog/relaylog<br>expire_logs_days = 10<br>key_buffer_size = 256M<br>read_buffer_size = 1M<br>read_rnd_buffer_size = 16M<br>bulk_insert_buffer_size = 64M<br>myisam_sort_buffer_size = 128M<br>myisam_max_sort_file_size = 10G<br>myisam_repair_threads = 1<br>myisam_recover<br>interactive_timeout = 120<br>wait_timeout = 120<br>skip-name-resolve</p>
<p>#master-connect-retry = 10<br>slave-skip-errors = 1032,1062,126,1114,1146,1048,1396</p>
<p>#master-host = 192.168.1.2</p>
<p>#master-user = username</p>
<p>#master-password = password</p>
<p>#master-port = 3306<br>server-id = 1<br>loose-innodb-trx=0<br>loose-innodb-locks=0<br>loose-innodb-lock-waits=0<br>loose-innodb-cmp=0<br>loose-innodb-cmp-per-index=0<br>loose-innodb-cmp-per-index-reset=0<br>loose-innodb-cmp-reset=0<br>loose-innodb-cmpmem=0<br>loose-innodb-cmpmem-reset=0<br>loose-innodb-buffer-page=0<br>loose-innodb-buffer-page-lru=0<br>loose-innodb-buffer-pool-stats=0<br>loose-innodb-metrics=0<br>loose-innodb-ft-default-stopword=0<br>loose-innodb-ft-inserted=0<br>loose-innodb-ft-deleted=0<br>loose-innodb-ft-being-deleted=0<br>loose-innodb-ft-config=0<br>loose-innodb-ft-index-cache=0<br>loose-innodb-ft-index-table=0<br>loose-innodb-sys-tables=0<br>loose-innodb-sys-tablestats=0<br>loose-innodb-sys-indexes=0<br>loose-innodb-sys-columns=0<br>loose-innodb-sys-fields=0<br>loose-innodb-sys-foreign=0<br>loose-innodb-sys-foreign-cols=0</p>
<p>slow_query_log_file=/usr/local/mysql/logs/mysql_slow.log<br>long_query_time = 1<br>[mysqldump]<br>quick<br>max_allowed_packet = 32M</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 初始化数据库</span><br></pre></td></tr></table></figure>

<p>/usr/local/mysql/scripts/mysql_install_db –defaults-file=/etc/my.cnf<br>``</p>
<ul>
<li><p>设置为系统服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp support-files/mysql.server /etc/rc.d/init.d/mysqld</span><br><span class="line"></span><br><span class="line">chkconfig --add mysqld</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动服务<br>systemctl start mysqld</p>
</li>
<li><p>初始化密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/local/mysql/bin/mysqladmin -u root password &apos;new-password&apos;</span><br><span class="line"> /usr/local/mysql/bin/mysqladmin -u root -h 127.0.0.1 password &apos;new-password&apos;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>linux基本操作</title>
    <url>/hexoblog/20200620020258.html</url>
    <content><![CDATA[<h1 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">超级用户（根用户）、组、普通用户</span><br><span class="line"></span><br><span class="line">root/ p2m/ lixl </span><br><span class="line"></span><br><span class="line">groupadd p2m</span><br><span class="line"></span><br><span class="line">useradd -g p2m -d /home/lixl lixl</span><br><span class="line"></span><br><span class="line">userdel lixl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">切换用户</span><br><span class="line"></span><br><span class="line">su lixl</span><br><span class="line"></span><br><span class="line">su - lixl -c &quot;/home/lixl/tomcat/bin/startup.sh&quot;</span><br></pre></td></tr></table></figure>

<h1 id="文件与权限"><a href="#文件与权限" class="headerlink" title="文件与权限"></a>文件与权限</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户目录与根目录</span><br><span class="line"></span><br><span class="line">cd ~</span><br><span class="line"></span><br><span class="line">cd /</span><br><span class="line"></span><br><span class="line">pwd 当前文件夹路径</span><br><span class="line"></span><br><span class="line">ls -hal 列出文件夹下所有文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mkdir tomcat</span><br><span class="line"></span><br><span class="line">rm -rf tomcat</span><br><span class="line"></span><br><span class="line">mv tomcat tomcat-bak 给文件重命名/移动文件</span><br><span class="line"></span><br><span class="line">vi 编辑器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chmod -R +x tomcat 可执行权限</span><br><span class="line"></span><br><span class="line">chown -R lixl:p2m tomcat 切换用户、组</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看日志</span><br><span class="line"></span><br><span class="line">tail -f catalina.out 从尾部看</span><br><span class="line"></span><br><span class="line">tail -100 catalina.out &gt;&gt; p2m_20200620.log 重定向到新文件</span><br><span class="line"></span><br><span class="line">head -1000 catalina.out  从头看</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scp 复制文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">文件夹压缩及解压缩</span><br><span class="line"></span><br><span class="line">tar czvf logs.tar.gz logs/</span><br><span class="line"></span><br><span class="line">tar zxvf logs.tar.gz</span><br></pre></td></tr></table></figure>

<h1 id="app应用"><a href="#app应用" class="headerlink" title="app应用"></a>app应用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdk/maven环境变量</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=..</span><br><span class="line"></span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line">vi .bashrc</span><br><span class="line"></span><br><span class="line">source .bashrc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">启动tomcat服务</span><br><span class="line"></span><br><span class="line">sh startup.sh 执行shell脚本</span><br><span class="line"></span><br><span class="line">./startup.sh  必须有可执行权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看服务</span><br><span class="line"></span><br><span class="line">ps -ef|grep tomcat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pkill -9 java</span><br><span class="line"></span><br><span class="line">kill PID</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df -h </span><br><span class="line"></span><br><span class="line">top</span><br><span class="line"></span><br><span class="line">arthas</span><br></pre></td></tr></table></figure>

<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">菜鸟教程-命令手册 https://www.runoob.com/linux/linux-command-manual.html</span><br><span class="line"></span><br><span class="line">centos软件包管理 rpm / yum  (jar --&gt;maven)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">编译安装nginx https://www.runoob.com/linux/nginx-install-setup.html</span><br><span class="line"></span><br><span class="line">安装mysql https://www.runoob.com/linux/mysql-install-setup.html</span><br><span class="line">安装oracle https://www.cnblogs.com/dudu99/p/11074489.html</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>logback使用</title>
    <url>/hexoblog/20201016095342.html</url>
    <content><![CDATA[<h1 id="logback使用"><a href="#logback使用" class="headerlink" title="logback使用"></a>logback使用</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>pom依赖logback，代码中使用slf4j</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">//打印日志时使用占位符(禁止手工拼接字符串)</span><br><span class="line">logger.info(&quot;file:【&#123;&#125;】&quot;, file.getAbsolutePath());</span><br><span class="line">logger.debug(&quot;file:【&#123;&#125;】&quot;, file.getAbsolutePath());</span><br></pre></td></tr></table></figure>

<p>classpath:logback.xml(示例:在控制台输出日志)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %level [%thread] %class:%line - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="logback语法"><a href="#logback语法" class="headerlink" title="logback语法"></a>logback语法</h1><h2 id="log4j-properties转logback-xml"><a href="#log4j-properties转logback-xml" class="headerlink" title="log4j.properties转logback.xml"></a><a href="http://logback.qos.ch/translator/" target="_blank" rel="noopener">log4j.properties转logback.xml</a></h2><h2 id="appender配置"><a href="#appender配置" class="headerlink" title="appender配置"></a>appender配置</h2><ul>
<li><p>输出到控制台</p>
</li>
<li><p>输出到文件</p>
</li>
<li><p><a href="https://blog.csdn.net/Bad_yu/article/details/81075707" target="_blank" rel="noopener">按时间切割日志文件</a></p>
</li>
<li><p><a href="https://blog.csdn.net/Aruis26/article/details/89260192" target="_blank" rel="noopener">按照文件大小切割日志</a></p>
</li>
<li><p>多个应用输出到同一个文件</p>
</li>
</ul>
<h2 id="appender-pattern格式"><a href="#appender-pattern格式" class="headerlink" title="appender-pattern格式"></a>appender-pattern格式</h2><p>格式化输出：</p>
<ul>
<li>%d{yyyy-MM-dd HH:mm:ss.SSS}： 表示日期{格式化}，</li>
<li>%thread： 表示线程名，</li>
<li>%-5level：日志级别从左显示5个字符宽度</li>
<li>%msg：日志消息(也可以写成%m)</li>
<li>%n：是换行符</li>
<li>%class： 类名</li>
<li>%line： 行号(也可以写成%L)</li>
</ul>
<h1 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h1><h2 id="logback-elasticsearch-appender"><a href="#logback-elasticsearch-appender" class="headerlink" title="logback-elasticsearch-appender"></a>logback-elasticsearch-appender</h2><p><a href="https://github.com/internetitem/logback-elasticsearch-appender" target="_blank" rel="noopener">https://github.com/internetitem/logback-elasticsearch-appender</a></p>
<h2 id="logback-logstash-elasticsearch"><a href="#logback-logstash-elasticsearch" class="headerlink" title="logback+logstash+elasticsearch"></a>logback+logstash+elasticsearch</h2><p><a href="https://www.cnblogs.com/zhujiqian/p/11593671.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhujiqian/p/11593671.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>maven编译并运行tomcat源码</title>
    <url>/hexoblog/20210423114618.html</url>
    <content><![CDATA[<h1 id="下载tomcat源码-以7-0-109为例"><a href="#下载tomcat源码-以7-0-109为例" class="headerlink" title="下载tomcat源码(以7.0.109为例)"></a>下载tomcat源码(以7.0.109为例)</h1><p><a href="https://gitee.com/apache/tomcat/tree/7.0.x/" target="_blank" rel="noopener">https://gitee.com/apache/tomcat/tree/7.0.x/</a><br><a href="https://github.com/apache/tomcat/tree/7.0.x" target="_blank" rel="noopener">https://github.com/apache/tomcat/tree/7.0.x</a>     </p>
<p><a href="https://gitee.com/lixl/tomcat-maven/tree/7.0.109/" target="_blank" rel="noopener">https://gitee.com/lixl/tomcat-maven/tree/7.0.109/</a>           </p>
<h1 id="编写pom-xml"><a href="#编写pom-xml" class="headerlink" title="编写pom.xml"></a>编写pom.xml</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>apache-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>apache-tomcat<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.test.skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">maven.test.skip</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.javadoc.skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">maven.javadoc.skip</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.ant<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ant<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>wsdl4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wsdl4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxrpc-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.easymock<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easymock<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jdt.core.compiler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ecj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>java<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span>test<span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>test<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：编译后如有报错，注释掉报错的代码即可</p>
<h1 id="运行org-apache-catalina-startup-Bootstrap"><a href="#运行org-apache-catalina-startup-Bootstrap" class="headerlink" title="运行org.apache.catalina.startup.Bootstrap"></a>运行<code>org.apache.catalina.startup.Bootstrap</code></h1><ul>
<li><p>main方法运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Dcatalina.home=path\to\home </span><br><span class="line">-Dcatalina.base=path\to\home  </span><br><span class="line">-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager </span><br><span class="line">-Djava.util.logging.config.file=path\to\home\conf\logging.properties</span><br></pre></td></tr></table></figure>
</li>
<li><p>jar包运行<br><code>java -cp lib/apache-tomcat-7.0.20210423.jar org.apache.catalina.startup.Bootstrap</code></p>
</li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="控制台乱码"><a href="#控制台乱码" class="headerlink" title="控制台乱码"></a>控制台乱码</h2><p><code>org.apache.catalina.startup.VersionLoggerListener#log</code>打印中文乱码         </p>
<p>原因：<code>org.apache.tomcat.util.res.StringManager</code>中使用<br><code>ResourceBundle bundle.getString(key)</code>打印中文;<br>而ResourceBundle读取文本使用的<code>ISO-8859-1</code>编码不支持中文导致的</p>
<p>解决：      </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.apache.tomcat.util.res.StringManager#getString </span><br><span class="line">使用ISO-8859-1编码获取字符后，再转换为字符串即可</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">    str = new String(bundle.getString(key).getBytes(&quot;ISO-8859-1&quot;), &quot;utf-8&quot;);</span><br><span class="line">&#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">    str = bundle.getString(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="webapps-examples启动报错"><a href="#webapps-examples启动报错" class="headerlink" title="webapps/examples启动报错"></a>webapps/examples启动报错</h2><p>移除掉源码中的examples目录, 重新编译即可</p>
<p><a href="https://gitee.com/lixl/tomcat-maven/tree/tomcat-7.0.108-examples/" target="_blank" rel="noopener">https://gitee.com/lixl/tomcat-maven/tree/tomcat-7.0.108-examples/</a>        </p>
]]></content>
  </entry>
  <entry>
    <title>macos使用</title>
    <url>/hexoblog/20200708110740.html</url>
    <content><![CDATA[<h1 id="安装homebrow"><a href="#安装homebrow" class="headerlink" title="安装homebrow"></a>安装homebrow</h1><p><a href="https://gitee.com/cunkai/HomebrewCN" target="_blank" rel="noopener">https://gitee.com/cunkai/HomebrewCN</a></p>
<h1 id="配置adb"><a href="#配置adb" class="headerlink" title="配置adb"></a><a href="https://segmentfault.com/a/1190000019464779" target="_blank" rel="noopener">配置adb</a></h1><p><code>brew cask install android-platform-tools</code></p>
<h1 id="microsoft-remote-desktop-for-mac"><a href="#microsoft-remote-desktop-for-mac" class="headerlink" title="microsoft-remote-desktop-for-mac"></a>microsoft-remote-desktop-for-mac</h1><p><a href="https://install.appcenter.ms/orgs/rdmacios-k2vy/apps/microsoft-remote-desktop-for-mac/distribution_groups/all-users-of-microsoft-remote-desktop-for-mac" target="_blank" rel="noopener">microsoft开发的免费的mac远程windows工具</a></p>
<h1 id="挂载ntfs硬盘"><a href="#挂载ntfs硬盘" class="headerlink" title="挂载ntfs硬盘"></a>挂载ntfs硬盘</h1><ul>
<li><p>1.首先查看本地已经挂载的ntfs硬盘：<br><code>mount | grep ntfs</code><br>结果如下：<br>/dev/disk3s1 on / (ntfs,…)</p>
</li>
<li><p>2.然后卸载该硬盘：<br><code>sudo umount /dev/disk3s1</code></p>
</li>
<li><p>3.本地创建一个挂载目录，然后使用mount_ntfs再次挂载：<br><code>sudo mkdir /Volumes/mnt</code><br><code>sudo mount_ntfs -o rw,nobrowse /dev/disk3s1 /Volumes/mnt</code></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>minix os</title>
    <url>/hexoblog/20200505020534.html</url>
    <content><![CDATA[<h1 id="安装及下载"><a href="#安装及下载" class="headerlink" title="安装及下载"></a>安装及下载</h1><p><a href="https://blog.csdn.net/Wanli_Xing/article/details/51992248" target="_blank" rel="noopener">https://blog.csdn.net/Wanli_Xing/article/details/51992248</a></p>
<h1 id="基本软件"><a href="#基本软件" class="headerlink" title="基本软件"></a>基本软件</h1><p><a href="https://blog.csdn.net/crazy_scott/article/details/79424933" target="_blank" rel="noopener">https://blog.csdn.net/crazy_scott/article/details/79424933</a>      </p>
<p>在线更新软件仓库元数据，输入 pkgin update<br>在线安装git版本控制器,输入 pkgin install git-base<br>在线安装SSH,输入 pkgin install openssh       重启后就好使了<br>在线安装VIM,输入 pkgin install vim<br>在线安装clang编译器， 输入 pkgin install clang<br>在线安装运行链接库，输入 pkgin install binutils</p>
<h1 id="c语言"><a href="#c语言" class="headerlink" title="c语言"></a>c语言</h1><p><a href="https://www.runoob.com/cprogramming/c-memory-management.html" target="_blank" rel="noopener">https://www.runoob.com/cprogramming/c-memory-management.html</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// gcc hello.c -o main</span></span><br><span class="line"><span class="comment">// sh main </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">/* 我的第一个 C 程序 */</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Hello, World! \n"</span>);</span><br><span class="line">   <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span> (i&lt;<span class="number">100</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      i++;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</span><br><span class="line">      <span class="keyword">if</span>(i%<span class="number">8</span>==<span class="number">0</span>)&#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>mysql-创建用户及权限分配</title>
    <url>/hexoblog/20210824095924.html</url>
    <content><![CDATA[<h1 id="mysql-创建用户及权限分配"><a href="#mysql-创建用户及权限分配" class="headerlink" title="mysql-创建用户及权限分配"></a>mysql-创建用户及权限分配</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- root用户执行</span><br><span class="line">GRANT ALL ON *.* TO &apos;system&apos; @&apos;%&apos; WITH GRANT OPTION;</span><br><span class="line">REVOKE ALL ON *.* FROM &apos;system&apos; @&apos;%&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 创建用户</span><br><span class="line">create user &apos;testdbuser2&apos; @&apos;%&apos; IDENTIFIED by &apos;123456&apos; ;</span><br><span class="line">drop user &apos;testdbuser2&apos; @&apos;%&apos;;</span><br><span class="line"></span><br><span class="line">-- 创建数据库</span><br><span class="line">create database testdb2;</span><br><span class="line">drop database testdb2;</span><br><span class="line"></span><br><span class="line">-- 授权</span><br><span class="line">GRANT ALL ON testdb2.* TO &apos;testdbuser2&apos; @&apos;%&apos;;</span><br><span class="line">REVOKE ALL ON testdb2.* FROM &apos;testdbuser2&apos; @&apos;%&apos;;</span><br></pre></td></tr></table></figure>

<h1 id="解压安装mysql"><a href="#解压安装mysql" class="headerlink" title="解压安装mysql"></a>解压安装mysql</h1><h2 id="1-下载二进制软件包"><a href="#1-下载二进制软件包" class="headerlink" title="1.下载二进制软件包"></a>1.下载二进制软件包</h2><p><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">windows安装zip包即可 </span><br><span class="line"></span><br><span class="line">linux 下载Generic版本(注意glibc版本,可以通过 rpm -q glibc 查看)</span><br></pre></td></tr></table></figure>

<h2 id="2-编写my-cfg并初始化数据库"><a href="#2-编写my-cfg并初始化数据库" class="headerlink" title="2. 编写my.cfg并初始化数据库"></a>2. 编写my.cfg并初始化数据库</h2><p>my.cfg</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">user = p2m</span><br><span class="line">basedir = ./</span><br><span class="line">datadir = ./data</span><br><span class="line">port=3306</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">max_connections=20</span><br><span class="line"># 数据库编码</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">port=3306</span><br><span class="line">scoket=/tmp/mysql.sock</span><br></pre></td></tr></table></figure>

<p>初始化数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:./bin</span><br><span class="line">mysqld --defaults-file=my.conf --initialize --console</span><br><span class="line"></span><br><span class="line">执行完成时会显示初始化的root密码，记录下来</span><br></pre></td></tr></table></figure>

<p>启动数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld --defaults-file=my.conf --console</span><br></pre></td></tr></table></figure>

<h2 id="3-客户端访问"><a href="#3-客户端访问" class="headerlink" title="3.客户端访问"></a>3.客户端访问</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:./bin</span><br><span class="line">mysql -uroot -p[tempPassWord]</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>mysql使用</title>
    <url>/hexoblog/20200423143851.html</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a><a href="https://hub.docker.com/_/mysql" target="_blank" rel="noopener">docker</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#下载</span><br><span class="line">docker pull mysql:5.6</span><br><span class="line"></span><br><span class="line">#运行实例</span><br><span class="line">docker run \</span><br><span class="line">--name mysqldb \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-d mysql:5.6</span><br><span class="line"></span><br><span class="line">#进入容器</span><br><span class="line">docker exec -it mysqldb /bin/bash</span><br><span class="line"></span><br><span class="line">#登录数据库 </span><br><span class="line">root@a1f0b553fed0:/# mysql -uroot -p123456</span><br></pre></td></tr></table></figure>

<p>docker操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看操作系统版本</span><br><span class="line"># cat /etc/issue</span><br><span class="line"></span><br><span class="line">修改apt源 /etc/apt/sources.list</span><br><span class="line">deb http://mirrors.aliyun.com/debian stretch main</span><br><span class="line">deb http://mirrors.aliyun.com/debian-security stretch/updates main</span><br><span class="line">deb http://mirrors.aliyun.com/debian stretch-updates main</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/qq_39390545/article/details/90674210" target="_blank" rel="noopener">navicat</a></p>
<h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><ul>
<li><p>mysql 5.6</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 下载</span><br><span class="line">https://dev.mysql.com/downloads/mysql/</span><br><span class="line"></span><br><span class="line"># 配置PATH</span><br><span class="line"></span><br><span class="line"># 进入mysql目录后, 初始化数据库</span><br><span class="line">mysqld --initialize-insecure</span><br><span class="line"></span><br><span class="line"># 安装MySQL服务</span><br><span class="line">mysqld -install</span><br><span class="line"></span><br><span class="line"># 启动MySQL服务</span><br><span class="line">net start MySQL</span><br><span class="line"></span><br><span class="line"># 初始化密码</span><br><span class="line">mysqladmin -u root password</span><br><span class="line"></span><br><span class="line"># 客户端登录</span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line"># 关闭MySQL服务</span><br><span class="line">net stop MySQL</span><br><span class="line"></span><br><span class="line"># 删除mysql服务</span><br><span class="line">mysqld -remove</span><br></pre></td></tr></table></figure>
</li>
<li><p>mysql8普通用户免安装启动<br>前提：下载mysql-server.zip</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 配置mysql到path,这样方便使用mysql命令</span><br><span class="line">set MYSQL_HOME=./mysql-8.0.23-winx64</span><br><span class="line">set path=%path%;%MYSQL_HOME%/bin</span><br><span class="line"></span><br><span class="line">2. 初始化数据库</span><br><span class="line">mysqld --initialize --console</span><br><span class="line">注意记住默认的临时密码</span><br><span class="line"></span><br><span class="line">3. 启动</span><br><span class="line">mysqld --console</span><br><span class="line"></span><br><span class="line">## 第一次使用临时密码进入MySQL,随后赶紧重置密码</span><br><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;root-password&apos;;</span><br><span class="line"></span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="centos6"><a href="#centos6" class="headerlink" title="centos6"></a>centos6</h2><p>1.安装<br>yum install mysql-community-server -y</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysql]</span><br><span class="line">name=mysql</span><br><span class="line">baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/6/x86_64/</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure>

<p>2.启动服务<br>service mysqld start<br>3.初始化密码<br><code>shell&gt; grep &#39;temporary password&#39; /var/log/mysqld.log</code><br><code>shell&gt; mysql -uroot -p</code><br><code>mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;MyNewPass4!&#39;;</code></p>
<p>4.修改数据文件存储位置          </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &quot;datadir&quot;;</span><br></pre></td></tr></table></figure>

<p>vim /etc/my.cnf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">datadir=/u01/mysql</span><br><span class="line">socket=/u01/mysql/mysql.sock</span><br></pre></td></tr></table></figure>

<p>mysql重启报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setenforce 0</span><br></pre></td></tr></table></figure>

<p>5.查看配置文件位置<br>mysqld –verbose –help | grep -A 1 ‘Default options’</p>
<h2 id="centos7安装mysql-5-7-31-el7-x86-64-tar-gz"><a href="#centos7安装mysql-5-7-31-el7-x86-64-tar-gz" class="headerlink" title="centos7安装mysql-5.7.31-el7-x86_64.tar.gz"></a>centos7安装<a href="https://cdn.mysql.com/archives/mysql-5.7/mysql-5.7.31-el7-x86_64.tar.gz" target="_blank" rel="noopener">mysql-5.7.31-el7-x86_64.tar.gz</a></h2><ol>
<li><p>解压到/opt目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar zxvf mysql-5.7.31-el7-x86_64.tar.gz -C /opt</span><br><span class="line">mv mysql-5.7.31-el7-x86_64 mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑/etc/my.cnf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">#character-set-server=utf8</span><br><span class="line">port=3306</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line">[mysqld]</span><br><span class="line">#skip-grant-tables</span><br><span class="line">#设置3306端口</span><br><span class="line">port=3306</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line">#设置mysql的安装目录</span><br><span class="line">basedir=/opt/mysql</span><br><span class="line">#设置mysql数据库的数据的存放目录</span><br><span class="line">datadir=/opt/mysql/data</span><br><span class="line">#允许最大连接数</span><br><span class="line">max_connections=200</span><br><span class="line">#服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="line">character-set-server=utf8</span><br><span class="line">#创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">user=mysql</span><br><span class="line">[mysqld_safe]</span><br><span class="line">pid-file=/usr/local/mysql/data/n1.pid</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建mysql用户和组</span><br><span class="line">#groupadd mysql</span><br><span class="line">#useradd -g mysql mysql</span><br><span class="line"></span><br><span class="line">初始化mysql data目录</span><br><span class="line">#cd /opt/mysql/</span><br><span class="line">#./bin/mysqld --initialize --user=mysql</span><br><span class="line"></span><br><span class="line">#cp support-files/mysql.server /etc/init.d</span><br><span class="line"></span><br><span class="line">启动mysql服务</span><br><span class="line">#/etc/init.d/mysql.server restart</span><br><span class="line"></span><br><span class="line">设置为开机启动</span><br><span class="line">#chkconfig --level 35 mysql.server on</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="centos8"><a href="#centos8" class="headerlink" title="centos8"></a>centos8</h2><ol>
<li>安装<br>yum install mysql-server</li>
</ol>
<h1 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看引擎</span><br><span class="line">show variables like &apos;%storage_engine%&apos;;</span><br><span class="line"></span><br><span class="line"># 系统版本</span><br><span class="line">select version();</span><br></pre></td></tr></table></figure>

<h1 id="用户及权限操作语句"><a href="#用户及权限操作语句" class="headerlink" title="用户及权限操作语句"></a><a href="https://dev.mysql.com/doc/refman/8.0/en/account-management-statements.html" target="_blank" rel="noopener">用户及权限操作语句</a></h1><ul>
<li><p>数据库 </p>
<ul>
<li><p>创建数据库       </p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database if not exists testdb </span><br><span class="line">default character set utf8 </span><br><span class="line">default collate utf8_general_ci;</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://blog.csdn.net/w05980598/article/details/79080381" target="_blank" rel="noopener">mysql字符集 utf8 和utf8mb4 的区别</a></p>
</li>
<li><p>删除数据库</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop database testdb;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>用户</p>
<ul>
<li><p>创建用户</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user &apos;testdbuser&apos; @&apos;%&apos;;</span><br><span class="line">-- 设置用户密码</span><br><span class="line">alter user &apos;testdbuser&apos; @&apos;%&apos; IDENTIFIED by &apos;123456&apos; ;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除用户</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        drop user &apos;testdbuser&apos; @&apos;%&apos;;</span><br><span class="line">        ```    </span><br><span class="line">- [授权](https://dev.mysql.com/doc/refman/8.0/en/grant.html#grant-database-privileges)</span><br><span class="line">    - 给用户授权</span><br></pre></td></tr></table></figure>

<p>  – 授予testdb数据库下所有权限给testdbuser用户<br>  grant all on testdb.* to ‘testdbuser’ @’%’;</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 移除用户权限</span><br></pre></td></tr></table></figure>

<p>  revoke all on testdb2.* from ‘testdbuser’ @’%’;</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- [角色](https://dev.mysql.com/doc/refman/8.0/en/create-role.html)(mysql8新增)</span><br><span class="line"></span><br><span class="line"># 索引</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p>alter table <code>ratings</code><br>add index <code>rating_restid_index</code> (<code>restid</code>);</p>
<p>show index from <code>ratings</code>;</p>
<p>alter table <code>ratings</code><br>drop index <code>rating_restid_index</code>;</p>
<p>– 设置主键<br>update ratings set id=CONCAT(DATE_FORMAT(createTime,’%Y%m%d%H%i%s’),’-‘,userId,’-‘,restId);<br>alter table ratings add primary key(id); </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># python操作mysql</span><br><span class="line">1.读取数据库列表</span><br><span class="line">```python</span><br><span class="line"># </span><br><span class="line"># python2</span><br><span class="line"># pip install pymysql</span><br><span class="line">#</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">conn=pymysql.connect(host=&apos;192.168.18.147&apos;,user=&apos;testdbuser&apos;,passwd=&apos;testdbuser&apos;,charset=&apos;utf8&apos;,port=3306)</span><br><span class="line"></span><br><span class="line">cur=conn.cursor()</span><br><span class="line"></span><br><span class="line">cur.execute(&apos;show databases&apos;)</span><br><span class="line"></span><br><span class="line">databases=[]</span><br><span class="line">for i in cur:</span><br><span class="line">    databases.append(i)</span><br><span class="line"></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line"> </span><br><span class="line">print (databases)</span><br></pre></td></tr></table></figure>

<p>2.查询</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">conn=pymysql.connect(host=<span class="string">'192.168.18.147'</span>, db=<span class="string">'testdb'</span>,user=<span class="string">'testdbuser'</span>,passwd=<span class="string">'testdbuser'</span>,charset=<span class="string">'utf8'</span>,port=<span class="number">3306</span>)</span><br><span class="line"></span><br><span class="line">stmt = conn.cursor()</span><br><span class="line"></span><br><span class="line">stmt.execute(<span class="string">'select count(1) from ratings'</span>)</span><br><span class="line"></span><br><span class="line">count = stmt.fetchone()</span><br><span class="line"></span><br><span class="line"><span class="comment">#stmt.execute('select * from ratings order by createTime')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#firstObj = stmt.fetchone()</span></span><br><span class="line"><span class="comment">#print (firstObj)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##results = stmt.fetchall()</span></span><br><span class="line"><span class="comment"># for result in results:</span></span><br><span class="line"><span class="comment">#     databases.append(i)</span></span><br><span class="line"></span><br><span class="line">stmt.close()</span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (count)</span><br></pre></td></tr></table></figure>

<h1 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h1><h2 id="从cvs文件导入"><a href="#从cvs文件导入" class="headerlink" title="从cvs文件导入"></a>从cvs文件导入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="1-mysql8-jdbc访问报错-Public-Key-Retrieval-is-not-allowed"><a href="#1-mysql8-jdbc访问报错-Public-Key-Retrieval-is-not-allowed" class="headerlink" title="1. mysql8 jdbc访问报错 Public Key Retrieval is not allowed"></a>1. mysql8 jdbc访问报错 <code>Public Key Retrieval is not allowed</code></h2><p>设置连接参数 allowPublicKeyRetrieval=true</p>
]]></content>
  </entry>
  <entry>
    <title>nexus3搭建rpm仓库</title>
    <url>/hexoblog/20200501160221.html</url>
    <content><![CDATA[<h1 id="演示场景说明"><a href="#演示场景说明" class="headerlink" title="演示场景说明"></a>演示场景说明</h1><p>使用yum给不连外网的主机安装mysql数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install --downloadonly --downloaddir=/packages/ol6 mysql-community-server</span><br></pre></td></tr></table></figure>

<h1 id="nexus3仓库yum仓库搭建及使用"><a href="#nexus3仓库yum仓库搭建及使用" class="headerlink" title="nexus3仓库yum仓库搭建及使用"></a>nexus3仓库yum仓库搭建及使用</h1><p>1.在联网的机器下载rpm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#yum install --downloadonly --downloaddir=/packages/ol6 oracle-rdbms-server-11gR2-preinstall</span><br></pre></td></tr></table></figure>

<p>2.配置nexus3名称为ol6的yum-hosted类型仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Repodata Depth : 0</span><br></pre></td></tr></table></figure>

<p>3.上传</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ol6 ~]# cat upload.sh </span><br><span class="line">#!/bin/bash</span><br><span class="line"># get all filename in specified path</span><br><span class="line">path=/packages/ol6/</span><br><span class="line">files=$(ls $path)</span><br><span class="line">for filename in $files</span><br><span class="line">do</span><br><span class="line"> echo $filename</span><br><span class="line"> curl -v --user &apos;admin:admin123&apos; --upload-file $&#123;path&#125;/$filename http://192.168.18.1:8081/repository/ol6/$filename </span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>4.下载<br>vi /etc/yum.repo.d/ol6.repo             </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[OL6]</span><br><span class="line">name=OL6</span><br><span class="line">baseurl=http://192.168.18.1:8081/repository/OL6/cdrom/$basearch/</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>nexus3</tag>
        <tag>mysql</tag>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle-RMAN备份与恢复</title>
    <url>/hexoblog/20190723235341.html</url>
    <content><![CDATA[<h1 id="使用RMAN做整库迁移"><a href="#使用RMAN做整库迁移" class="headerlink" title="使用RMAN做整库迁移"></a>使用RMAN做整库迁移</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>将生产环境产生的数据导给测试环境使用(或者在生产库挂掉时使用测试库暂时替代)        </p>
<ul>
<li>生产环境(192.168.18.129)</li>
<li>测试环境(192.168.18.133)</li>
<li>软件环境 Oracle Linux Server release 6.9/oracle11g<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看操作系统类型</span><br><span class="line">$lsb_release -a</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="打开生产库的归档模式"><a href="#打开生产库的归档模式" class="headerlink" title="打开生产库的归档模式"></a>打开生产库的归档模式</h3><pre><code>- 此处使用热备生产库，必须要处于归档模式才行
- 查看是否处于归档模式(已经是归档模式的话跳过此步骤)
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sqlplus /nolog</span><br><span class="line">$conn /as sysdba</span><br><span class="line">SQL&gt;archive log list</span><br></pre></td></tr></table></figure>

- 打开归档模式
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SQL&gt;alter system set log_archive_dest_1=&apos;location=/home/oracle/arch&apos;; # 配置归档文件路径</span><br><span class="line">SQL&gt;alter system set log_archive_format=&apos;arch_sysware_%t_%s_%r.dbf&apos; scope=spfile; #配置归档文件名称格式</span><br><span class="line">SQL&gt;shutdown immediate #一致性关闭数据库</span><br><span class="line">SQL&gt;startup mount #重启到mount</span><br><span class="line">SQL&gt;alter database archivelog; #打开归档模式</span><br><span class="line">SQL&gt;alter database open; #打开数据库</span><br></pre></td></tr></table></figure></code></pre><h3 id="使用RMAN备份生产库"><a href="#使用RMAN备份生产库" class="headerlink" title="使用RMAN备份生产库"></a>使用RMAN备份生产库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$rman target /</span><br><span class="line">RMAN&gt;configure controlfile autobackup on; #备份时会自动controlfile和spfile</span><br><span class="line">RMAN&gt; backup database;</span><br><span class="line"></span><br><span class="line">Starting <span class="keyword">backup</span> <span class="keyword">at</span> <span class="number">24</span>-JUL<span class="number">-19</span></span><br><span class="line"><span class="keyword">using</span> channel ORA_DISK_1</span><br><span class="line">channel ORA_DISK_1: <span class="keyword">starting</span> <span class="keyword">full</span> <span class="keyword">datafile</span> <span class="keyword">backup</span> <span class="keyword">set</span></span><br><span class="line">channel ORA_DISK_1: specifying <span class="keyword">datafile</span>(s) <span class="keyword">in</span> <span class="keyword">backup</span> <span class="keyword">set</span></span><br><span class="line"><span class="keyword">input</span> <span class="keyword">datafile</span> <span class="keyword">file</span> <span class="built_in">number</span>=<span class="number">00004</span> <span class="keyword">name</span>=/u01/app/<span class="keyword">oracle</span>/<span class="keyword">oradata</span>/sysware/users01.dbf</span><br><span class="line"><span class="keyword">input</span> <span class="keyword">datafile</span> <span class="keyword">file</span> <span class="built_in">number</span>=<span class="number">00001</span> <span class="keyword">name</span>=/u01/app/<span class="keyword">oracle</span>/<span class="keyword">oradata</span>/sysware/system01.dbf</span><br><span class="line"><span class="keyword">input</span> <span class="keyword">datafile</span> <span class="keyword">file</span> <span class="built_in">number</span>=<span class="number">00002</span> <span class="keyword">name</span>=/u01/app/<span class="keyword">oracle</span>/<span class="keyword">oradata</span>/sysware/sysaux01.dbf</span><br><span class="line"><span class="keyword">input</span> <span class="keyword">datafile</span> <span class="keyword">file</span> <span class="built_in">number</span>=<span class="number">00003</span> <span class="keyword">name</span>=/u01/app/<span class="keyword">oracle</span>/<span class="keyword">oradata</span>/sysware/undotbs01.dbf</span><br><span class="line">channel ORA_DISK_1: <span class="keyword">starting</span> piece <span class="number">1</span> <span class="keyword">at</span> <span class="number">24</span>-JUL<span class="number">-19</span></span><br><span class="line">channel ORA_DISK_1: finished piece <span class="number">1</span> <span class="keyword">at</span> <span class="number">24</span>-JUL<span class="number">-19</span></span><br><span class="line">piece handle=/u01/app/<span class="keyword">oracle</span>/fast_recovery_area/SYSWARE/backupset/<span class="number">2019</span>_07_24/o1_mf_nnndf_TAG20190724T012348_gmgjo4ls_.bkp tag=TAG20190724T012348 <span class="keyword">comment</span>=<span class="keyword">NONE</span></span><br><span class="line">channel ORA_DISK_1: <span class="keyword">backup</span> <span class="keyword">set</span> <span class="keyword">complete</span>, elapsed <span class="built_in">time</span>: <span class="number">00</span>:<span class="number">00</span>:<span class="number">45</span></span><br><span class="line">Finished <span class="keyword">backup</span> <span class="keyword">at</span> <span class="number">24</span>-JUL<span class="number">-19</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Starting</span> Control <span class="keyword">File</span> <span class="keyword">and</span> <span class="keyword">SPFILE</span> Autobackup <span class="keyword">at</span> <span class="number">24</span>-JUL<span class="number">-19</span></span><br><span class="line">piece handle=/u01/app/<span class="keyword">oracle</span>/fast_recovery_area/SYSWARE/autobackup/<span class="number">2019</span>_07_24/o1_mf_s_1014426897_gmgjpkto_.bkp <span class="keyword">comment</span>=<span class="keyword">NONE</span></span><br><span class="line">Finished Control <span class="keyword">File</span> <span class="keyword">and</span> <span class="keyword">SPFILE</span> Autobackup <span class="keyword">at</span> <span class="number">24</span>-JUL<span class="number">-19</span></span><br></pre></td></tr></table></figure>

<h3 id="将备份文件发送到测试机"><a href="#将备份文件发送到测试机" class="headerlink" title="将备份文件发送到测试机"></a>将备份文件发送到测试机</h3><ul>
<li><p>只备份controlfile和dbf文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$scp /u01/app/oracle/fast_recovery_area/SYSWARE/backupset/2019_07_24/o1_mf_nnndf_TAG20190724T012348_gmgjo4ls_.bkp oracle@192.168.18.133:/u01/app/oracle/fast_recovery_area/SYSWARE/backupset/2019_07_24/o1_mf_nnndf_TAG20190724T012348_gmgjo4ls_.bkp</span><br><span class="line"></span><br><span class="line">$scp /u01/app/oracle/fast_recovery_area/SYSWARE/autobackup/2019_07_24/o1_mf_s_1014426897_gmgjpkto_.bkp oracle@192.168.18.133:/u01/app/oracle/fast_recovery_area/SYSWARE/autobackup/2019_07_24/o1_mf_s_1014426897_gmgjpkto_.bkp</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用生产库pfile参数文件启动测试库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.从生产库生成pfile文件</span><br><span class="line">SQL&gt;create pfile=&apos;/u01/backup/pfile20190724.ora&apos; from spfile;</span><br><span class="line">2.发送到测试机</span><br><span class="line">$ scp /u01/backup/pfile20190724.ora oracle@192.168.18.133:/u01/backup/pfile20190724.ora</span><br><span class="line">3.测试库启动</span><br><span class="line">SQL&gt;startup pfile=&apos;/u01/backup/pfile20190724.ora&apos; #从pfile启动 </span><br><span class="line">SQL&gt;create pfile from spfile; # 恢复从pfile启动</span><br><span class="line">SQL&gt;shutdown immediate</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="将数据恢复测试库并启动"><a href="#将数据恢复测试库并启动" class="headerlink" title="将数据恢复测试库并启动"></a>将数据恢复测试库并启动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RMAN&gt;startup nomount #启动到nomount阶段(便于恢复备份的控制文件)</span><br><span class="line">RMAN&gt;restore controlfile from &apos;/u01/app/oracle/fast_recovery_area/SYSWARE/autobackup/2019_07_24/o1_mf_s_1014426897_gmgjpkto_.bkp&apos;;</span><br><span class="line">RMAN&gt;alter database mount; </span><br><span class="line">RMAN&gt;restore database; #接着加载备份的dbf文件</span><br><span class="line">RMAN&gt;alter database open resetlogs; #打开数据库即可</span><br></pre></td></tr></table></figure>

<p>正常启动就可以验证数据与生产库是否一致了</p>
]]></content>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle-SQL生命周期与体系结构</title>
    <url>/hexoblog/20190716213654.html</url>
    <content><![CDATA[<h1 id="oracle内存结构与SQL处理流程"><a href="#oracle内存结构与SQL处理流程" class="headerlink" title="oracle内存结构与SQL处理流程"></a>oracle内存结构与SQL处理流程</h1><img src="/hexoblog/20190716213654/20190716214121.png" title="oracle数据库的内存结构">
<img src="/hexoblog/20190716213654/20190716213755.png" title="oracle的SQL处理流程">
<h1 id="SQL执行过程"><a href="#SQL执行过程" class="headerlink" title="SQL执行过程"></a>SQL执行过程</h1><h2 id="第1阶段：client发起SQL"><a href="#第1阶段：client发起SQL" class="headerlink" title="第1阶段：client发起SQL"></a>第1阶段：client发起SQL</h2><ol>
<li><p>客户端进程(jdbc/sqlplus)发送SQL查询需求，监听器接收到需求信息发送给服务器进程。服务器进程接收信号，在内存中开辟一块内存区给本次会话（PGA）</p>
</li>
<li><p>将客户端信息存储在本次会话的PGA中</p>
<img src="/hexoblog/20190716213654/20190716215021.png" title="PGA实例模型">

</li>
</ol>
<h2 id="第2阶段：PARSE解析阶段"><a href="#第2阶段：PARSE解析阶段" class="headerlink" title="第2阶段：PARSE解析阶段"></a>第2阶段：PARSE解析阶段</h2><ol>
<li>服务器进程将PGA存储的信息调入SGA中的shared pool中进行解析</li>
</ol>
<ul>
<li>语法解析：检查SQL语句是否符合语法规范(检查机制官方文档没有说明)</li>
<li>语义解析：通过shared pool的dictionary cache检查SQL语句的对象是否存在、字段是否存在、是否有权限等.（dictionary cache找不到相关字典信息就去磁盘数据文件读取）</li>
</ul>
<ol start="2">
<li>生成执行计划</li>
</ol>
<ul>
<li>查询library cache的SHARE SQL AREA（共享SQL区域）是否存在已解析的相同SQL。如果存在，服务器进程直接调用解析树和执行计划到DB BUFFER CACHE执行（软解析）</li>
<li>如果在library cache中的SHARE SQL AREA中不存在已解析的相同SQL,则进行执行计划的生成，并在library cache中分配新的内存区域存储此信息（硬解析）</li>
</ul>
<h2 id="第3阶段：EXEC执行阶段"><a href="#第3阶段：EXEC执行阶段" class="headerlink" title="第3阶段：EXEC执行阶段"></a>第3阶段：EXEC执行阶段</h2><ol>
<li>不管是硬解析还是软解析，服务器进程最终会得到执行计划。并将其调入DATABASE BUFFER CACHE(数据库高速缓冲区缓存，也叫块缓冲区缓存)</li>
<li>按照执行计划，在database buffer cache里面读取相关数据块信息</li>
</ol>
<ul>
<li>如果读取了相关块数据，暂时将数据集合存储database buffer cache。 （result cache是存储复杂的数据、不经常改变的数据,默认是关闭的）  （这一步简称逻辑读）</li>
<li>如果没有读取到，服务器进程去磁盘数据文件读取相关数据块房在database buffer cache中暂时存储下来（这一步简称物理读）</li>
</ul>
<h2 id="第4阶段：FETCH读取-返回数据"><a href="#第4阶段：FETCH读取-返回数据" class="headerlink" title="第4阶段：FETCH读取/返回数据"></a>第4阶段：FETCH读取/返回数据</h2><p>服务器进程将结果集通过监听器返回给客户端进程</p>
<ul>
<li>数据的返回有2个路径，1个通过SDU(SESSION DATA UNIT)返回，第二个路径是如果采用JDBC方式这则直接通过网络传输数据。(资料来源Oracle内核技术揭秘第4.2章节)</li>
</ul>
<h1 id="DML语句执行过程"><a href="#DML语句执行过程" class="headerlink" title="DML语句执行过程"></a>DML语句执行过程</h1><h2 id="第1阶段：client发起SQL-1"><a href="#第1阶段：client发起SQL-1" class="headerlink" title="第1阶段：client发起SQL"></a>第1阶段：client发起SQL</h2><ol>
<li>oracle监听器接收到SQL请求,发送给服务器进程</li>
<li>服务端进程分配PGA，存储本次会话信息</li>
</ol>
<h2 id="第2阶段：PARSE解析阶段-1"><a href="#第2阶段：PARSE解析阶段-1" class="headerlink" title="第2阶段：PARSE解析阶段"></a>第2阶段：PARSE解析阶段</h2><ol>
<li>SGA中的shared pool中进行解析(解析SQL语句的语法、语义)</li>
<li>生成SQL执行计划并存入library cache(已经存在的下次就不再进行解析)</li>
</ol>
<h2 id="第3阶段：EXEC执行阶段-1"><a href="#第3阶段：EXEC执行阶段-1" class="headerlink" title="第3阶段：EXEC执行阶段"></a>第3阶段：EXEC执行阶段</h2><ol>
<li>解析SQL语句得到执行计划,并将被操作数据从磁盘调入database buffer cache</li>
</ol>
<ul>
<li>database buffer cache(数据库高速缓冲区缓存，也叫块缓冲区缓存) 作用：用来缓存从数据文件中读取的数据;延迟写数据文件，减少与磁盘的交互次数</li>
<li>相关数据块信息已经存在，则把数据集合存储在SHARE POOL中的result cache(逻辑读)</li>
<li>相关数据块信息不存在，服务器进程(PGA)去磁盘读取相关数据块并在database buffer cache中暂时存储下来，并将缓存中的结果集存储到result cache(物理读)</li>
</ul>
<ol start="2">
<li>修改database buffer cache数据后，会产生UNDO数据和REDO数据</li>
</ol>
<ul>
<li>DML直接修改的是db buffer cache中的数据块</li>
<li>UNDO是修改前数据，RODO是修改后的数据</li>
</ul>
<ol start="3">
<li>客户端提交(COMMIT)以后，触发LGWR进程将redo log buffer的数据刷入磁盘的物理文件REDO LOG FILE，然后直接给客户端响应DML操作结果</li>
</ol>
<ul>
<li>redo log写入磁盘的同时，将DML修改的数据存入REDO LOG BUFFER和UNDO</li>
<li>LGWR进程将database buffer cache中的脏块(有变更与dbf文件中不一致)写入磁盘</li>
<li>LGWR进程 触发时机:脏块过多或空间不足够写入新数据块; 淘汰策略：LRU</li>
</ul>
]]></content>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle-java连接的问题</title>
    <url>/hexoblog/2019082201531.html</url>
    <content><![CDATA[<h1 id="URL格式"><a href="#URL格式" class="headerlink" title="URL格式"></a>URL格式</h1><p>JDBC连接ORACLE的方法由三种：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式一：jdbc:oracle:thin:@//&lt;host&gt;:&lt;port&gt;/&lt;service_name&gt;</span><br><span class="line">格式二：jdbc:oracle:thin:@&lt;host&gt;:&lt;port&gt;:&lt;SID&gt; </span><br><span class="line">格式三：jdbc:oracle:thin:@&lt;TNSName&gt;</span><br></pre></td></tr></table></figure>

<h1 id="service-name与sid"><a href="#service-name与sid" class="headerlink" title="service_name与sid"></a>service_name与sid</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看实例名称 sid值</span></span><br><span class="line"><span class="keyword">select</span> instance_name <span class="keyword">from</span>  V$<span class="keyword">instance</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看服务名 service_name</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">PARAMETERS</span> service_name;</span><br></pre></td></tr></table></figure>

<p>通常情况下service_name与sid相同(安装的时候可配置为不同名称)，即表示一个服务一个实例；<br>RAC环境下，一个服务会对应多个实例 </p>
]]></content>
  </entry>
  <entry>
    <title>oracle-maven中如何引用ojdbc.jar</title>
    <url>/hexoblog/2019071292629.html</url>
    <content><![CDATA[<h1 id="ojdbc-jar位置"><a href="#ojdbc-jar位置" class="headerlink" title="ojdbc.jar位置"></a>ojdbc.jar位置</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ORACLE_HOME/jdbc/lib/</span><br></pre></td></tr></table></figure>

<h1 id="安装到本地maven仓库"><a href="#安装到本地maven仓库" class="headerlink" title="安装到本地maven仓库"></a>安装到本地maven仓库</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -Dfile=ojdbc5.jar </span><br><span class="line">-DgroupId=com.oracle.jdbc </span><br><span class="line">-DartifactId=ojdbc5 </span><br><span class="line">-Dversion=11.2.04 -Dpackaging=jar</span><br></pre></td></tr></table></figure>

<h1 id="上传到远程nexus仓库"><a href="#上传到远程nexus仓库" class="headerlink" title="上传到远程nexus仓库"></a>上传到远程nexus仓库</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn deploy:deploy-file -Dmaven.test.skip=true </span><br><span class="line">-DgroupId=com.oracle.jdbc </span><br><span class="line">-DartifactId=ojdbc5 </span><br><span class="line">-Dversion=11.2.04 -Dpackaging=jar </span><br><span class="line">-Dfile=ojdbc5.jar </span><br><span class="line">-Durl=http://site/nexus/content/repositories/releases/ </span><br><span class="line">-DrepositoryId=releases</span><br></pre></td></tr></table></figure>

<h1 id="项目pom-xml依赖"><a href="#项目pom-xml依赖" class="headerlink" title="项目pom.xml依赖"></a>项目pom.xml依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle.jdbc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>11.2.04<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- project中指定远程nexus库 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>remoteRepository<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>remoteRepository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://site/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>java</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle-ol6.9安装oracle11gr2</title>
    <url>/hexoblog/20190705220156.html</url>
    <content><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>oracle linux操作系统下载：<a href="http://www.linuxdown.net/OracleLinux/2014/1209/3658.html" target="_blank" rel="noopener">http://www.linuxdown.net/OracleLinux/2014/1209/3658.html</a><br>oracle 11g下载：<a href="https://www.oracle.com/technetwork/database/enterprise-edition/downloads/index.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/database/enterprise-edition/downloads/index.html</a></p>
<h1 id="linux主机名设置"><a href="#linux主机名设置" class="headerlink" title="linux主机名设置"></a>linux主机名设置</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">/etc/sysconfig/network</span><br><span class="line">/etc/hosts</span><br></pre></td></tr></table></figure>

<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><p>本地yum库配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ht01 yum.repos.d]# mkdir -p /mnt/cdrom/</span><br><span class="line">[root@ht01 yum.repos.d]# mount /dev/sr0 /mnt/cdrom</span><br><span class="line">[root@ht01 yum.repos.d]# cat local.repo</span><br><span class="line">[Server]</span><br><span class="line">name=Server</span><br><span class="line">baseurl=file:///mnt/cdrom</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure>

<p>安装依赖</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># yum install gcc* binutils* compat* glibc* ksh* libgcc* libstdc* libaio* make* sysstat* unixODBC* -y</span><br></pre></td></tr></table></figure>

<h1 id="修改limits参数"><a href="#修改limits参数" class="headerlink" title="修改limits参数"></a>修改limits参数</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#vim /etc/security/limits.conf</span><br><span class="line">oracle soft nproc <span class="number">2047</span></span><br><span class="line">oracle hard nproc <span class="number">16384</span></span><br><span class="line">oracle soft nofile <span class="number">1024</span></span><br><span class="line">oracle hard nofile <span class="number">65536</span></span><br><span class="line">oracle soft stack <span class="number">10240</span></span><br></pre></td></tr></table></figure>

<h1 id="修改内核参数"><a href="#修改内核参数" class="headerlink" title="修改内核参数"></a>修改内核参数</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># cp /etc/sysctl.conf /etc/sysctl.conf.bak</span><br><span class="line">#vim /etc/sysctl.conf</span><br><span class="line"><span class="built_in">fs</span>.aio-max-nr = <span class="number">1048576</span></span><br><span class="line"><span class="built_in">fs</span>.file-max = <span class="number">6815744</span></span><br><span class="line">kernel.shmmni = <span class="number">4096</span></span><br><span class="line">kernel.sem = <span class="number">250</span> <span class="number">32000</span> <span class="number">100</span> <span class="number">128</span></span><br><span class="line"><span class="built_in">net</span>.ipv4.ip_local_port_range = <span class="number">9000</span> <span class="number">65500</span></span><br><span class="line"><span class="built_in">net</span>.core.rmem_default = <span class="number">262144</span></span><br><span class="line"><span class="built_in">net</span>.core.rmem_max = <span class="number">4194304</span></span><br><span class="line"><span class="built_in">net</span>.core.wmem_default = <span class="number">262144</span></span><br><span class="line"><span class="built_in">net</span>.core.wmem_max = <span class="number">1048576</span></span><br><span class="line"></span><br><span class="line">#reboot</span><br></pre></td></tr></table></figure>

<h1 id="创建oracle用户及组及安装路径"><a href="#创建oracle用户及组及安装路径" class="headerlink" title="创建oracle用户及组及安装路径"></a>创建oracle用户及组及安装路径</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">groupadd oinstall</span><br><span class="line">groupadd dba</span><br><span class="line">groupadd oper</span><br><span class="line">useradd -g oinstall -G dba,oper oracle</span><br><span class="line"></span><br><span class="line">passwd oracle</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /u01/app/oracle</span><br><span class="line">chown -R oracle:oinstall /u01</span><br><span class="line">chmod -R <span class="number">775</span> /u01/app/oracle</span><br></pre></td></tr></table></figure>

<h1 id="设置oracle用户环境变量"><a href="#设置oracle用户环境变量" class="headerlink" title="设置oracle用户环境变量"></a>设置oracle用户环境变量</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$vi .bashrc</span><br><span class="line">unset TNS_ADMIN</span><br><span class="line">export ORACLE_BASE=/u01/app/oracle</span><br><span class="line">export ORACLE_HOME=$ORACLE_BASE/product/<span class="number">11</span>.<span class="number">2</span>.<span class="number">0</span>/dbhome_1</span><br><span class="line">export ORACLE_SID=PROD</span><br><span class="line">export <span class="built_in">PATH</span>=$ORACLE_HOME/bin:$<span class="built_in">PATH</span></span><br><span class="line"></span><br><span class="line">$ source .bashrc</span><br></pre></td></tr></table></figure>

<h1 id="上传oracle-zip并安装"><a href="#上传oracle-zip并安装" class="headerlink" title="上传oracle.zip并安装"></a>上传oracle.zip并安装</h1><p>unzip ‘*.zip’<br>./runInstaller</p>
<h1 id="启动与关闭"><a href="#启动与关闭" class="headerlink" title="启动与关闭"></a>启动与关闭</h1><p>netca 配置监听</p>
<p>dbca 配置数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">安装字符集选择</span><br><span class="line">SIMPLIFIED CHINESE_CHINA.AL32UTF8</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> nls_database_parameters;</span><br><span class="line"><span class="keyword">select</span> userenv(<span class="string">'language'</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>

<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h2><p><a href="https://www.oracle.com/technetwork/articles/servers-storage-admin/ginnydbinstallonlinux-488779.html" target="_blank" rel="noopener">oracle官方如何简单在线安装的说明</a></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yum -y install oracle-rdbms-server-<span class="number">11</span>gR2-preinstall</span><br></pre></td></tr></table></figure>

<h2 id="SQLplus中del键失效的问题"><a href="#SQLplus中del键失效的问题" class="headerlink" title="SQLplus中del键失效的问题"></a>SQLplus中del键失效的问题</h2><p>安装rlwrap插件</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#vim /etc/yum.repo.d/epel.repo</span><br><span class="line">[epel]</span><br><span class="line">name=Extra Packages <span class="keyword">for</span> Enterprise Linux <span class="number">6</span> - $basearch</span><br><span class="line">baseurl=https://mirrors.aliyun.com/epel/<span class="number">6</span>/$basearch</span><br><span class="line">gpgcheck=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">#yum install rlwrap readline readline-devel</span><br></pre></td></tr></table></figure>

<p>设置sqlplus的系统别名：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">在头部或尾部添加：</span><br><span class="line">$ vim ~/.bashrc</span><br><span class="line">alias sqlplus='rlwrap sqlplus'</span><br><span class="line">alias rman='rlwrap rman'</span><br><span class="line"></span><br><span class="line">$source ~/.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="安装Oracle的时候报SWAP空间不足的处理方法"><a href="#安装Oracle的时候报SWAP空间不足的处理方法" class="headerlink" title="安装Oracle的时候报SWAP空间不足的处理方法"></a>安装Oracle的时候报SWAP空间不足的处理方法</h2><p><a href="https://blog.51cto.com/dbaway/1685300" target="_blank" rel="noopener">https://blog.51cto.com/dbaway/1685300</a></p>
<h2 id="centos7-安装oracle11"><a href="#centos7-安装oracle11" class="headerlink" title="centos7 安装oracle11"></a>centos7 安装oracle11</h2><p><a href="https://cloud.tencent.com/developer/article/1122919" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1122919</a></p>
<h2 id="缺少pdksh-5-2-14-1-i386-rpm"><a href="#缺少pdksh-5-2-14-1-i386-rpm" class="headerlink" title="缺少pdksh-5.2.14-1.i386.rpm"></a>缺少pdksh-5.2.14-1.i386.rpm</h2><p>Oracle 11g RHEL 6.3 <a href="http://blog.itpub.net/31397003/viewspace-2135180/" target="_blank" rel="noopener">http://blog.itpub.net/31397003/viewspace-2135180/</a></p>
<p>centos7缺少包时<code>./runInstaller -ignorePrereq</code>跳过检查安装</p>
<h2 id="Linux7安装11g-Error-in-invoking-target-‘agent-nmhs’-of-makefile"><a href="#Linux7安装11g-Error-in-invoking-target-‘agent-nmhs’-of-makefile" class="headerlink" title="Linux7安装11g Error in invoking target ‘agent nmhs’ of makefile"></a>Linux7安装11g Error in invoking target ‘agent nmhs’ of makefile</h2><p><a href="http://blog.itpub.net/29475508/viewspace-2120836/" target="_blank" rel="noopener">http://blog.itpub.net/29475508/viewspace-2120836/</a></p>
<h2 id="开机启动配置"><a href="#开机启动配置" class="headerlink" title="开机启动配置"></a><a href="https://blog.csdn.net/iteye_5750/article/details/81677891?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">开机启动配置</a></h2><ol>
<li><p>修改/etc/oratab</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysware:/u01/app/oracle/product/11.2.0/dbhome_1:Y</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改dbstart和dbshut脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ORACLE_HOME_LISTNER=$1 修改为</span><br><span class="line">ORACLE_HOME_LISTNER=$ORACLE_HOME</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加开机脚本<br>[root@ol6 ~]# vim /etc/rc.local        </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su - oracle -c &quot;lsnrctl start &amp;&amp; dbstart&quot;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><a href="https://www.jianshu.com/p/46d85ec0a2b1" target="_blank" rel="noopener">su命令用法</a></p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle-体系结构</title>
    <url>/hexoblog/20190706140100.html</url>
    <content><![CDATA[<h1 id="oracle服务"><a href="#oracle服务" class="headerlink" title="oracle服务"></a>oracle服务</h1><p>包括:oracle实例(instance)和数据库(database)</p>
<h2 id="instance"><a href="#instance" class="headerlink" title="instance"></a>instance</h2><p>oracle实例包含服务端进程和服务端内存</p>
<ul>
<li>memory structures SGA 系统全局区</li>
<li>process structures 后台进程<h2 id="database"><a href="#database" class="headerlink" title="database"></a>database</h2>数据库即数据文件 </li>
<li>physical 物理结构</li>
<li>logical 逻辑结构</li>
</ul>
<h1 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h1><h2 id="SGA系统全局区"><a href="#SGA系统全局区" class="headerlink" title="SGA系统全局区"></a>SGA系统全局区</h2><img src="/hexoblog/20190706140100/20190725235032.png" title="SGA组成">

<ul>
<li>被所有server process和background process共享的内存区域，随着实例的启动而分配，一个实例只有一个SGA，共享给所有的会话使用</li>
<li>共有6个基本组件   </li>
</ul>
<h3 id="shared-pool"><a href="#shared-pool" class="headerlink" title="shared pool"></a>shared pool</h3><p>作用：对sql,pl/sql程序进行语法分析、编译、执行的内存区域，存放最近执行的SQL和数据定义</p>
<ol>
<li>library cache <ul>
<li>存放shared SQL area</li>
<li>存放shared PL/SQL area</li>
<li>大小取决于shared pool size    </li>
</ul>
</li>
<li>data dictionary cache</li>
<li>server result cache<ul>
<li>存放服务器端的SQL结果集及PL/SQL函数返回值</li>
</ul>
</li>
</ol>
<h3 id="database-buffer-cache"><a href="#database-buffer-cache" class="headerlink" title="database buffer cache"></a>database buffer cache</h3><p>用来缓存从数据文件中读取的数据;延迟写数据文件，减少与磁盘的交互次数</p>
<h3 id="redo-log-buffer"><a href="#redo-log-buffer" class="headerlink" title="redo log buffer"></a>redo log buffer</h3><p>执行 DML、 DDL 操作时，产生对数据修改的变更向量(db buffer cache 中数据块变化),目的是为了数据库恢复 recover。<br>服务器进程 server process 将对应的变更向量(change vector,CV)记录到 redo log buffer 中.<br>日志条目（ redo entries） 记的不是 sql 本身，而是 sql 执行后对数据库中某个文件某个块做了什么修改（变更向量）。<br>没 commit 的 sql 也记 redo 日志。<br>执行 commit 命令后看到”commit complete”,说明日子已经从日志缓冲区（redo log buffer） 写入到联机日志文件(online redo log file)，由后台进程 LGWR 负责写。</p>
<h3 id="large-pool（可选）"><a href="#large-pool（可选）" class="headerlink" title="large pool（可选）"></a>large pool（可选）</h3><p>为了进行大的后台进程操作而分配的内存空间，与 shared pool 管理不同，主要用于共享服务<br>器模式的 session memory(UGA)、 RMAN 备份恢复以及并行查询等操作。</p>
<h3 id="java-pool（可选）"><a href="#java-pool（可选）" class="headerlink" title="java pool（可选）"></a>java pool（可选）</h3><p>为 java 命令以及应用而分配的内存空间，包含所有 session 指定的 JAVA 代码和数据   </p>
<h3 id="streams-pool（可选）"><a href="#streams-pool（可选）" class="headerlink" title="streams pool（可选）"></a>streams pool（可选）</h3><p>为了 stream process 而分配的内存空间。<br>stream 技术是为了在不同数据库之间共享数据，因此， streams pool 对使用了 stream 数据库特性的系统是重要的。  </p>
<h2 id="PGA程序全局区"><a href="#PGA程序全局区" class="headerlink" title="PGA程序全局区"></a>PGA程序全局区</h2><img src="/hexoblog/20190706140100/20190725235750.png" title="PGA组成">
<p>程序全局区(Program Global Area)简称 PGA，主要用来缓存 oracle 服务器进程和后台进程的数<br>据和控制信息，提供排序、 hash 连接。 PGA 在进程创建时被分配，进程终止时被释放。<br>PGA 是私有的，每一个 server process 和 background process 有自己的 PGA。<br>分三部分：</p>
<h3 id="SQL-工作区（SQL-Work-Area）"><a href="#SQL-工作区（SQL-Work-Area）" class="headerlink" title="SQL 工作区（SQL Work Area） :"></a>SQL 工作区（SQL Work Area） :</h3><p>有几个子区 Sort Area、 Hash Area、 Bitmap Merge Area，<br>作用： 排序操作(order by/group by/distinct/union 等)，多表 hash 连接，位图连接，创建位图等</p>
<h3 id="会话空间（Session-Memory）"><a href="#会话空间（Session-Memory）" class="headerlink" title="会话空间（Session Memory）"></a>会话空间（Session Memory）</h3><p>作用：存放 logon 信息等会话相关的控制信息</p>
<h3 id="私有-SQL-区域（Private-SQL-Area）"><a href="#私有-SQL-区域（Private-SQL-Area）" class="headerlink" title="私有 SQL 区域（Private SQL Area）"></a>私有 SQL 区域（Private SQL Area）</h3><p>作用：存储 server process 执行 SQL 所需要的私有数据和控制结构，如绑定变量等。 它包括固<br>定区域和运行时区域</p>
<h2 id="UGA用户全局区"><a href="#UGA用户全局区" class="headerlink" title="UGA用户全局区"></a>UGA用户全局区</h2><h1 id="进程结构"><a href="#进程结构" class="headerlink" title="进程结构"></a>进程结构</h1><h1 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h1><h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><img src="/hexoblog/20190706140100/20190706140830.jpg" title="oracle 11g体系结构图">]]></content>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle性能优化1</title>
    <url>/hexoblog/20190708152358.html</url>
    <content><![CDATA[<h1 id="SQL执行计划"><a href="#SQL执行计划" class="headerlink" title="SQL执行计划"></a>SQL执行计划</h1><h2 id="explain使用"><a href="#explain使用" class="headerlink" title="explain使用"></a>explain使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SCOTT@PROD&gt; explain plan for SELECT * FROM EMP where ename=&apos;scott&apos;;</span><br><span class="line"></span><br><span class="line">Explained.</span><br><span class="line"></span><br><span class="line">SCOTT@PROD&gt; @?/rdbms/admin/utlxplp</span><br><span class="line"></span><br><span class="line">PLAN_TABLE_OUTPUT</span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line">Plan hash value: 3956160932</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line">| Id  | Operation	  | Name | Rows  | Bytes | Cost (%CPU)| Time	 |</span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line">|   0 | SELECT STATEMENT  |	 |     1 |    38 |     3   (0)| 00:00:01 |</span><br><span class="line">|*  1 |  TABLE ACCESS FULL| EMP  |     1 |    38 |     3   (0)| 00:00:01 |</span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Predicate Information (identified by operation id):</span><br><span class="line">---------------------------------------------------</span><br><span class="line"></span><br><span class="line">   1 - filter(&quot;ENAME&quot;=&apos;scott&apos;)</span><br><span class="line"></span><br><span class="line">13 rows selected.</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">### Operation参数说明       </span><br><span class="line">INDEX UNIQUE SCAN 唯一索引      </span><br><span class="line">TABLE ACCESS FULL 全表扫描      </span><br><span class="line"></span><br><span class="line">### like 模糊查询       </span><br><span class="line">%O% 不走索引(TABLE ACCESS FULL)                  </span><br><span class="line">S% 索引生效(INDEX RANGE SCAN)    </span><br><span class="line"></span><br><span class="line">### 组合索引</span><br><span class="line"></span><br><span class="line">### 位图索引</span><br><span class="line"></span><br><span class="line">### 范围查询</span><br><span class="line">#### between and</span><br><span class="line">```sql</span><br><span class="line">select * from emp where sal &gt;= 5000 AND SAL&lt;= 10000;</span><br><span class="line">select * from emp where sal BETWEEN 5000 AND 10000;</span><br></pre></td></tr></table></figure>

<h4 id="in-exists"><a href="#in-exists" class="headerlink" title="in exists"></a>in exists</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用in筛选数据</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">in</span> (<span class="number">5000</span>, <span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用exists筛选数据</span></span><br><span class="line"><span class="keyword">with</span> sal_values <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="number">5000</span> <span class="keyword">as</span> sal <span class="keyword">from</span> dual</span><br><span class="line">    <span class="keyword">UNION</span></span><br><span class="line">    <span class="keyword">select</span> <span class="number">10000</span> <span class="keyword">as</span> sal <span class="keyword">from</span> dual</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp a <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> * <span class="keyword">from</span> sal_values b <span class="keyword">where</span> b.sal=a.sal );</span><br></pre></td></tr></table></figure>

<ul>
<li>14条数据,筛选值2条<ul>
<li>in =&gt; table access FULL</li>
<li>exists =&gt; SKIP SCAN</li>
</ul>
</li>
</ul>
<h4 id="any-some-all"><a href="#any-some-all" class="headerlink" title="any(some) all"></a>any(some) all</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- any表示条件满足于任意子查询结果的数据(与some作用相同)</span></span><br><span class="line"><span class="comment">-- 查询大于部门平均工资最小值的所有人员</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; <span class="keyword">any</span>(<span class="keyword">select</span> <span class="keyword">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- all表示条件满足于所有子查询结果的数据</span></span><br><span class="line"><span class="comment">-- 查询大于部门平均工资最大值的所有人员</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal&gt; <span class="keyword">all</span>(<span class="keyword">select</span> <span class="keyword">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno);</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/yhoralce/p/7735890.html" target="_blank" rel="noopener">看懂ORACLE执行计划</a><br><a href="https://langgufu.iteye.com/blog/2158163" target="_blank" rel="noopener">Oracle 执行计划（Explain Plan） 说明</a><br><a href="https://blog.csdn.net/wulex/article/details/79394072" target="_blank" rel="noopener">各种Oracle索引类型介绍</a><br><a href="https://docs.oracle.com/cd/E11882_01/server.112/e10822/toc.htm" target="_blank" rel="noopener">Performance Tuning Guide</a></p>
]]></content>
  </entry>
  <entry>
    <title>oracle创建用户及权限分配</title>
    <url>/hexoblog/20190705213951.html</url>
    <content><![CDATA[<h1 id="创建用户、分配权限"><a href="#创建用户、分配权限" class="headerlink" title="创建用户、分配权限"></a>创建用户、分配权限</h1><p>不创建表空间，使用默认表空间USERS(TEMP临时表空间)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> test1 <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> test1 <span class="keyword">ACCOUNT</span> <span class="keyword">UNLOCK</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CONNECT</span>, <span class="keyword">RESOURCE</span>, <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> <span class="keyword">TO</span> test1;</span><br><span class="line"></span><br><span class="line"><span class="comment">--删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> test1 <span class="keyword">CASCADE</span>;</span><br></pre></td></tr></table></figure>

<h1 id="查看用户表空间信息-dba权限的用户"><a href="#查看用户表空间信息-dba权限的用户" class="headerlink" title="查看用户表空间信息(dba权限的用户)"></a>查看用户表空间信息(dba权限的用户)</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看表空间信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DBA_DATA_FILES;</span><br><span class="line"><span class="comment">-- 查看用户信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> DBA_USERS;</span><br></pre></td></tr></table></figure>

<h1 id="查询dbf文件路径"><a href="#查询dbf文件路径" class="headerlink" title="查询dbf文件路径"></a>查询dbf文件路径</h1><p>system表空间路径</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FILE_NAME <span class="keyword">FROM</span> DBA_DATA_FILES <span class="keyword">WHERE</span> FILE_ID=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h1 id="创建临时表空间"><a href="#创建临时表空间" class="headerlink" title="创建临时表空间"></a>创建临时表空间</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLESPACE</span> p2m_624_20171201_temp TEMPFILE</span><br><span class="line">    <span class="string">'/home/oracle/app/oracle/oradata/helowin/p2m_624_20171201_temp2.dbf'</span> <span class="keyword">SIZE</span> <span class="number">32</span> M</span><br><span class="line">        <span class="keyword">AUTOEXTEND</span> <span class="keyword">ON</span> <span class="keyword">NEXT</span> <span class="number">32</span> M <span class="keyword">MAXSIZE</span> <span class="keyword">UNLIMITED</span></span><br><span class="line"><span class="keyword">EXTENT</span> <span class="keyword">MANAGEMENT</span> <span class="keyword">LOCAL</span>;</span><br></pre></td></tr></table></figure>

<h1 id="创建表空间"><a href="#创建表空间" class="headerlink" title="创建表空间"></a>创建表空间</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLESPACE</span> p2m_624_20171201 <span class="keyword">LOGGING</span> <span class="keyword">DATAFILE</span> <span class="string">'/home/oracle/app/oracle/oradata/helowin/p2m_624_20171201.dbf'</span> <span class="keyword">SIZE</span> <span class="number">32</span>M </span><br><span class="line"><span class="keyword">AUTOEXTEND</span> <span class="keyword">ON</span> <span class="keyword">NEXT</span> <span class="number">32</span>M <span class="keyword">MAXSIZE</span> <span class="keyword">UNLIMITED</span> <span class="keyword">EXTENT</span> <span class="keyword">MANAGEMENT</span> <span class="keyword">LOCAL</span>;</span><br></pre></td></tr></table></figure>

<h1 id="创建用户及分配存储空间"><a href="#创建用户及分配存储空间" class="headerlink" title="创建用户及分配存储空间"></a>创建用户及分配存储空间</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> p2m_624_20171201 <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> p2m_624_20171201 <span class="keyword">ACCOUNT</span> <span class="keyword">UNLOCK</span></span><br><span class="line"> <span class="keyword">DEFAULT</span> <span class="keyword">TABLESPACE</span> p2m_624_20171201</span><br><span class="line">    <span class="keyword">TEMPORARY</span> <span class="keyword">TABLESPACE</span> p2m_624_20171201_temp;</span><br></pre></td></tr></table></figure>

<h1 id="给该用户授权"><a href="#给该用户授权" class="headerlink" title="给该用户授权"></a>给该用户授权</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CONNECT</span>, <span class="keyword">RESOURCE</span>, DBA <span class="keyword">TO</span> p2m_624_20171201;</span><br></pre></td></tr></table></figure>

<h1 id="删除用户及表空间"><a href="#删除用户及表空间" class="headerlink" title="删除用户及表空间"></a>删除用户及表空间</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> p2m_624_20171201 <span class="keyword">CASCADE</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLESPACE</span> p2m_624_20171201 <span class="keyword">INCLUDING</span> <span class="keyword">CONTENTS</span> <span class="keyword">AND</span> <span class="keyword">DATAFILES</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLESPACE</span> p2m_624_20171201_temp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询用户拥有的角色</span></span><br><span class="line"><span class="keyword">SELECT</span> GRANTED_ROLE <span class="keyword">FROM</span> DBA_ROLE_PRIVS <span class="keyword">WHERE</span> GRANTEE=$&#123;userName&#125;;</span><br><span class="line"><span class="comment">-- 回收权限权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">CONNECT</span>,<span class="keyword">RESOURCE</span> <span class="keyword">FROM</span> $&#123;userName&#125;;</span><br><span class="line"><span class="comment">-- 删除用户及数据</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> $&#123;userName&#125; <span class="keyword">CASCADE</span>;</span><br><span class="line"><span class="comment">-- 删除表空间及dbf文件</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLESPACE</span> $&#123;<span class="keyword">tableSpace</span>&#125; <span class="keyword">INCLUDING</span> <span class="keyword">CONTENTS</span> <span class="keyword">AND</span> <span class="keyword">DATAFILES</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 处于会话中的用户，强制下线后才能删除(DBA用户才能执行)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SID</span>||<span class="string">','</span>||<span class="built_in">SERIAL</span><span class="comment"># FROM V$SESSION WHERE USERNAME = $&#123;userName&#125;;</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">DISCONNECT</span> <span class="keyword">SESSION</span> <span class="string">'$&#123;SID,SERIAL#&#125;'</span> <span class="keyword">IMMEDIATE</span>;</span><br></pre></td></tr></table></figure>

<h1 id="SQL读取表信息"><a href="#SQL读取表信息" class="headerlink" title="SQL读取表信息"></a>SQL读取表信息</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询用户表</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> USER_TABLES <span class="keyword">WHERE</span> TABLESPACE_NAME=<span class="string">'P2M_P624_20180108'</span>;</span><br><span class="line"><span class="comment">-- 查询表结构定义</span></span><br><span class="line"><span class="keyword">SELECT</span> DBMS_METADATA.GET_DDL(<span class="string">'TABLE'</span>,<span class="string">'PM_DEMANDPLAN'</span>) <span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询表索引</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> USER_INDEXES <span class="keyword">WHERE</span> TABLE_NAME = <span class="keyword">UPPER</span>(<span class="string">'COMMNCT_DISCUSSION'</span>);</span><br><span class="line"><span class="comment">--查询索引定义</span></span><br><span class="line"><span class="keyword">SELECT</span> DBMS_METADATA.GET_DDL(<span class="string">'INDEX'</span>,<span class="string">'SYS_IL0000074598C00003$$'</span>) <span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询视图</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> USER_VIEWS; </span><br><span class="line"></span><br><span class="line"><span class="comment">--查询序列</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> USER_SEQUENCES;</span><br><span class="line"><span class="comment">--查询序列定义</span></span><br><span class="line"><span class="keyword">SELECT</span> DBMS_METADATA.GET_DDL(<span class="string">'SEQUENCE'</span>,<span class="string">'SYSWARE_SEQUENCE'</span>) <span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询函数</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> USER_OBJECTS <span class="keyword">WHERE</span> OBJECT_TYPE=<span class="string">'FUNCTION'</span>;</span><br><span class="line"><span class="comment">--查询函数定义</span></span><br><span class="line"><span class="keyword">SELECT</span> DBMS_METADATA.GET_DDL(<span class="string">'SEQUENCE'</span>,<span class="string">'FUNCTION_NAME'</span>) <span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure>

<h1 id="sqlplus执行sql脚本"><a href="#sqlplus执行sql脚本" class="headerlink" title="sqlplus执行sql脚本"></a>sqlplus执行sql脚本</h1><p>$sqlplus user/pass@servicename&lt;file_name.sql</p>
<h1 id="exp-imp备份数据库"><a href="#exp-imp备份数据库" class="headerlink" title="exp/imp备份数据库"></a>exp/imp备份数据库</h1><p>可以在sqlplus客户端操作(优先使用这种方式备份)</p>
<ol>
<li><p>exp导出用户下所有数据到dmp文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exp P2M_SF_20200310/P2M_SF_20200310@192.168.5.200:1521/sysware1 OWNER=P2M_SF_20200310 file=P2M_SF_20200310.dmp</span><br></pre></td></tr></table></figure>
</li>
<li><p>imp导入到新用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">imp P2M_SF_20200310/P2M_SF_20200310 file=P2M_SF_20200310.dmp full=y ignore=y</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="expdp-impdp备份数据库"><a href="#expdp-impdp备份数据库" class="headerlink" title="expdp/impdp备份数据库"></a>expdp/impdp备份数据库</h1><p>能访问数据库所在的服务器时，可以使用这种方式备份    </p>
<ol>
<li>expdp导出数据库<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SQL&gt;create directory dmpdir as &apos;/data/app/dmpdir&apos;;</span><br><span class="line">SQL&gt;grant read,write on directory dmpdir to P2M_SF_DEV_20200305;</span><br><span class="line">expdp P2M_SF_DEV_20200305/P2M_SF_DEV_20200305 DUMPFILE=P2M_SF_DEV_20200305_02.dmp DIRECTORY=dmpdir</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>2.impdp导入数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">impdp BK_SF_DEV_20200305/BK_SF_DEV_20200305 directory=dmpdir dumpfile=P2M_SF_DEV_20200305_02.dmp remap_schema=P2M_SF_DEV_20200305:BK_SF_DEV_20200305</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle-数据库审计</title>
    <url>/hexoblog/20190908170858.html</url>
    <content><![CDATA[<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p><a href="https://docs.oracle.com/cd/B19306_01/server.102/b14200/statements_4007.htm#i2116021" target="_blank" rel="noopener">https://docs.oracle.com/cd/B19306_01/server.102/b14200/statements_4007.htm#i2116021</a><br>监控特定用户在 数据库里 的 操作</p>
<h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SYS@PROD&gt; show parameter audit</span><br><span class="line"></span><br><span class="line">NAME				     TYPE	 VALUE</span><br><span class="line">------------------------------------ ----------- ------------------------------</span><br><span class="line">audit_file_dest 		     string	 /u01/app/oracle/admin/PROD/adu</span><br><span class="line">						 mp</span><br><span class="line">audit_sys_operations		     boolean	 FALSE</span><br><span class="line">audit_syslog_level		     string</span><br><span class="line">audit_trail			     string	 DB</span><br></pre></td></tr></table></figure>

<h2 id="audit-trail"><a href="#audit-trail" class="headerlink" title="audit_trail"></a>audit_trail</h2><p>参数主要选项<br>1 none 不启用 audit<br>2 db 将审计结果放在数据字典基表 sys.aud$中， (一般用于审计非 sys 用户）<br>db,extended，可以包括绑定变量， CLOB 类型大对象等审计信息。<br>3 os 将审计结果存放到操作系统的文件里， audit_file_dest 指定的位置， 一般用于审计 sys</p>
<h1 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h1><p><a href="https://blog.csdn.net/jaxberwu/article/details/6949226" target="_blank" rel="noopener">https://blog.csdn.net/jaxberwu/article/details/6949226</a></p>
<h2 id="standard-auditing-标准审计"><a href="#standard-auditing-标准审计" class="headerlink" title="standard auditing 标准审计"></a>standard auditing 标准审计</h2><p>默认状况下，oracle 审计是DISABLED，也就是说是没有被激活状态，需要我们来启动它；<br>这里有3个步骤执行标准审计：</p>
<ul>
<li>ENABLE AUDITING  启动auditing机制</li>
<li>定义审计事件 （Define Auditing events）</li>
<li>检测和记录 (Monitoring &amp; recording)</li>
</ul>
<p>标准审计还有3种不同的级别：<br>    - statement level audit<br>    按语句来审计，比如 audit table 会审计数据库中所有的 create table, drop table, truncate table<br>    语句，执行成功或不成功都可审计。<br>    - Privilege Audit<br>    按权限来审计，当用户使用了该权限则被审计，如执行 grant select any table to a; 当用户<br>    a 访问了用户 b 的表时（如 select * from b.t;） 会用到 select any table 权限，故会被审计。用<br>    户访问自己的表不会被审计。<br>    - Obejct-level Audit<br>    按对象审计，只审计 on 关键字指定对象的相关操作，如： aduit alter,delete,drop,insert on<br>    damon.t by scott; 这里会对 damon 用户的 t 表进行审计，但同时使用了 by 子句，所以只会对<br>    scott 用户发起的操作进行审计。</p>
<h2 id="fine-grained-auditing-细粒度审计"><a href="#fine-grained-auditing-细粒度审计" class="headerlink" title="fine-grained auditing  细粒度审计"></a>fine-grained auditing  细粒度审计</h2><p>拓展了标准数据库审计，捕捉准确的 SQL 语句。审计访问特定行或特定列。操作可以使<br>用 dbms_fga 包。精细审计一般不包括 sys 用户，目前 EM 中只有标准数据库审计，还没有包<br>括基于值的审计和精细审计。</p>
<h2 id="value-based-auditing-基于值的审计"><a href="#value-based-auditing-基于值的审计" class="headerlink" title="value-based auditing  基于值的审计"></a>value-based auditing  基于值的审计</h2><p>它拓展了标准数据库审计，不仅捕捉审计事件，还捕捉那些被 insert,update 和 delete 的<br>值。 由于基于值的审计是通过触发器来实现。所以可以选择哪些信息进入审计记录，比如，<br>只记录提交的信息。</p>
]]></content>
  </entry>
  <entry>
    <title>oracle 日期类型处理</title>
    <url>/hexoblog/20190705162605.html</url>
    <content><![CDATA[<h1 id="建表语句"><a href="#建表语句" class="headerlink" title="建表语句"></a>建表语句</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &quot;ORDERS&quot; </span><br><span class="line">   (	&quot;ORDER_ID&quot; NUMBER(12,0) NOT NULL ENABLE, </span><br><span class="line">	&quot;ORDER_DATE&quot; TIMESTAMP (6) NOT NULL ENABLE, </span><br><span class="line">	&quot;ORDER_MODE&quot; VARCHAR2(8 BYTE), </span><br><span class="line">	&quot;CUSTOMER_ID&quot; NUMBER(6,0) NOT NULL ENABLE, </span><br><span class="line">	&quot;ORDER_TOTAL&quot; NUMBER(8,2)</span><br><span class="line">   ) ;</span><br></pre></td></tr></table></figure>

<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- SQL 错误: ORA-01843: 无效的月份</span><br><span class="line">INSERT INTO ORDERS VALUES(1, &apos;09-mar-2007&apos;, &apos;online&apos;, &apos;&apos;, 1000);</span><br><span class="line">-- SQL 错误: ORA-01400: 无法将 NULL 插入 (&quot;SCOTT&quot;.&quot;ORDERS&quot;.&quot;ORDER_DATE&quot;)</span><br><span class="line">INSERT INTO ORDERS VALUES(2, TO_DATE(NULL), &apos;online&apos;, &apos;1&apos;, 1000);</span><br><span class="line">-- SQL 错误: ORA-01722: 无效数字</span><br><span class="line">INSERT INTO ORDERS VALUES(3, TO_DATE(SYSDATE), &apos;online&apos;, &apos; &apos;, 1000);</span><br><span class="line">-- SQL 错误: ORA-01400: 无法将 NULL 插入 (&quot;SCOTT&quot;.&quot;ORDERS&quot;.&quot;CUSTOMER_ID&quot;)</span><br><span class="line">INSERT INTO ORDERS VALUES(3, TO_DATE(SYSDATE), &apos;online&apos;, &apos;&apos;, 1000);</span><br><span class="line">--SUCCESS varchar2默认转number</span><br><span class="line">INSERT INTO ORDERS VALUES(4, TO_DATE(SYSDATE), &apos;online&apos;, &apos;1&apos;, 1000);</span><br><span class="line"></span><br><span class="line">-- DEFAULT是默认值,非空字段可使用</span><br><span class="line">INSERT INTO ORDERS VALUES(5, TO_DATE(SYSDATE), DEFAULT, 101, DEFAULT);</span><br><span class="line"></span><br><span class="line">INSERT INTO ORDERS VALUES(6, to_date(&apos;2019-07-02&apos;,&apos;yyyy-mm-dd,hh24:mi:ss&apos;), DEFAULT, 101, DEFAULT);</span><br><span class="line">-- 存储时分秒</span><br><span class="line">INSERT INTO ORDERS VALUES(15, to_timestamp(&apos;2005-12-25,13:25:59&apos;,&apos;yyyy-mm-dd,hh24:mi:ss&apos;), DEFAULT, 101, DEFAULT);</span><br><span class="line"></span><br><span class="line">--时间戳/日期/字符串转换</span><br><span class="line">SELECT TO_DATE(&apos;2005-12-25,13:25:59&apos;,&apos;yyyy-mm-dd,hh24:mi:ss&apos;) from DUAL ;</span><br><span class="line">SELECT TO_TIMESTAMP(&apos;2005-12-25,13:25:59&apos;,&apos;yyyy-mm-dd,hh24:mi:ss&apos;) from dual ;</span><br><span class="line">SELECT to_date(&apos;2019-07-02&apos;,&apos;yyyy-mm-dd,hh24:mi:ss&apos;) from dual ;</span><br><span class="line"></span><br><span class="line">SELECT TO_CHAR(ORDER_DATE, &apos;yyyy-mm-dd hh24:mi:ss&apos;) from ORDERS ;</span><br><span class="line"></span><br><span class="line">-- 浮点型数值计算</span><br><span class="line">SELECT SUM(ORDER_TOTAL) FROM ORDERS;</span><br></pre></td></tr></table></figure>

<h1 id="sqldeveloper配置"><a href="#sqldeveloper配置" class="headerlink" title="sqldeveloper配置"></a>sqldeveloper配置</h1><img src="/hexoblog/20190705162605/2019070495711.png" title="图片文字">]]></content>
  </entry>
  <entry>
    <title>python案例1</title>
    <url>/hexoblog/20190705222504.html</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>  将linux服务器上的所有用户执行的历史命令输出到文件</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>将整个处理过程分为两步<br>1、linux上~/.bash_history文件记录着用户的历史命令，读取后输出到文件即可<br>2、/etc/passwd记录着所有用户及其用户目录，遍历即可</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>验证python环境</p>
<p>1、输出python版本号，说明具有python环境 </p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#python -V</span><br></pre></td></tr></table></figure>

<p>2、创建history.py文件<br>  print(‘helo’)</p>
<p>3、运行该脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#python history.py</span><br></pre></td></tr></table></figure>

<p>输出helo说明运行正常</p>
<h3 id="功能实现：读取单个用户历史命令并输出到文件"><a href="#功能实现：读取单个用户历史命令并输出到文件" class="headerlink" title="功能实现：读取单个用户历史命令并输出到文件"></a>功能实现：读取单个用户历史命令并输出到文件</h3><p>输出root用户历史命令到/output/root.log文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">user_name = <span class="string">'root'</span></span><br><span class="line">user_home = <span class="string">'/root'</span></span><br><span class="line">bash_history_file_name = user_home+<span class="string">'/.bash_history'</span></span><br><span class="line">      <span class="comment">## judge bash_history exists ??</span></span><br><span class="line">      <span class="keyword">if</span>(os.path.exists(bash_history_file_name)):</span><br><span class="line">          <span class="comment">## read user bash history from userHome</span></span><br><span class="line">          <span class="keyword">with</span> open(bash_history_file_name, <span class="string">'r'</span>) <span class="keyword">as</span> sourceFile:</span><br><span class="line">              history_datas = sourceFile.read()</span><br><span class="line">              <span class="comment">## wirte bash history info to log file (name with userName)</span></span><br><span class="line">              <span class="keyword">with</span> open(<span class="string">'/output/'</span>+user_name+<span class="string">'.log'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> outputFile:</span><br><span class="line">                  outputFile.write(history_datas)</span><br></pre></td></tr></table></figure>

<h3 id="功能实现：读取所有用户目录"><a href="#功能实现：读取所有用户目录" class="headerlink" title="功能实现：读取所有用户目录"></a>功能实现：读取所有用户目录</h3><p>读取/etc/pwsswd并解析出用户名及用户路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/etc/passwd'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> passwdFile:</span><br><span class="line">  allLines = passwdFile.readlines();</span><br><span class="line">  <span class="keyword">for</span> line <span class="keyword">in</span> allLines:</span><br><span class="line">      userInfo = line.split(<span class="string">":"</span>)</span><br><span class="line">      user_name = userInfo[<span class="number">0</span>] <span class="comment">## get user_name</span></span><br><span class="line">      user_home = userInfo[<span class="number">5</span>] <span class="comment">## get user_home</span></span><br><span class="line">      print(user_name+<span class="string">" "</span>+user_home);</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>读取所有用户的历史命令，并按照不同的用户，并输出到不同日志文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">## read all user and bash home from passwd file</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/etc/passwd'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> passwdFile:</span><br><span class="line">  allLines = passwdFile.readlines();</span><br><span class="line">  <span class="keyword">for</span> line <span class="keyword">in</span> allLines:</span><br><span class="line">      userInfo = line.split(<span class="string">":"</span>)</span><br><span class="line">      user_name = userInfo[<span class="number">0</span>] <span class="comment">## get user_name</span></span><br><span class="line">      user_home = userInfo[<span class="number">5</span>] <span class="comment">## get user_home</span></span><br><span class="line">      <span class="comment">#print(user_name+" "+user_home);</span></span><br><span class="line"></span><br><span class="line">      bash_history_file_name = user_home+<span class="string">'/.bash_history'</span></span><br><span class="line">      <span class="comment">## judge bash_history exists ??</span></span><br><span class="line">      <span class="keyword">if</span>(os.path.exists(bash_history_file_name)):</span><br><span class="line">          <span class="comment">## read user bash history from userHome</span></span><br><span class="line">          <span class="keyword">with</span> open(bash_history_file_name, <span class="string">'r'</span>) <span class="keyword">as</span> sourceFile:</span><br><span class="line">              history_datas = sourceFile.read()</span><br><span class="line">              <span class="comment">## wirte bash history info to log file (name with userName)</span></span><br><span class="line">              <span class="keyword">with</span> open(<span class="string">'/output/'</span>+user_name+<span class="string">'.log'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> outputFile:</span><br><span class="line">                  outputFile.write(history_datas)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python案例2</title>
    <url>/hexoblog/20190705223434.html</url>
    <content><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>在新安装的linux系统服务器上要安装多个不同用户权限的应用,<br>如何批量创建用户、初始化工作目录</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>1.使用配置文件来记录applications、os user、workspace权限等信息<br>如配置文件config-app1内容如下：<br>os_user=user1 操作系统用户名<br>workspace=/home/apps/app1<br>service_group=common    </p>
<p>2.使用python调用os命令创建文件夹、用户、分配权限</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os;</span><br><span class="line"></span><br><span class="line"><span class="comment">##判断用户是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">userExis</span><span class="params">(username)</span> :</span></span><br><span class="line">    flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"/etc/passwd"</span>, <span class="string">'r'</span>) <span class="keyword">as</span> passwdFile:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> passwdFile.readlines():</span><br><span class="line">            <span class="keyword">if</span>(line.split(<span class="string">":"</span>)[<span class="number">0</span>]==username): <span class="comment">##判断该用户是否存在</span></span><br><span class="line">                flag = <span class="number">1</span>; </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 获取工作目录</span></span><br><span class="line">workdir = os.path.abspath(os.getcwd() + os.path.sep + <span class="string">".."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 遍历conf下的config文件</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(workdir + os.path.sep + <span class="string">"conf"</span>):</span><br><span class="line">    <span class="keyword">if</span>(f.startswith(<span class="string">"config-"</span>)):</span><br><span class="line">        <span class="comment"># file</span></span><br><span class="line">        <span class="keyword">with</span> open(workdir + os.path.sep + <span class="string">"conf"</span>+ os.path.sep+f, <span class="string">'r'</span>) <span class="keyword">as</span> conffile:</span><br><span class="line">            allLines = conffile.readlines();</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> allLines:</span><br><span class="line">                cls = line.split(<span class="string">"="</span>)</span><br><span class="line">                username = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"os_user"</span>==cls[<span class="number">0</span>]):</span><br><span class="line">                    username = cls[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(userExis(username)==<span class="number">0</span>): <span class="comment">## 不存在该用户拒创建用户</span></span><br><span class="line">                    os.system(<span class="string">"useradd "</span>+username); </span><br><span class="line"></span><br><span class="line">                os.mkdir(<span class="string">"/home/apps/"</span>+username)</span><br><span class="line">                os.chown(<span class="string">"/home/apps/"</span>+username, username)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python环境及工具安装</title>
    <url>/hexoblog/20201111114239.html</url>
    <content><![CDATA[<h1 id="安装python运行环境"><a href="#安装python运行环境" class="headerlink" title="安装python运行环境"></a>安装python运行环境</h1><ul>
<li>windows<br>  <a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">https://www.python.org/downloads/windows/</a></li>
<li>linux</li>
</ul>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><ul>
<li>查看版本 <code>pip --version</code></li>
<li>升级版本 <code>pip install --upgrade pip</code></li>
</ul>
<h2 id="jupter"><a href="#jupter" class="headerlink" title="jupter"></a>jupter</h2><p><a href="https://www.jianshu.com/p/91365f343585" target="_blank" rel="noopener">https://www.jianshu.com/p/91365f343585</a></p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot使用</title>
    <url>/hexoblog/20201221113358.html</url>
    <content><![CDATA[<h1 id="配置统一的错误页面"><a href="#配置统一的错误页面" class="headerlink" title="配置统一的错误页面"></a>配置统一的错误页面</h1><ol>
<li><p>默认读取静态资源/static/error/500.html页面</p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># applicaiton.yml</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">error:</span> </span><br><span class="line">        <span class="attr">path:</span> <span class="string">/error</span>  <span class="comment"># 默认读取该目前下的404/500页面</span></span><br><span class="line">        <span class="attr">include-stacktrace:</span> <span class="string">always</span> <span class="comment"># 堆栈信息</span></span><br><span class="line">        <span class="attr">include-exception:</span> <span class="literal">true</span>  <span class="comment"># 异常信息</span></span><br><span class="line"><span class="string">```</span>     </span><br><span class="line"></span><br><span class="line"><span class="string">内置的异常信息类`org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController`</span></span><br></pre></td></tr></table></figure>

 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2.</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>“timestamp” -&gt; {Date@10456} “Mon Dec 21 14:14:12 CST 2020”<br>“status” -&gt; {Integer@10457} 404<br>“error” -&gt; “Not Found”<br>“message” -&gt; “No message available”<br>“path” -&gt; “/test/findAll”<br>```</p>
]]></content>
  </entry>
  <entry>
    <title>uml</title>
    <url>/hexoblog/20200614155951.html</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1P741127u7/?p=2" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1P741127u7/?p=2</a><br><a href="https://mermaid-js.github.io/mermaid/#/classDiagram" target="_blank" rel="noopener">https://mermaid-js.github.io/mermaid/#/classDiagram</a>             </p>
<h1 id="class"><a href="#class" class="headerlink" title="class"></a>class</h1><p>class ==&gt; 模型<br>属性可见性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+ public</span><br><span class="line">- private</span><br><span class="line"># protect</span><br><span class="line">~ package</span><br></pre></td></tr></table></figure>

<p>mermaid写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line"></span><br><span class="line">class ClassA</span><br><span class="line">ClassA: -id int</span><br><span class="line">ClassA: +name String</span><br><span class="line">ClassA: +setAddress(String address) List</span><br></pre></td></tr></table></figure>

<pre class="mermaid">classDiagram

class ClassA
ClassA: -id int
ClassA: +name String
ClassA: +setAddress(String address) List</pre>

<h1 id="relation"><a href="#relation" class="headerlink" title="relation"></a>relation</h1><p>relation ==&gt; 关系</p>
<p>类与类之间关系：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classA继承ClassB</span><br><span class="line">classA --|&gt; classB : Inheritance</span><br><span class="line"></span><br><span class="line">classC --* classD : Composition</span><br><span class="line"></span><br><span class="line">聚合-整体classF与局部classE的关系</span><br><span class="line">classE --o classF : Aggregation</span><br><span class="line"></span><br><span class="line">关联-两个独立个体的关系</span><br><span class="line">classG --&gt; classH : Association</span><br><span class="line"></span><br><span class="line">classI -- classJ : Link(Solid)</span><br><span class="line"></span><br><span class="line">classK ..&gt; classL : Dependency</span><br><span class="line"></span><br><span class="line">classM实现自classN接口</span><br><span class="line">classM ..|&gt; classN : Realization</span><br></pre></td></tr></table></figure>

<pre class="mermaid">classDiagram
classA --|> classB : Inheritance
classC --* classD : Composition
classE --o classF : Aggregation
classG --> classH : Association
classI -- classJ : Link(Solid)
classK ..> classL : Dependency
classM ..|> classN : Realization</pre>]]></content>
  </entry>
  <entry>
    <title>vmware-网络配置</title>
    <url>/hexoblog/2019090495842.html</url>
    <content><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>宿主机 win10 192.168.1.20/(192.168.18.1)<br>虚拟主机 centos6 192.168.18.129<br>保持宿主机与虚拟机能互相ping通，宿主机能连外网时虚拟机也能上外网。</p>
<h1 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h1><h2 id="配置宿主机vmnet8"><a href="#配置宿主机vmnet8" class="headerlink" title="配置宿主机vmnet8"></a>配置宿主机vmnet8</h2><p>VMWARE 编辑 –》 虚拟网络编辑器 –》VMnet8(NAT模式)<br>子网IP：设置为192.168.18.0（255.255.255.0）</p>
<h2 id="虚拟机配置"><a href="#虚拟机配置" class="headerlink" title="虚拟机配置"></a>虚拟机配置</h2><ul>
<li><p>虚拟机设置<br>网络适配器：NAT模式     </p>
</li>
<li><p>虚拟主机网络配置<br>配置静态IP</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[oracle@ol6 network-scripts]$ cat /etc/sysconfig/network-scripts/ifcfg-eth0 </span><br><span class="line">DEVICE=eth0</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">UUID=92f7b188-7580-43ab-adca-00ac97d0784d</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=yes</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=yes</span><br><span class="line">IPV6INIT=no</span><br><span class="line">NAME=&quot;System eth0&quot;</span><br><span class="line">HWADDR=00:0C:29:22:32:C6</span><br><span class="line">IPADDR=192.168.18.129</span><br><span class="line">PREFIX=24</span><br><span class="line">GATEWAY=192.168.18.2</span><br><span class="line">DNS1=192.168.18.2</span><br><span class="line">LAST_CONNECT=1567561851</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>配置动态IP</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[oracle@ol6 network-scripts]$ cat /etc/sysconfig/network-scripts/ifcfg-eth0  </span><br><span class="line">DEVICE=eth0</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">UUID=92f7b188-7580-43ab-adca-00ac97d0784d</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=yes</span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=yes</span><br><span class="line">IPV6INIT=no</span><br><span class="line">NAME=&quot;System eth0&quot;</span><br><span class="line">HWADDR=00:0C:29:22:32:C6</span><br><span class="line">PEERDNS=yes</span><br><span class="line">PEERROUTES=yes</span><br><span class="line">LAST_CONNECT=1567562151</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>webssh使用</title>
    <url>/hexoblog/20200712215544.html</url>
    <content><![CDATA[<h1 id="基于Python"><a href="#基于Python" class="headerlink" title="基于Python"></a>基于Python</h1><p><a href="https://github.com/1603565290m/webssh" target="_blank" rel="noopener">https://github.com/1603565290m/webssh</a></p>
<p><a href="https://pypi.org/project/webssh/" target="_blank" rel="noopener">https://pypi.org/project/webssh/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># yum -y install python-pip</span><br></pre></td></tr></table></figure>

<h1 id="基于java-springboot"><a href="#基于java-springboot" class="headerlink" title="基于java-springboot"></a>基于java-springboot</h1><p><a href="https://github.com/NoCortY/WebSSH" target="_blank" rel="noopener">https://github.com/NoCortY/WebSSH</a></p>
<h1 id="基于nodejs"><a href="#基于nodejs" class="headerlink" title="基于nodejs"></a>基于nodejs</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/billchurch/WebSSH2</span><br><span class="line">cd WebSSH2</span><br><span class="line">npm install --production</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>webssh</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统原理</title>
    <url>/hexoblog/20200505020438.html</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1J7411E7s1" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1J7411E7s1</a>     </p>
<h1 id="分时操作系统"><a href="#分时操作系统" class="headerlink" title="分时操作系统"></a>分时操作系统</h1><h1 id="中断机制"><a href="#中断机制" class="headerlink" title="中断机制"></a>中断机制</h1><h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1>]]></content>
  </entry>
  <entry>
    <title>数据结构-树</title>
    <url>/hexoblog/20200527223039.html</url>
    <content><![CDATA[<h1 id="为啥用树"><a href="#为啥用树" class="headerlink" title="为啥用树"></a>为啥用树</h1><p>存储一组数据 ==》数组 ==》链表 ==》树           </p>
<ul>
<li><p>数组：<br>需要连续的空间(需要指定长度)、扩容时很麻烦        </p>
</li>
<li><p>链表：<br>不需要连续的空间(用指针连接前后节点)、<br>与数组一样，检索时需要遍历      </p>
</li>
<li><p><a href="https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/10905079?fr=aladdin" target="_blank" rel="noopener">二叉排序树 Binary Sort Tree</a><br>比链表检索速度更快(要求key值不能重复)<br>中序遍历即可得到一组排好序的      </p>
</li>
<li><p><a href="https://blog.csdn.net/qq447995687/article/details/95376501" target="_blank" rel="noopener">平衡二叉树 AVL Tree</a><br>二叉排序树对根节点选取要求太高，因为后续插入的节点分布在跟节点两侧，<br>极端情况下（如后续插入的都比跟节点大，全部分布在右侧，就退化成链表了）效率不高；<br>平衡二叉树在插入新节点时会根据负载因子重新选取根节点(为保证根节点在中间,加入新节点时，<br>看起来像在旋转这棵树，让整棵树左右两侧达到平衡，所以叫平衡二叉树)           </p>
</li>
<li><p><a href="https://blog.csdn.net/qfc8930858/article/details/89856274" target="_blank" rel="noopener">红黑树</a><br>根节点为黑色，节点是红色或黑色，所以叫红黑树。<br>红黑树是相对平衡的，比AVL容易实现，又解决了二叉查找树退化成链表的问题</p>
</li>
<li><p><a href="https://blog.csdn.net/Hubery_James/article/details/80565137" target="_blank" rel="noopener">Balance Tree</a><br>多路自平衡搜索树，每个节点允许有多个子节点(每个Node，二叉树里是对象，B树可以用链表实现吧)<br>如磁盘文件管理，不可能所有数据都放到内存吧，用B Tree查找文件时能有效减少与磁盘的交互次数；      </p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_42782897/article/details/89960484" target="_blank" rel="noopener">B+ Tree</a><br>B+ Tree的内节点(非叶子节点)不存储数据(如数据库的索引)，每个内节点数据更多，查找范围更大，<br>进一步减少与磁盘的交互次数(降低了树的高度)</p>
</li>
</ul>
<h1 id="树的应用"><a href="#树的应用" class="headerlink" title="树的应用"></a>树的应用</h1><ul>
<li><p>红黑树<br>java.util.TreeMap </p>
</li>
<li><p>B+ Tree<br>mysql innodb index</p>
</li>
</ul>
<h1 id="JDK集合与数据结构"><a href="#JDK集合与数据结构" class="headerlink" title="JDK集合与数据结构"></a>JDK集合与数据结构</h1><ul>
<li><p>List<br>ArrayList<br>LinkedList</p>
</li>
<li><p>Set<br>HashSet<br>TreeSet</p>
</li>
<li><p>Map<br>HashMap<br>TreeMap     </p>
</li>
<li><p>Queue</p>
</li>
<li><p>Stack</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>汇编与java字节码</title>
    <url>/hexoblog/20200506181923.html</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>搞懂两个数相加的基本原理</p>
<h1 id="汇编实现"><a href="#汇编实现" class="headerlink" title="汇编实现"></a>汇编实现</h1><p><a href="http://c.biancheng.net/view/3463.html" target="_blank" rel="noopener">参考汇编教程</a><br><a href="https://github.com/Evian-Zhang/Assembly-on-macOS" target="_blank" rel="noopener">macOS上的汇编入门</a></p>
<h1 id="java实现"><a href="#java实现" class="headerlink" title="java实现"></a>java实现</h1><p><a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5" target="_blank" rel="noopener">jvm规范-操作码列表</a></p>
<p><a href="https://blog.csdn.net/qzqanzc/article/details/81008598" target="_blank" rel="noopener">jvm内存模型</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JVM内存区域</span><br><span class="line">    |_线程共享</span><br><span class="line">        |_方法区(常量、静态变量、类信息)</span><br><span class="line">        |_堆（存放对象的实例）</span><br><span class="line">    |_线程私有</span><br><span class="line">        |_程序计数器(代码执行到第几行)</span><br><span class="line">        |_虚拟机栈(方法的出入栈)</span><br><span class="line">        |_本地方法栈(native方法)</span><br></pre></td></tr></table></figure>

<h2 id="两个整数相加"><a href="#两个整数相加" class="headerlink" title="两个整数相加"></a>两个整数相加</h2><p>$vim Test.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int a = 3;</span><br><span class="line">        int b = 4;</span><br><span class="line">        int i = a + b;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>$ javac Test.java<br>$ javap -c -l Test</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Compiled from &quot;Test.java&quot;</span><br><span class="line">public class Test &#123;</span><br><span class="line">  public Test();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">       4: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 1: 0</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    Code:</span><br><span class="line">       0: iconst_3  从常量池获取3(int)</span><br><span class="line">       1: istore_1  压入操作数栈位置是1</span><br><span class="line">       2: iconst_4  从常量池获取4(int)</span><br><span class="line">       3: istore_2  压入操作数栈位置是2</span><br><span class="line">       4: iload_1  </span><br><span class="line">       5: iload_2</span><br><span class="line">       6: iadd</span><br><span class="line">       7: istore_3</span><br><span class="line">       8: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      11: iload_3</span><br><span class="line">      12: invokevirtual #3                  // Method java/io/PrintStream.println:(I)V</span><br><span class="line">      15: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 4: 0</span><br><span class="line">      line 5: 2</span><br><span class="line">      line 6: 4</span><br><span class="line">      line 7: 8</span><br><span class="line">      line 8: 15</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><p>$vim Foo.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*boolean flag = true;</span></span><br><span class="line"><span class="comment">        if (flag) System.out.println("Hello, Java!");</span></span><br><span class="line"><span class="comment">        if (flag == true) System.out.println("Hello, JVM!");*/</span></span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        a.setI(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">int</span> c = a.hashCode();</span><br><span class="line">        System.out.println(c);</span><br><span class="line">        System.out.println(a.getI());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setI</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>$javac Foo.java</p>
<p>$javap -c -l Foo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Compiled from &quot;Foo.java&quot;</span><br><span class="line">public class Foo &#123;</span><br><span class="line">  public Foo();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">       4: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 1: 0</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    Code:</span><br><span class="line">       0: new           #2                  // class A 创建对象</span><br><span class="line">       3: dup</span><br><span class="line">       4: invokespecial #3                  // Method A.&quot;&lt;init&gt;&quot;:()V 调用构造方法</span><br><span class="line">       7: astore_1</span><br><span class="line">       8: aload_1</span><br><span class="line">       9: bipush        10</span><br><span class="line">      11: invokevirtual #4                  // Method A.setI:(I)V</span><br><span class="line">      14: aload_1</span><br><span class="line">      15: invokevirtual #5                  // Method A.hashCode:()I</span><br><span class="line">      18: istore_2</span><br><span class="line">      19: getstatic     #6                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      22: iload_2</span><br><span class="line">      23: invokevirtual #7                  // Method java/io/PrintStream.println:(I)V</span><br><span class="line">      26: getstatic     #6                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      29: aload_1</span><br><span class="line">      30: invokevirtual #8                  // Method A.getI:()I</span><br><span class="line">      33: invokevirtual #7                  // Method java/io/PrintStream.println:(I)V</span><br><span class="line">      36: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 6: 0</span><br><span class="line">      line 7: 8</span><br><span class="line">      line 8: 14</span><br><span class="line">      line 9: 19</span><br><span class="line">      line 10: 26</span><br><span class="line">      line 11: 36</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>面试题1</title>
    <url>/hexoblog/20200426153124.html</url>
    <content><![CDATA[<h1 id="01-Zookeeper-部分"><a href="#01-Zookeeper-部分" class="headerlink" title="01 Zookeeper 部分"></a>01 Zookeeper 部分</h1><h2 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h2><h2 id="ZAB协议"><a href="#ZAB协议" class="headerlink" title="ZAB协议"></a>ZAB协议</h2><h2 id="leader选举算法和流程"><a href="#leader选举算法和流程" class="headerlink" title="leader选举算法和流程"></a>leader选举算法和流程</h2><h1 id="02-Redis-部分"><a href="#02-Redis-部分" class="headerlink" title="02 Redis 部分"></a>02 Redis 部分</h1><p>Redis的应用场景<br>Redis支持的数据类型（必考）<br>zset跳表的数据结构（必考）<br>Redis的数据过期策略（必考）<br>Redis的LRU过期策略的具体实现<br>如何解决Redis缓存雪崩，缓存穿透问题<br>Redis的持久化机制（必考）<br>Redis的管道pipeline</p>
<h1 id="03-Mysql-部分"><a href="#03-Mysql-部分" class="headerlink" title="03 Mysql 部分"></a>03 Mysql 部分</h1><p>事务的基本要素<br>事务隔离级别<br>如何解决事务的并发问题(脏读，幻读)？<br>MVCC多版本并发控制？<br>binlog,redolog,undolog都是什么，起什么作用？<br>InnoDB的行锁/表锁？<br>myisam和innodb的区别，什么时候选择myisam？<br>为什么选择B+树作为索引结构？<br>索引B+树的叶子节点都可以存哪些东西？<br>查询在什么时候不走（预期中的）索引？<br>sql如何优化?<br>explain是如何解析sql的？<br>order by原理</p>
<h1 id="04-JVM-部分"><a href="#04-JVM-部分" class="headerlink" title="04 JVM 部分"></a>04 JVM 部分</h1><h2 id="运行时数据区域（内存模型）"><a href="#运行时数据区域（内存模型）" class="headerlink" title="运行时数据区域（内存模型）"></a>运行时数据区域（内存模型）</h2><p>jdk1.7</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JMM</span><br><span class="line">    |_ 线程共有</span><br><span class="line">        |_ 方法区(常量池、类信息)</span><br><span class="line">        |_ 堆(对象实例)</span><br><span class="line">    |_ 线程私有</span><br><span class="line">        |_ 程序计算器(方法执行到第几行)</span><br><span class="line">        |_ 虚拟机栈(方法出入栈)</span><br><span class="line">        |_ 本地方法栈(native方法)</span><br></pre></td></tr></table></figure>

<p>jdk1.8</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JMM </span><br><span class="line">    |_线程公用</span><br><span class="line">        |_ 方法区</span><br><span class="line">        |_ 堆</span><br><span class="line">    |_线程私有</span><br><span class="line">        |_ 程序计数器</span><br><span class="line">        |_ 虚拟机栈</span><br><span class="line">        |_ 本地方法栈</span><br><span class="line">本地内存</span><br><span class="line">|_ 元数据空间MetaSpace</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法区<br>记录</p>
</li>
<li><p>堆<br>数组和对象的实例都分配堆上，也是最容易空间不足的地方。          </p>
</li>
<li><p>程序计数器</p>
</li>
<li><p>虚拟机栈</p>
</li>
<li><p>本地方法栈</p>
</li>
<li><p>元空间</p>
</li>
</ul>
<h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><h2 id="Minor-GC和Full-GC触发条件"><a href="#Minor-GC和Full-GC触发条件" class="headerlink" title="Minor GC和Full GC触发条件"></a>Minor GC和Full GC触发条件</h2><h2 id="GC中Stop-the-world"><a href="#GC中Stop-the-world" class="headerlink" title="GC中Stop the world"></a>GC中Stop the world</h2><h2 id="各垃圾回收器的特点及区别"><a href="#各垃圾回收器的特点及区别" class="headerlink" title="各垃圾回收器的特点及区别"></a>各垃圾回收器的特点及区别</h2><h2 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h2><h2 id="JDBC和双亲委派模型关系"><a href="#JDBC和双亲委派模型关系" class="headerlink" title="JDBC和双亲委派模型关系"></a>JDBC和双亲委派模型关系</h2><h1 id="05-Java-基础部分"><a href="#05-Java-基础部分" class="headerlink" title="05 Java 基础部分"></a>05 Java 基础部分</h1><p>HashMap和ConcurrentHashMap区别<br>ConcurrentHashMap的数据结构<br>高并发HashMap的环是如何产生的？<br>volatile作用<br>Atomic类如何保证原子性（CAS操作）<br>synchronized和Lock的区别<br>为什么要使用线程池？<br>核心线程池ThreadPoolExecutor的参数<br>ThreadPoolExecutor的工作流程<br>如何控制线程池线程的优先级<br>线程之间如何通信<br>Boolean占几个字节<br>jdk1.8/jdk1.7都分别新增了哪些特性？<br>Exception和Error</p>
<h1 id="06-Spring-部分"><a href="#06-Spring-部分" class="headerlink" title="06 Spring 部分"></a>06 Spring 部分</h1><p>Spring的IOC/AOP的实现<br>动态代理的实现方式<br>Spring如何解决循环依赖（三级缓存）<br>Spring的后置处理器<br>Spring的@Transactional如何实现的？<br>Spring的事务传播级别<br>BeanFactory和ApplicationContext的联系和区别</p>
<h1 id="07-其他部分"><a href="#07-其他部分" class="headerlink" title="07 其他部分"></a>07 其他部分</h1><p>高并发系统的限流如何实现？<br>高并发秒杀系统的设计<br>负载均衡如何设计？</p>
]]></content>
  </entry>
  <entry>
    <title>java-designPatterns</title>
    <url>/hexoblog/20200607203815.html</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1RC4y1H7ok/?p=2" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1RC4y1H7ok/?p=2</a><br><a href="https://gitee.com/lixl/web-demo.git" target="_blank" rel="noopener">https://gitee.com/lixl/web-demo.git</a>    </p>
<h1 id="23种设计模式"><a href="#23种设计模式" class="headerlink" title="23种设计模式"></a>23种设计模式</h1><ul>
<li><p>创建型</p>
<ul>
<li>singleton</li>
<li>factory method</li>
<li>abstract factory</li>
<li>builder</li>
<li>prototype</li>
</ul>
</li>
<li><p>结构型</p>
<ul>
<li>adapter</li>
<li>bridge</li>
<li>composite</li>
<li>decorater</li>
<li>facade</li>
<li>flyweight</li>
<li>proxy</li>
</ul>
</li>
<li><p>行为型</p>
<ul>
<li>chain of responsibility</li>
<li>command</li>
<li>interpreter</li>
<li>iterator</li>
<li>mediator</li>
<li>memento</li>
<li>observer</li>
<li>state</li>
<li>strategy</li>
<li>template method</li>
<li>visitor    </li>
</ul>
</li>
</ul>
<h2 id="单例模式singleton"><a href="#单例模式singleton" class="headerlink" title="单例模式singleton"></a>单例模式singleton</h2><h3 id="静态方法单例"><a href="#静态方法单例" class="headerlink" title="静态方法单例"></a>静态方法单例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.p1;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 饱汉单例</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class M1 &#123;</span><br><span class="line"></span><br><span class="line">    private static final M1 instance = new M1();</span><br><span class="line"></span><br><span class="line">    private M1()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static M1 getInstance()&#123;</span><br><span class="line"></span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="静态内部类单例"><a href="#静态内部类单例" class="headerlink" title="静态内部类单例"></a>静态内部类单例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.p1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类实现单例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">M2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//隐藏构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">M2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="number">111</span>);<span class="comment">//不管</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> M2 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> M2Inner.getM2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println("eeee");</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">M2Inner</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> M2 m2 = <span class="keyword">new</span> M2();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">M2Inner</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> M2 <span class="title">getM2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> m2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="DCL单例"><a href="#DCL单例" class="headerlink" title="DCL单例"></a>DCL单例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.p1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒加载-DCL</span></span><br><span class="line"><span class="comment"> * 1.synchronized保证多线程下只创建一个实例</span></span><br><span class="line"><span class="comment"> * 2.volatile 保证不发生指令重排(JIT发生重排时会导致获取的instance为空)</span></span><br><span class="line"><span class="comment">   3.对象创建半初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">M2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> M2 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">M2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> M2 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (M2<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> M2();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="枚举单例"><a href="#枚举单例" class="headerlink" title="枚举单例"></a>枚举单例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.p1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用枚举实现单例</span></span><br><span class="line"><span class="comment"> * Effect java推荐的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> M3 &#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="number">1111</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        M3.INSTANCE.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="spring-bean单例"><a href="#spring-bean单例" class="headerlink" title="spring-bean单例"></a>spring-bean单例</h3><p>Spring创建Bean的scope(prototype/singleton)默认为singleton<br><code>org.springframework.beans.factory.support.DefaultListableBeanFactory#preInstantiateSingletons</code>     </p>
<h2 id="策略模式strategy"><a href="#策略模式strategy" class="headerlink" title="策略模式strategy"></a>策略模式strategy</h2><ul>
<li>java.util.Comparator接口<br><code>java.util.Arrays.sort(T[] a, Comparator&lt;? super T&gt; c)</code><br><code>java.util.Collections.sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)</code>         </li>
</ul>
<p>实现两种策略（通过年龄和重量两种属性排序），通过sort方法调用后给数组排序</p>
<pre class="mermaid">classDiagram
    class java_util_Arrays
    java_util_Arrays: +sort(T[] t, Comparator c)

    class Comparator
    <<interface>> Comparator
    Comparator: +compare(Object o1, Object o2) int

    java_util_Arrays o-- Comparator

    class AnimalAgeComparator
    AnimalAgeComparator: +compare(Object o1, Object o2) int

    class AnimalWeightComparator
    AnimalWeightComparator: +compare(Object o1, Object o2) int

    AnimalAgeComparator ..|> Comparator : impl
    AnimalWeightComparator ..|> Comparator : impl

    class Main
    Main: +execute()

    Main ..> java_util_Arrays : invoke</interface></pre>

<h2 id="工厂模式factory"><a href="#工厂模式factory" class="headerlink" title="工厂模式factory"></a>工厂模式factory</h2><p>1.能生成对象的类或者方法，都是工厂<br>2.单例也是一种工厂模式<br>3.比直接用new创建对象好，可以控制对象的生成过程</p>
<ul>
<li><p>简单工厂<br>与策略模式类似，工厂生产不同的种类的产品，方便控制不同产品生产过程</p>
</li>
<li><p>静态工厂</p>
</li>
<li><p>工厂方法</p>
</li>
<li><p>抽象工厂<br>不直接生产产品，而是调用抽象工厂生产抽象的产品(好像是对不同类型但有些相同点的产品都用抽象工厂来生产)</p>
</li>
<li><p>spring IOC<br>spring-BeanFatory</p>
</li>
</ul>
<h2 id="门面模式-调停者模式"><a href="#门面模式-调停者模式" class="headerlink" title="门面模式/调停者模式"></a>门面模式/调停者模式</h2><p>如消息中间件，可以给各个组件解耦</p>
<h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><p>1.增强某个类的功能，与代理模式相同</p>
<h2 id="观察者模式-observer"><a href="#观察者模式-observer" class="headerlink" title="观察者模式 observer"></a>观察者模式 observer</h2><p>1.Observer、Listener、Hook、Callback、js event 都是观察者模式</p>
<p>2.以事件监听器为例理解<br>SourceEvent 事件源对象，由事件产生<br>EventListener 事件监听者(可以有多个)，接收事件源并处理<br>EventObserver 事件观察者，把事件源对象传递给监听者</p>
<h2 id="组合模式-composite"><a href="#组合模式-composite" class="headerlink" title="组合模式 composite"></a>组合模式 composite</h2><p>封装树形结构的节点<br>如文件：File(file/directory)</p>
<h2 id="享元模式-flywight"><a href="#享元模式-flywight" class="headerlink" title="享元模式 flywight"></a>享元模式 flywight</h2><p>1.共享元对象，不重新创建多个小对象了<br>2.池化思想，如数据库连接池、jvm字符串常量池<br>3.结合composite，如图形组合</p>
<h2 id="责任链-responsibility-chain"><a href="#责任链-responsibility-chain" class="headerlink" title="责任链 responsibility-chain"></a>责任链 responsibility-chain</h2><h3 id="单向链"><a href="#单向链" class="headerlink" title="单向链"></a>单向链</h3><p>验证用户是否有权限时，要依次经过多个不同类型权限验证(AuthHandler)；<br>某一个验证有权限时就停止同时返回true，直到最后一个验证器。</p>
<p>时序图：</p>
<pre class="mermaid">sequenceDiagram
    autonumber
    AuthHandler1-->>AuthHandler2: UserSubject
    AuthHandler2-->>AuthHandler3: UserSubject</pre>

<p>类图：</p>
<pre class="mermaid">classDiagram
    class UserSubject
    UserSubject: +userId
    UserSubject: +userType
    UserSubject: +group...

    class AuthHandler
    <<interfase>> AuthHandler
    AuthHandler: +doValidate(UserSubject userSubject) boolean

    AuthHandler1 ..|>  AuthHandler : impl
    AuthHandler2 ..|>  AuthHandler : impl
    AuthHandler3 ..|>  AuthHandler : impl

    class AuthHandlerChain
    AuthHandlerChain: +authHandlerList List<authhandler>
    AuthHandlerChain: +addAuthHandler(AuthHandler authHandler) AuthHandlerChain
    AuthHandlerChain: +doValidate(UserSubject userSubject) boolean

    AuthHandlerChain ..|>  AuthHandler : impl

    class Main
    Main: authHandlerChain.add(authHandler1).add(authHandler2).add(authHandler3)
    Main: authHandlerChain.doValidate(userSubject)</authhandler></interfase></pre>


<h3 id="双向链"><a href="#双向链" class="headerlink" title="双向链"></a>双向链</h3><p>例如，tomcat的 Filter/FilerChain ， SpringMVC的 HandlerInterceptor</p>
<p>时序图</p>
<pre class="mermaid">sequenceDiagram
    autonumber
    Filter1-->>Filter2: request
    Filter2-->>Filter3: request
    Filter3->>Servlet: request
    Servlet->>Filter3: response
    Filter3-->>Filter2: response
    Filter2-->>Filter1: response</pre>

<p>类图：</p>
<pre class="mermaid">classDiagram
    class Filter
    <<interface>> Filter
    Filter: +doFilter(request, response, filterChain)

    class FilterChain
    FilterChain: -p int
    FilterChain: +doFilter(request, response, filterChain)

    Filter1 ..|>  Filter : impl
    Filter2 ..|>  Filter : impl</interface></pre>


<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>通过代理类去调用代理对象方法        </p>
<pre class="mermaid">classDiagram

class Movable
<<interface>> Movable
Movable: +doMove()

class Tank
Tank: +doMove()

Tank ..|>  Movable : impl

class TankLogProxy
TankLogProxy: -m:Movable
TankLogProxy: +doMove()

TankLogProxy ..|>  Movable : impl

class TankTimeProxy
TankTimeProxy: -m:Movable
TankTimeProxy: +doMove()

TankTimeProxy ..|>  Movable : impl

class Person
Person: -name
Person: +dirveTank()</interface></pre>

<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>静态代理缺点：Proxy类需要明确实现Movable接口，不方便切换为其他类型。<br>如，已经实现好的一个TankLogProxy来打印日志，要想给或者Person也打印日志的话，需要重新实现LogProxy了.   </p>
<p>使用jdk动态代理实现：被代理类要通过接口实现</p>
<pre class="mermaid">classDiagram

class Movable
<<interface>> Movable
Movable: +doMove()

class Tank
Tank: +doMove()

class Person
Person: -name
Person: +eat()
Person: +doMove()

class LogProxy
LogProxy: -target Object
LogProxy: invoke(Object proxy, Method method, Object[] args) Object

Tank ..|>  Movable : impl
Person ..|>  Movable : impl
LogProxy ..|>  InvocationHandler : impl
Person o-- LogProxy
Tank o-- LogProxy</interface></pre>

<p>cglib动态代理实现：被代理接口不需要接口</p>
<h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>spring, aspect oriented programming 面向切面编程        </p>
<p>切面：一组代理对象，组成一个切面<br>切入点：被调用的一个或多个方法，组成一个切入点<br>织入：从切入点出插入切面的操作，叫织入</p>
<p>通过接口实现的类 ==&gt; jdk动态代理 ==》动态生成代理类，通过代理类来调用方法执行<br>被代理类(注意不能为final) ==&gt; cglib(asm) ==》动态生成被代理的子类，通过子类来执行方法       </p>
<h2 id="迭代器-Iterator"><a href="#迭代器-Iterator" class="headerlink" title="迭代器(Iterator)"></a>迭代器(Iterator)</h2><p>Array<br>LinkedList<br>Collection<br>Iterator ==&gt;<br>    hasNext():boolean<br>    next():Object       </p>
<h2 id="访问者模式-Visitor"><a href="#访问者模式-Visitor" class="headerlink" title="访问者模式(Visitor)"></a>访问者模式(Visitor)</h2><p>适合内部结构固定的模型<br>AST(abstract syntex tree 抽象语法树)<br>Tomcat(server.xml)<br>asm(class)      </p>
<h2 id="构造器-builder"><a href="#构造器-builder" class="headerlink" title="构造器(builder)"></a>构造器(builder)</h2><p>分步构造一个复杂对象，每个构造器构造复杂对象的一部分，最好拼接起来</p>
<pre class="mermaid">classDiagram

class Product
Product: +part1
Product: +part2
Product: +part3

class Builder
<<interface>> Builder
Builder: +buildPart1() Builder
Builder: +buildPart2() Builder
Builder: +buildPart3() Builder
Builder: +build() Product

class SimpleBuilder
SimpleBuilder: -product Product
SimpleBuilder: +buildPart1() Builder
SimpleBuilder: +buildPart2() Builder
SimpleBuilder: +buildPart3() Builder
SimpleBuilder: +build() Product

class ComplextBuilder
ComplextBuilder: -product Product
ComplextBuilder: +buildPart1() Builder
ComplextBuilder: +buildPart2() Builder
ComplextBuilder: +buildPart3() Builder
ComplextBuilder: +build() Product

SimpleBuilder ..|>  Builder : impl
ComplextBuilder ..|>  Builder : impl
Builder ..> Product : create</interface></pre>

<h2 id="适配器模式-adapter"><a href="#适配器模式-adapter" class="headerlink" title="适配器模式(adapter)"></a>适配器模式(adapter)</h2><p>适配两种不同的类型</p>
<pre class="mermaid">classDiagram

class FileInputStream
FileInputStream: +read()

class InputStreamReader
InputStreamReader: +read()


class BufferedReader
BufferedReader: +readLine()

FileInputStream -- InputStreamReader
InputStreamReader -- BufferedReader
FileInputStream .. BufferedReader : 不能直接访问</pre>

<h2 id="桥接模式-bridge"><a href="#桥接模式-bridge" class="headerlink" title="桥接模式(bridge)"></a>桥接模式(bridge)</h2><p>m-n  m/n都有多种的时候，使用桥接模式，避免类爆炸</p>
<pre class="mermaid">classDiagram

class MClazz
MClazz: +NClazz
MClazz: +get() MNClazz

class NClazz1
NClazz1: +exec1()

class NClazz2
NClazz2: +exec2()

class NClazz3
NClazz3: +exec3()

NClazz1 ..|>  NClazz : extends
NClazz2 ..|>  NClazz : extends
NClazz3 ..|>  NClazz : extends

MClazz *-- NClazz : Composition</pre>

<h2 id="命令模式-command"><a href="#命令模式-command" class="headerlink" title="命令模式(command)"></a>命令模式(command)</h2><pre class="mermaid">classDiagram

class Command
<<abstract>> Command
Command: -content StringBuilder
Command: +redo()
Command: +undo()


InsertCommand --|> Command
RedoCommand --|> Command
UndoCommand --|> Command</abstract></pre>
<ul>
<li>多个命令组成大的命令：composite(组合)</li>
<li>多次redo命令：chain responseribility(责任链)</li>
<li>trasaction回滚：记忆</li>
</ul>
<h2 id="原型模式-prototype"><a href="#原型模式-prototype" class="headerlink" title="原型模式(prototype)"></a>原型模式(prototype)</h2><p>Object.clone() ==&gt; Cloneable </p>
<ul>
<li>浅copy：引用类型只copy对象地址</li>
<li>深copy：被引用对象实现cloneable接口，组合对象clone方法调用成员对象的clone对象</li>
</ul>
<p>哪些对象需要注意clone</p>
<ul>
<li>基本数据类型 不需要</li>
<li>String 不需要，都是使用的常量池</li>
<li>StringBuilder/StringBuffer 也需要复制一份</li>
<li>引用对象 必须实现clone方法</li>
</ul>
<h2 id="备忘录模式-memento"><a href="#备忘录模式-memento" class="headerlink" title="备忘录模式(memento)"></a>备忘录模式(memento)</h2><p>记录快照 –&gt; 对象序列化(反序列化)<br>serizliable<br>transient</p>
<h2 id="模板方法-TemplateMethod"><a href="#模板方法-TemplateMethod" class="headerlink" title="模板方法(TemplateMethod)"></a>模板方法(TemplateMethod)</h2><p>钩子函数</p>
<h2 id="状态模式-state"><a href="#状态模式-state" class="headerlink" title="状态模式(state)"></a>状态模式(state)</h2><p>swatch case ==转换==&gt; 多个子类</p>
<ul>
<li>有限状态机<br>Thread state</li>
</ul>
<h2 id="解释器（Intepreter）"><a href="#解释器（Intepreter）" class="headerlink" title="解释器（Intepreter）"></a>解释器（Intepreter）</h2><p>动态脚本解释</p>
<h1 id="6大设计原则"><a href="#6大设计原则" class="headerlink" title="6大设计原则"></a>6大设计原则</h1><p>solid稳定的  记忆首字母</p>
<h2 id="单一原则（Single-Responsibility-Principle）"><a href="#单一原则（Single-Responsibility-Principle）" class="headerlink" title="单一原则（Single Responsibility Principle）"></a>单一原则（Single Responsibility Principle）</h2><p>一个类或者一个方法只负责一项职责，尽量做到类的只有一个行为原因引起变化</p>
<h2 id="开闭原则（open-closed-principle）"><a href="#开闭原则（open-closed-principle）" class="headerlink" title="开闭原则（open closed principle）"></a>开闭原则（open closed principle）</h2><p>用抽象构建架构，用实现扩展原则</p>
<h2 id="里氏替换原则（LSP-liskov-substitution-principle）"><a href="#里氏替换原则（LSP-liskov-substitution-principle）" class="headerlink" title="里氏替换原则（LSP liskov substitution principle）"></a>里氏替换原则（LSP liskov substitution principle）</h2><p>子类可以扩展父类的功能，但不能改变原有父类的功能</p>
<h2 id="迪米特原则（law-of-demeter-LOD）"><a href="#迪米特原则（law-of-demeter-LOD）" class="headerlink" title="迪米特原则（law of demeter LOD）"></a>迪米特原则（law of demeter LOD）</h2><p>最少知道原则，尽量降低类与类之间的耦合；</p>
<p>一个对象应该对其他对象有最少的了解</p>
<h2 id="接口隔离（interface-segregation-principle）"><a href="#接口隔离（interface-segregation-principle）" class="headerlink" title="接口隔离（interface segregation principle）"></a>接口隔离（interface segregation principle）</h2><p>建立单一接口；（扩展为类也是一种接口，一切皆接口）</p>
<p>定义：<br>    a.客户端不应该依赖它不需要的接口；<br>    b.类之间依赖关系应该建立在最小的接口上；    </p>
<p>简单理解：复杂的接口，根据业务拆分成多个简单接口；（对于有些业务的拆分多看看适配器的应用）</p>
<p>【接口的设计粒度越小，系统越灵活，但是灵活的同时结构复杂性提高，开发难度也会变大，维护性降低】　</p>
<h2 id="依赖倒置原则（dependence-inversion-principle）"><a href="#依赖倒置原则（dependence-inversion-principle）" class="headerlink" title="依赖倒置原则（dependence inversion principle）"></a>依赖倒置原则（dependence inversion principle）</h2><p>面向接口编程；（通过接口作为参数实现应用场景）</p>
<p>抽象就是接口或者抽象类，细节就是实现类</p>
<p>含义：<br>    上层模块不应该依赖下层模块，两者应依赖其抽象；<br>    抽象不应该依赖细节，细节应该依赖抽象；          </p>
<p>通俗点就是说变量或者传参数，尽量使用抽象类，或者接口；<br>【接口负责定义public属性和方法，并且申明与其他对象依赖关系，抽象类负责公共构造部分的实现，实现类准确的实现业务逻辑】</p>
]]></content>
  </entry>
  <entry>
    <title>java-http代理服务</title>
    <url>/hexoblog/20210520151748.html</url>
    <content><![CDATA[<h1 id="java版本的http代理服务器"><a href="#java版本的http代理服务器" class="headerlink" title="java版本的http代理服务器"></a>java版本的http代理服务器</h1><p><a href="https://gitee.com/lixl/proxyee.git" target="_blank" rel="noopener">https://gitee.com/lixl/proxyee.git</a></p>
<h2 id="基于socket实现"><a href="#基于socket实现" class="headerlink" title="基于socket实现"></a>基于socket实现</h2><ul>
<li><p>使用socket转发http请求</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//连接到目标服务器</span><br><span class="line">proxySocket = new Socket(host, port);</span><br><span class="line">proxyInput = proxySocket.getInputStream();</span><br><span class="line">proxyOutput = proxySocket.getOutputStream();</span><br><span class="line">//根据HTTP method来判断是https还是http请求</span><br><span class="line">if (&quot;CONNECT&quot;.equalsIgnoreCase(type)) &#123;//https先建立隧道</span><br><span class="line">    clientOutput.write(&quot;HTTP/1.1 200 Connection Established\r\n\r\n&quot;.getBytes());</span><br><span class="line">    clientOutput.flush();</span><br><span class="line">&#125; else &#123;//http直接将请求头转发</span><br><span class="line">    proxyOutput.write(headStr.toString().getBytes());</span><br><span class="line">&#125;</span><br><span class="line">//新开线程转发客户端请求至目标服务器</span><br><span class="line">new ProxyHandle(Thread.currentThread().getName(),clientInput, proxyOutput).start();</span><br><span class="line">//转发目标服务器响应至客户端</span><br><span class="line">while (true) &#123;</span><br><span class="line">    clientOutput.write(proxyInput.read());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://my.oschina.net/u/553266/blog/387722/" target="_blank" rel="noopener">访问https地址</a></p>
</li>
<li><p>使用socket转发https请求<br>  创建SocketServer监听端口，根据http请求头方法如果是CONNECT就是HTTPS请求否则都为HTTP请求，<br>  接着根据HOST头建立代理服务器与目标服务器的连接，然后转发数据。<br>  HTTPS请求需要特殊处理,因为CONNECT请求并不需要转发，<br>  要返回一个HTTP 200的响应建立隧道，之后才进行转发。</p>
<ul>
<li><p>http请求头</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /wiki/show HTTP/1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br></pre></td></tr></table></figure>
</li>
<li><p>https请求头</p>
</li>
</ul>
</li>
</ul>
<h2 id="基于nio实现"><a href="#基于nio实现" class="headerlink" title="基于nio实现"></a>基于nio实现</h2><h2 id="基于netty实现"><a href="#基于netty实现" class="headerlink" title="基于netty实现"></a>基于netty实现</h2><h1 id="客户端配置示例"><a href="#客户端配置示例" class="headerlink" title="客户端配置示例"></a>客户端配置示例</h1><h2 id="java客户端通过代理服务器访问网络"><a href="#java客户端通过代理服务器访问网络" class="headerlink" title="java客户端通过代理服务器访问网络"></a>java客户端通过代理服务器访问网络</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.lixl.socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.HttpsURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用http代理服务器(192.168.5.41 9999)访问网站&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 测试场景：</span></span><br><span class="line"><span class="comment">     * 当前机器不能直接访问 my.oschina.net，需要通过5.41机器才能访问</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doHttpClientByProxy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"https://my.oschina.net/u/553266/blog/387722/"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.配置代理服务器</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 方式1</span></span><br><span class="line">        System.setProperty(<span class="string">"proxyPort"</span>, <span class="string">"9999"</span>);</span><br><span class="line">        System.setProperty(<span class="string">"proxyHost"</span>, <span class="string">"192.168.5.41"</span>);</span><br><span class="line">        HttpsURLConnection httpsConn = (HttpsURLConnection) url.openConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式2</span></span><br><span class="line"><span class="comment">//        Proxy proxy1 = new Proxy(Proxy.Type.HTTP, new InetSocketAddress("192.168.5.41", 9999));</span></span><br><span class="line"><span class="comment">//        HttpsURLConnection httpsConn = (HttpsURLConnection) url.openConnection(proxy1);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//某些网站会验证user-agent</span></span><br><span class="line">        httpsConn.setRequestProperty(<span class="string">"user-agent"</span>, <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)"</span>);</span><br><span class="line"></span><br><span class="line">        InputStreamReader insr = <span class="keyword">new</span> InputStreamReader(</span><br><span class="line">                httpsConn.getInputStream());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取服务器的响应内容并显示</span></span><br><span class="line">        <span class="keyword">int</span> respInt = insr.read();</span><br><span class="line">        <span class="keyword">while</span> (respInt != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>) respInt);</span><br><span class="line">            respInt = insr.read();</span><br><span class="line">        &#125;</span><br><span class="line">        insr.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 断开连接</span></span><br><span class="line">        httpsConn.disconnect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="socket基于实现http请求"><a href="#socket基于实现http请求" class="headerlink" title="socket基于实现http请求"></a><a href="https://www.cnblogs.com/langtianya/p/4360631.html" target="_blank" rel="noopener">socket基于实现http请求</a></h2><h2 id="jmeter通过代理服务器访问网络"><a href="#jmeter通过代理服务器访问网络" class="headerlink" title="jmeter通过代理服务器访问网络"></a>jmeter通过代理服务器访问网络</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.shirdrn.java.communications.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * NIO服务端</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shirdrn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NioTcpServer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = Logger.getLogger(NioTcpServer<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">	<span class="keyword">private</span> InetSocketAddress inetSocketAddress;</span><br><span class="line">	<span class="keyword">private</span> Handler handler = <span class="keyword">new</span> ServerHandler();</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">NioTcpServer</span><span class="params">(String hostname, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">		inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(hostname, port);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Selector selector = Selector.open(); <span class="comment">// 打开选择器</span></span><br><span class="line">			ServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); <span class="comment">// 打开通道</span></span><br><span class="line">			serverSocketChannel.configureBlocking(<span class="keyword">false</span>); <span class="comment">// 非阻塞</span></span><br><span class="line">			serverSocketChannel.socket().bind(inetSocketAddress);</span><br><span class="line">			serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT); <span class="comment">// 向通道注册选择器和对应事件标识</span></span><br><span class="line">			log.info(<span class="string">"Server: socket server started."</span>);</span><br><span class="line">			<span class="keyword">while</span>(<span class="keyword">true</span>) &#123; <span class="comment">// 轮询</span></span><br><span class="line">				<span class="keyword">int</span> nKeys = selector.select();</span><br><span class="line">				<span class="keyword">if</span>(nKeys&gt;<span class="number">0</span>) &#123;</span><br><span class="line">					Set&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys();</span><br><span class="line">					Iterator&lt;SelectionKey&gt; it = selectedKeys.iterator();</span><br><span class="line">					<span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">						SelectionKey key = it.next();</span><br><span class="line">						<span class="keyword">if</span>(key.isAcceptable()) &#123;</span><br><span class="line">							log.info(<span class="string">"Server: SelectionKey is acceptable."</span>);</span><br><span class="line">							handler.handleAccept(key);</span><br><span class="line">						&#125; <span class="keyword">else</span> <span class="keyword">if</span>(key.isReadable()) &#123;</span><br><span class="line">							log.info(<span class="string">"Server: SelectionKey is readable."</span>);</span><br><span class="line">							handler.handleRead(key);</span><br><span class="line">						&#125; <span class="keyword">else</span> <span class="keyword">if</span>(key.isWritable()) &#123;</span><br><span class="line">							log.info(<span class="string">"Server: SelectionKey is writable."</span>);</span><br><span class="line">							handler.handleWrite(key);</span><br><span class="line">						&#125;</span><br><span class="line">						it.remove();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 简单处理器接口</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@author</span> shirdrn</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="class"><span class="keyword">interface</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 处理&#123;<span class="doctag">@link</span> SelectionKey#OP_ACCEPT&#125;事件</span></span><br><span class="line"><span class="comment">		 * <span class="doctag">@param</span> key </span></span><br><span class="line"><span class="comment">		 * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">handleAccept</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 处理&#123;<span class="doctag">@link</span> SelectionKey#OP_READ&#125;事件</span></span><br><span class="line"><span class="comment">		 * <span class="doctag">@param</span> key </span></span><br><span class="line"><span class="comment">		 * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">handleRead</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 处理&#123;<span class="doctag">@link</span> SelectionKey#OP_WRITE&#125;事件</span></span><br><span class="line"><span class="comment">		 * <span class="doctag">@param</span> key </span></span><br><span class="line"><span class="comment">		 * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">handleWrite</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 服务端事件处理实现类</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@author</span> shirdrn</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">ServerHandler</span> <span class="keyword">implements</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleAccept</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">			ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();</span><br><span class="line">			SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">			log.info(<span class="string">"Server: accept client socket "</span> + socketChannel);</span><br><span class="line">			socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">			socketChannel.register(key.selector(), SelectionKey.OP_READ);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRead</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">			ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">512</span>);</span><br><span class="line">			SocketChannel socketChannel = (SocketChannel)key.channel();</span><br><span class="line">			<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">				<span class="keyword">int</span> readBytes = socketChannel.read(byteBuffer);</span><br><span class="line">				<span class="keyword">if</span>(readBytes&gt;<span class="number">0</span>) &#123;</span><br><span class="line">					log.info(<span class="string">"Server: readBytes = "</span> + readBytes);</span><br><span class="line">					log.info(<span class="string">"Server: data = "</span> + <span class="keyword">new</span> String(byteBuffer.array(), <span class="number">0</span>, readBytes));</span><br><span class="line">					byteBuffer.flip();</span><br><span class="line">					socketChannel.write(byteBuffer);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			socketChannel.close();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleWrite</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">			ByteBuffer byteBuffer = (ByteBuffer) key.attachment();</span><br><span class="line">			byteBuffer.flip();</span><br><span class="line">			SocketChannel socketChannel = (SocketChannel)key.channel();</span><br><span class="line">			socketChannel.write(byteBuffer);</span><br><span class="line">			<span class="keyword">if</span>(byteBuffer.hasRemaining()) &#123;</span><br><span class="line">				key.interestOps(SelectionKey.OP_READ);</span><br><span class="line">			&#125;</span><br><span class="line">			byteBuffer.compact();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		NioTcpServer server = <span class="keyword">new</span> NioTcpServer(<span class="string">"localhost"</span>, <span class="number">1000</span>);</span><br><span class="line">		server.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.shirdrn.java.communications.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * NIO客户端</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shirdrn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NioTcpClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = Logger.getLogger(NioTcpClient<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">	<span class="keyword">private</span> InetSocketAddress inetSocketAddress;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">NioTcpClient</span><span class="params">(String hostname, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">		inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(hostname, port);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 发送请求数据</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> requestData</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String requestData)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			SocketChannel socketChannel = SocketChannel.open(inetSocketAddress);</span><br><span class="line">			socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">			ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">512</span>);</span><br><span class="line">			socketChannel.write(ByteBuffer.wrap(requestData.getBytes()));</span><br><span class="line">			<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">				byteBuffer.clear();</span><br><span class="line">				<span class="keyword">int</span> readBytes = socketChannel.read(byteBuffer);</span><br><span class="line">				<span class="keyword">if</span> (readBytes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">					byteBuffer.flip();</span><br><span class="line">					log.info(<span class="string">"Client: readBytes = "</span> + readBytes);</span><br><span class="line">					log.info(<span class="string">"Client: data = "</span> + <span class="keyword">new</span> String(byteBuffer.array(), <span class="number">0</span>, readBytes));</span><br><span class="line">					socketChannel.close();</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String hostname = <span class="string">"localhost"</span>;</span><br><span class="line">		String requestData = <span class="string">"Actions speak louder than words!"</span>;</span><br><span class="line">		<span class="keyword">int</span> port = <span class="number">1000</span>;</span><br><span class="line">		<span class="keyword">new</span> NioTcpClient(hostname, port).send(requestData);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>java-命令行参数</title>
    <url>/hexoblog/20200512110000.html</url>
    <content><![CDATA[<h1 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h1><p><code>java -</code> 标准参数<br><code>java -X</code>非标准参数<br><code>java -XX</code>扩展参数<br><code>java -D</code>自定义参数</p>
<p>使用例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java </span><br><span class="line">-Xms750m -Xmx750m 堆内存参数</span><br><span class="line">-Xss1024k 栈内存参数</span><br><span class="line">-XX:MaxPermSize=128m 永久代内存参数</span><br><span class="line">-XX:+UseConcMarkSweepGC -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection gc类型</span><br><span class="line">-XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:/tmp/jvm.log gc日志</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=heapdump.hprof 发生OOM时生成dump文件</span><br><span class="line">-Dfile.encoding=utf-8 -jar /data/app/test.jar</span><br></pre></td></tr></table></figure>

<h1 id="1-7-0-60"><a href="#1-7-0-60" class="headerlink" title="1.7.0_60"></a>1.7.0_60</h1><h2 id="标准参数"><a href="#标准参数" class="headerlink" title="标准参数"></a>标准参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[p2m@localhost test]$ java </span><br><span class="line">用法: java [-options] class [args...]</span><br><span class="line">           (执行类)</span><br><span class="line">   或  java [-options] -jar jarfile [args...]</span><br><span class="line">           (执行 jar 文件)</span><br><span class="line">其中选项包括:</span><br><span class="line">    -d32	  使用 32 位数据模型 (如果可用)</span><br><span class="line">    -d64	  使用 64 位数据模型 (如果可用)</span><br><span class="line">    -server	  选择 &quot;server&quot; VM</span><br><span class="line">                  默认 VM 是 server,</span><br><span class="line">                  因为您是在服务器类计算机上运行。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    -cp &lt;目录和 zip/jar 文件的类搜索路径&gt;</span><br><span class="line">    -classpath &lt;目录和 zip/jar 文件的类搜索路径&gt;</span><br><span class="line">                  用 : 分隔的目录, JAR 档案</span><br><span class="line">                  和 ZIP 档案列表, 用于搜索类文件。</span><br><span class="line">    -D&lt;名称&gt;=&lt;值&gt;</span><br><span class="line">                  设置系统属性</span><br><span class="line">    -verbose:[class|gc|jni]</span><br><span class="line">                  启用详细输出</span><br><span class="line">    -version      输出产品版本并退出</span><br><span class="line">    -version:&lt;值&gt;</span><br><span class="line">                  需要指定的版本才能运行</span><br><span class="line">    -showversion  输出产品版本并继续</span><br><span class="line">    -jre-restrict-search | -no-jre-restrict-search</span><br><span class="line">                  在版本搜索中包括/排除用户专用 JRE</span><br><span class="line">    -? -help      输出此帮助消息</span><br><span class="line">    -X            输出非标准选项的帮助</span><br><span class="line">    -ea[:&lt;packagename&gt;...|:&lt;classname&gt;]</span><br><span class="line">    -enableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;]</span><br><span class="line">                  按指定的粒度启用断言</span><br><span class="line">    -da[:&lt;packagename&gt;...|:&lt;classname&gt;]</span><br><span class="line">    -disableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;]</span><br><span class="line">                  禁用具有指定粒度的断言</span><br><span class="line">    -esa | -enablesystemassertions</span><br><span class="line">                  启用系统断言</span><br><span class="line">    -dsa | -disablesystemassertions</span><br><span class="line">                  禁用系统断言</span><br><span class="line">    -agentlib:&lt;libname&gt;[=&lt;选项&gt;]</span><br><span class="line">                  加载本机代理库 &lt;libname&gt;, 例如 -agentlib:hprof</span><br><span class="line">                  另请参阅 -agentlib:jdwp=help 和 -agentlib:hprof=help</span><br><span class="line">    -agentpath:&lt;pathname&gt;[=&lt;选项&gt;]</span><br><span class="line">                  按完整路径名加载本机代理库</span><br><span class="line">    -javaagent:&lt;jarpath&gt;[=&lt;选项&gt;]</span><br><span class="line">                  加载 Java 编程语言代理, 请参阅 java.lang.instrument</span><br><span class="line">    -splash:&lt;imagepath&gt;</span><br><span class="line">                  使用指定的图像显示启动屏幕</span><br><span class="line">有关详细信息, 请参阅 http://www.oracle.com/technetwork/java/javase/documentation/index.html。</span><br></pre></td></tr></table></figure>

<h2 id="X参数"><a href="#X参数" class="headerlink" title="X参数"></a>X参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[p2m@localhost test]$ java -X</span><br><span class="line">    -Xmixed           混合模式执行 (默认)</span><br><span class="line">    -Xint             仅解释模式执行</span><br><span class="line">    -Xbootclasspath:&lt;用 : 分隔的目录和 zip/jar 文件&gt;</span><br><span class="line">                      设置搜索路径以引导类和资源</span><br><span class="line">    -Xbootclasspath/a:&lt;用 : 分隔的目录和 zip/jar 文件&gt;</span><br><span class="line">                      附加在引导类路径末尾</span><br><span class="line">    -Xbootclasspath/p:&lt;用 : 分隔的目录和 zip/jar 文件&gt;</span><br><span class="line">                      置于引导类路径之前</span><br><span class="line">    -Xdiag            显示附加诊断消息</span><br><span class="line">    -Xnoclassgc       禁用类垃圾收集</span><br><span class="line">    -Xincgc           启用增量垃圾收集</span><br><span class="line">    -Xloggc:&lt;file&gt;    将 GC 状态记录在文件中 (带时间戳)</span><br><span class="line">    -Xbatch           禁用后台编译</span><br><span class="line">    -Xms&lt;size&gt;        设置初始 Java 堆大小</span><br><span class="line">    -Xmx&lt;size&gt;        设置最大 Java 堆大小</span><br><span class="line">    -Xss&lt;size&gt;        设置 Java 线程堆栈大小</span><br><span class="line">    -Xprof            输出 cpu 配置文件数据</span><br><span class="line">    -Xfuture          启用最严格的检查, 预期将来的默认值</span><br><span class="line">    -Xrs              减少 Java/VM 对操作系统信号的使用 (请参阅文档)</span><br><span class="line">    -Xcheck:jni       对 JNI 函数执行其他检查</span><br><span class="line">    -Xshare:off       不尝试使用共享类数据</span><br><span class="line">    -Xshare:auto      在可能的情况下使用共享类数据 (默认)</span><br><span class="line">    -Xshare:on        要求使用共享类数据, 否则将失败。</span><br><span class="line">    -XshowSettings    显示所有设置并继续</span><br><span class="line">    -XshowSettings:all</span><br><span class="line">                      显示所有设置并继续</span><br><span class="line">    -XshowSettings:vm 显示所有与 vm 相关的设置并继续</span><br><span class="line">    -XshowSettings:properties</span><br><span class="line">                      显示所有属性设置并继续</span><br><span class="line">    -XshowSettings:locale</span><br><span class="line">                      显示所有与区域设置相关的设置并继续</span><br><span class="line"></span><br><span class="line">-X 选项是非标准选项, 如有更改, 恕不另行通知。</span><br></pre></td></tr></table></figure>

<h2 id="XX参数"><a href="#XX参数" class="headerlink" title="XX参数"></a>XX参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-XX:+PrintGCDetails 打印gc信息</span><br></pre></td></tr></table></figure>

<h1 id="1-8-0-152"><a href="#1-8-0-152" class="headerlink" title="1.8.0_152"></a>1.8.0_152</h1><h2 id="标准参数-1"><a href="#标准参数-1" class="headerlink" title="标准参数"></a>标准参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\SPC-00D&gt;java</span><br><span class="line">用法: java [-options] class [args...]</span><br><span class="line">           (执行类)</span><br><span class="line">   或  java [-options] -jar jarfile [args...]</span><br><span class="line">           (执行 jar 文件)</span><br><span class="line">其中选项包括:</span><br><span class="line">    -d32          使用 32 位数据模型 (如果可用)</span><br><span class="line">    -d64          使用 64 位数据模型 (如果可用)</span><br><span class="line">    -server       选择 &quot;server&quot; VM</span><br><span class="line">                  默认 VM 是 server.</span><br><span class="line"></span><br><span class="line">    -cp &lt;目录和 zip/jar 文件的类搜索路径&gt;</span><br><span class="line">    -classpath &lt;目录和 zip/jar 文件的类搜索路径&gt;</span><br><span class="line">                  用 ; 分隔的目录, JAR 档案</span><br><span class="line">                  和 ZIP 档案列表, 用于搜索类文件。</span><br><span class="line">    -D&lt;名称&gt;=&lt;值&gt;</span><br><span class="line">                  设置系统属性</span><br><span class="line">    -verbose:[class|gc|jni]</span><br><span class="line">                  启用详细输出</span><br><span class="line">    -version      输出产品版本并退出</span><br><span class="line">    -version:&lt;值&gt;</span><br><span class="line">                  警告: 此功能已过时, 将在</span><br><span class="line">                  未来发行版中删除。</span><br><span class="line">                  需要指定的版本才能运行</span><br><span class="line">    -showversion  输出产品版本并继续</span><br><span class="line">    -jre-restrict-search | -no-jre-restrict-search</span><br><span class="line">                  警告: 此功能已过时, 将在</span><br><span class="line">                  未来发行版中删除。</span><br><span class="line">                  在版本搜索中包括/排除用户专用 JRE</span><br><span class="line">    -? -help      输出此帮助消息</span><br><span class="line">    -X            输出非标准选项的帮助</span><br><span class="line">    -ea[:&lt;packagename&gt;...|:&lt;classname&gt;]</span><br><span class="line">    -enableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;]</span><br><span class="line">                  按指定的粒度启用断言</span><br><span class="line">    -da[:&lt;packagename&gt;...|:&lt;classname&gt;]</span><br><span class="line">    -disableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;]</span><br><span class="line">                  禁用具有指定粒度的断言</span><br><span class="line">    -esa | -enablesystemassertions</span><br><span class="line">                  启用系统断言</span><br><span class="line">    -dsa | -disablesystemassertions</span><br><span class="line">                  禁用系统断言</span><br><span class="line">    -agentlib:&lt;libname&gt;[=&lt;选项&gt;]</span><br><span class="line">                  加载本机代理库 &lt;libname&gt;, 例如 -agentlib:hprof</span><br><span class="line">                  另请参阅 -agentlib:jdwp=help 和 -agentlib:hprof=help</span><br><span class="line">    -agentpath:&lt;pathname&gt;[=&lt;选项&gt;]</span><br><span class="line">                  按完整路径名加载本机代理库</span><br><span class="line">    -javaagent:&lt;jarpath&gt;[=&lt;选项&gt;]</span><br><span class="line">                  加载 Java 编程语言代理, 请参阅 java.lang.instrument</span><br><span class="line">    -splash:&lt;imagepath&gt;</span><br><span class="line">                  使用指定的图像显示启动屏幕</span><br><span class="line">有关详细信息, 请参阅 http://www.oracle.com/technetwork/java/javase/documentation/index.html。</span><br></pre></td></tr></table></figure>

<h2 id="X参数-1"><a href="#X参数-1" class="headerlink" title="X参数"></a>X参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\SPC-00D&gt;java -X</span><br><span class="line">    -Xmixed           混合模式执行 (默认)</span><br><span class="line">    -Xint             仅解释模式执行</span><br><span class="line">    -Xbootclasspath:&lt;用 ; 分隔的目录和 zip/jar 文件&gt;</span><br><span class="line">                      设置搜索路径以引导类和资源</span><br><span class="line">    -Xbootclasspath/a:&lt;用 ; 分隔的目录和 zip/jar 文件&gt;</span><br><span class="line">                      附加在引导类路径末尾</span><br><span class="line">    -Xbootclasspath/p:&lt;用 ; 分隔的目录和 zip/jar 文件&gt;</span><br><span class="line">                      置于引导类路径之前</span><br><span class="line">    -Xdiag            显示附加诊断消息</span><br><span class="line">    -Xnoclassgc       禁用类垃圾收集</span><br><span class="line">    -Xincgc           启用增量垃圾收集</span><br><span class="line">    -Xloggc:&lt;file&gt;    将 GC 状态记录在文件中 (带时间戳)</span><br><span class="line">    -Xbatch           禁用后台编译</span><br><span class="line">    -Xms&lt;size&gt;        设置初始 Java 堆大小</span><br><span class="line">    -Xmx&lt;size&gt;        设置最大 Java 堆大小</span><br><span class="line">    -Xss&lt;size&gt;        设置 Java 线程堆栈大小</span><br><span class="line">    -Xprof            输出 cpu 配置文件数据</span><br><span class="line">    -Xfuture          启用最严格的检查, 预期将来的默认值</span><br><span class="line">    -Xrs              减少 Java/VM 对操作系统信号的使用 (请参阅文档)</span><br><span class="line">    -Xcheck:jni       对 JNI 函数执行其他检查</span><br><span class="line">    -Xshare:off       不尝试使用共享类数据</span><br><span class="line">    -Xshare:auto      在可能的情况下使用共享类数据 (默认)</span><br><span class="line">    -Xshare:on        要求使用共享类数据, 否则将失败。</span><br><span class="line">    -XshowSettings    显示所有设置并继续</span><br><span class="line">    -XshowSettings:all</span><br><span class="line">                      显示所有设置并继续</span><br><span class="line">    -XshowSettings:vm 显示所有与 vm 相关的设置并继续</span><br><span class="line">    -XshowSettings:properties</span><br><span class="line">                      显示所有属性设置并继续</span><br><span class="line">    -XshowSettings:locale</span><br><span class="line">                      显示所有与区域设置相关的设置并继续</span><br><span class="line"></span><br><span class="line">-X 选项是非标准选项, 如有更改, 恕不另行通知。</span><br></pre></td></tr></table></figure>

<h1 id="相关链接地址"><a href="#相关链接地址" class="headerlink" title="相关链接地址"></a>相关链接地址</h1><p><a href="https://developer.oracle.com/java/" target="_blank" rel="noopener">https://developer.oracle.com/java/</a><br><a href="https://www.oracle.com/java/technologies/javase/vmoptions-jsp.html" target="_blank" rel="noopener">Java HotSpot VM Options</a>       </p>
]]></content>
  </entry>
  <entry>
    <title>ocp-071知识点</title>
    <url>/hexoblog/20190731212714.html</url>
    <content><![CDATA[<h1 id="using"><a href="#using" class="headerlink" title="using"></a>using</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DEPTNO,ENAME <span class="keyword">FROM</span> EMP E <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> DEPTNO, DNAME <span class="keyword">FROM</span> DEPT) D <span class="keyword">USING</span>(DEPTNO);</span><br></pre></td></tr></table></figure>

<ul>
<li>可以使用表别名；但using内不能用;select 列不能用别名</li>
<li>using连接两个表的列名必须完全一致</li>
</ul>
<h1 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h1><ul>
<li>count/avg/max/min</li>
<li>avg 参数只能是数值类型</li>
<li>嵌套使用时必须有group by</li>
<li>Where 后面不能用分组函数</li>
</ul>
<h1 id="count"><a href="#count" class="headerlink" title="count"></a>count</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> emp ; <span class="comment">-- 14</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> emp ; <span class="comment">-- 14</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(mgr) <span class="keyword">from</span> emp; <span class="comment">-- 13 </span></span><br><span class="line">说明不统计mgr为null的记录；count * 和 1 都会统计为null的记录。</span><br></pre></td></tr></table></figure>

<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">优先级</span><br><span class="line">算术运算符(即‘+’,‘-’，‘*’,‘/’)                   1</span><br><span class="line">连接运算符（即‘||’）                                2</span><br><span class="line">比较运算符（即‘&gt;’，‘&gt;=’，‘&lt;’，‘&lt;=’，‘&lt;&gt;’）          3</span><br><span class="line">Is [not] null,[not] like,[not] in           4</span><br><span class="line">[not] between-and                       5</span><br><span class="line">not                                     6</span><br><span class="line">and                                      7</span><br><span class="line">or                                      8</span><br></pre></td></tr></table></figure>

<p>可括号改变优先级</p>
<ul>
<li>小于ANY，相当于多个条件or,也相当于小于最大值</li>
<li>小于ALL，相当于多个条件and，也相当于小于最小值</li>
</ul>
<h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><ul>
<li>In(subquery) subquery结果集包含null值时，会自动忽略空值</li>
<li>not in(subquery) subquery结果集包含null值时,主查询会查询不到结果的(no rows)</li>
<li>非相关子查询是独立于外部查询的子查询， 子查询总共执行一次， 执行完毕后将值传递给外部查询。</li>
<li>相关子查询的执行依赖于外部查询的数据， 外部查询执行一行， 子查询就执行一次。</li>
</ul>
<h1 id="提示框"><a href="#提示框" class="headerlink" title="提示框"></a>提示框</h1><p>prompts</p>
<ul>
<li>&amp; 用来创建一个临时变量，每当遇到这个临时变量时，都会提示你输入一个值</li>
<li>&amp;&amp;用来创建一个持久变量，当用&amp;&amp;命令引用这个变量时，不会每次遇到该变量就提示用户键入值，而只是在第一次遇到时提示一次</li>
</ul>
<h1 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h1><ul>
<li><p>插入字符串空值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update dept set loc=&apos;&apos; where deptno=40;</span><br><span class="line">update dept set loc=null where deptno=40;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询空值必须使用is (not) null</p>
</li>
</ul>
<h1 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h1><ul>
<li><p>concat 参数个数不能超过2个，参数类型是字符、数字、日期都行</p>
</li>
<li><p>instr 获取字符在字符串中位置</p>
<ul>
<li>四个参数(被搜索的字符串, 搜索的字符, 开始查找的位置[负数要倒数位置]，出现的次数)</li>
<li>两个参数 [默认第一个字符，从前往后，第一次出现]<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">instr</span>(<span class="string">'helloworld'</span>,<span class="string">'l'</span>) <span class="keyword">from</span> dual; <span class="comment">--返回结果：3    默认第一次出现“l”的位置</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">instr</span>(<span class="string">'helloworld'</span>,<span class="string">'lo'</span>) <span class="keyword">from</span> dual; <span class="comment">--返回结果：4    即：在“lo”中，“l”开始出现的位置</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">instr</span>(<span class="string">'helloworld'</span>,<span class="string">'wo'</span>) <span class="keyword">from</span> dual; <span class="comment">--返回结果：6    即“w”开始出现的位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">instr</span>(<span class="string">'helloworld'</span>,<span class="string">'l'</span>,<span class="number">2</span>,<span class="number">2</span>) <span class="keyword">from</span> dual;  <span class="comment">--返回结果：4    也就是说：在"helloworld"的第2(e)号位置开始，查找第二次出现的“l”的位置</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">instr</span>(<span class="string">'helloworld'</span>,<span class="string">'l'</span>,<span class="number">3</span>,<span class="number">2</span>) <span class="keyword">from</span> dual;  <span class="comment">--返回结果：4    也就是说：在"helloworld"的第3(l)号位置开始，查找第二次出现的“l”的位置</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">instr</span>(<span class="string">'helloworld'</span>,<span class="string">'l'</span>,<span class="number">4</span>,<span class="number">2</span>) <span class="keyword">from</span> dual;  <span class="comment">--返回结果：9    也就是说：在"helloworld"的第4(l)号位置开始，查找第二次出现的“l”的位置</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">instr</span>(<span class="string">'helloworld'</span>,<span class="string">'l'</span>,<span class="number">-1</span>,<span class="number">1</span>) <span class="keyword">from</span> dual;  <span class="comment">--返回结果：9    也就是说：在"helloworld"的倒数第1(d)号位置开始，往回查找第一次出现的“l”的位置</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">instr</span>(<span class="string">'helloworld'</span>,<span class="string">'l'</span>,<span class="number">-2</span>,<span class="number">2</span>) <span class="keyword">from</span> dual;  <span class="comment">--返回结果：4    也就是说：在"helloworld"的倒数第1(d)号位置开始，往回查找第二次出现的“l”的位置</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">instr</span>(<span class="string">'helloworld'</span>,<span class="string">'l'</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="keyword">from</span> dual;  <span class="comment">--返回结果：9    也就是说：在"helloworld"的第2(e)号位置开始，查找第三次出现的“l”的位置</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">instr</span>(<span class="string">'helloworld'</span>,<span class="string">'l'</span>,<span class="number">-2</span>,<span class="number">3</span>) <span class="keyword">from</span> dual; <span class="comment">--返回结果：3    也就是说：在"helloworld"的倒数第2(l)号位置开始，往回查找第三次出现的“l”的位置</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>lpad( string, padded_length, [ pad_string ] )</p>
<ul>
<li>string 准备被填充的字符串</li>
<li>padded_length 填充之后的字符串长度，也就是该函数返回的字符串长度，如果这个数量比原字符串的长度要短，lpad函数将会把字符串截取成从左到右的n个字符</li>
<li>pad_string 填充字符串，是个可选参数，这个字符串是要粘贴到string的左边，如果这个参数未写，lpad函数将会在string的左边粘贴空格。</li>
</ul>
</li>
<li><p>NVL2(exp1,exp2,exp3) </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果 exp1 不为空 ,函数 返回 exp2 的值; </span><br><span class="line">如果 exp2 为空 ,函数 返回 exp3 的值;</span><br></pre></td></tr></table></figure>
</li>
<li><p>NVL(exp1,exp2)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果 exp1 为空 , 函数 返回 exp2 的值 ; </span><br><span class="line">如果 exp1 不为空, 函数 返回 exp1 的值 ; </span><br><span class="line">如果两个参数都为NULL ，则返回NULL</span><br></pre></td></tr></table></figure>
</li>
<li><p>MONTHS_BETWEEN(date1, date2) 两个日期之间相差的月数 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">"PROGRAMS"</span> </span><br><span class="line">   (	<span class="string">"PROG_ID"</span> <span class="built_in">NUMBER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">ENABLE</span>, </span><br><span class="line">	<span class="string">"PROG_COST"</span> <span class="built_in">NUMBER</span>, </span><br><span class="line">	<span class="string">"START_DATE"</span> <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">ENABLE</span>, </span><br><span class="line">	<span class="string">"END_DATE"</span> <span class="built_in">DATE</span></span><br><span class="line">   ) ;</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> PROGRAMS (PROG_ID,PROG_COST,START_DATE,END_DATE) <span class="keyword">values</span> (<span class="number">1</span>,<span class="number">234</span>,<span class="keyword">to_date</span>(<span class="string">'2019-07-09 05:33:50'</span>,<span class="string">'YYYY-MM-DD HH24:MI:SS'</span>),<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> PROGRAMS (PROG_ID,PROG_COST,START_DATE,END_DATE) <span class="keyword">values</span> (<span class="number">2</span>,<span class="number">2</span>,<span class="keyword">to_date</span>(<span class="string">'2019-05-08 05:39:54'</span>,<span class="string">'YYYY-MM-DD HH24:MI:SS'</span>),<span class="keyword">to_date</span>(<span class="string">'2019-08-04 05:40:05'</span>,<span class="string">'YYYY-MM-DD HH24:MI:SS'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 相差几个月</span></span><br><span class="line"><span class="keyword">SELECT</span> MONTHS_BETWEEN (start_date, end_date) <span class="keyword">FROM</span> programs;</span><br></pre></td></tr></table></figure>
</li>
<li><p>INITCAP(string) 首字母大写，其他小写</p>
</li>
</ul>
<h1 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h1><ul>
<li>DDL不能roolback；且隐式提交(自动执行commit)</li>
<li>drop的表会放进回收站、占用空间不回收</li>
<li>会同时删除表上的索引和约束</li>
</ul>
<h1 id="to-char"><a href="#to-char" class="headerlink" title="to_char"></a>to_char</h1><p><a href="https://blog.csdn.net/shangboerds/article/details/46473117" target="_blank" rel="noopener">https://blog.csdn.net/shangboerds/article/details/46473117</a></p>
<ul>
<li>to_char(number, ‘format’)</li>
<li>format=’9,99’ 要大于number位数，否则变为####</li>
<li>千位符和小数点可以与符号G和D互换</li>
<li>小数会进位<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT TO_CHAR(1890.55,&apos;$99G999D99&apos;) FROM DUAL;</span><br><span class="line">--  $1,890.55</span><br><span class="line"></span><br><span class="line">SELECT TO_CHAR(1890.55,&apos;$99,999.99&apos;) FROM DUAL;</span><br><span class="line">--     $1,890.55</span><br><span class="line"></span><br><span class="line">SELECT TO_CHAR(561890.55,&apos;$99G999D99&apos;) FROM DUAL;</span><br><span class="line">-- ###########</span><br><span class="line"></span><br><span class="line">select TO_CHAR(1890.55, &apos;$9,999&apos;) from dual;</span><br><span class="line">--  $1,891</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h1><ul>
<li><p>UNION 和集</p>
</li>
<li><p>UNION ALL 并集</p>
</li>
<li><p>INTERSECT 交集</p>
</li>
<li><p>MINUS 差集</p>
<ul>
<li><p>列个数、类型一致但列名不一致时以前面的名称位置</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> empno <span class="string">"empid"</span>, ename, <span class="string">'a'</span></span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">where</span> empno=<span class="number">7369</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">select</span> empno, ename <span class="string">"empname"</span>, <span class="string">'b'</span></span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">where</span> empno=<span class="number">7566</span></span><br><span class="line"></span><br><span class="line">empid   ENAME   <span class="string">'a'</span></span><br><span class="line"><span class="comment">-----------------</span></span><br><span class="line"><span class="number">7369</span>	SMITH	a</span><br><span class="line"><span class="number">7566</span>	JONES	b</span><br></pre></td></tr></table></figure>
</li>
<li><p>只能在最后order by</p>
</li>
</ul>
</li>
</ul>
<h1 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h1><ul>
<li><p>默认ASC</p>
</li>
<li><p>可以有多个列排序,也可以使用列数代替列名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> empno,ename <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">1</span> <span class="keyword">desc</span>, ename <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>UNION时不能出现在语句中间，只能给union结果排序</p>
</li>
<li><p>nulls last(first)<br>desc时null会当做最大，asc时会当做最小;<br>可以使用nulls改变null值的位置</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ename, comm <span class="keyword">FROM</span> emp <span class="keyword">order</span> <span class="keyword">by</span> comm <span class="keyword">nulls</span> <span class="keyword">first</span> ;</span><br><span class="line"><span class="keyword">SELECT</span> ename, comm <span class="keyword">FROM</span> emp <span class="keyword">order</span> <span class="keyword">by</span> comm <span class="keyword">nulls</span> <span class="keyword">last</span>;</span><br><span class="line"><span class="keyword">SELECT</span> ename, comm <span class="keyword">FROM</span> emp <span class="keyword">order</span> <span class="keyword">by</span> comm <span class="keyword">desc</span> <span class="keyword">nulls</span> <span class="keyword">last</span> ;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="ESCAPE"><a href="#ESCAPE" class="headerlink" title="ESCAPE"></a>ESCAPE</h1><p>转义符号(可以看做escape后边的字符不转义，直接输出)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">users</span></span><br><span class="line"><span class="keyword">WHERE</span> user_name <span class="keyword">LIKE</span> <span class="string">'%ch\_%'</span> ESCAPE <span class="string">' \'</span>;</span><br></pre></td></tr></table></figure>

<h1 id="external-table"><a href="#external-table" class="headerlink" title="external table"></a>external table</h1><ul>
<li>create table as select external_table 语句会生成一个正常的表及数据</li>
</ul>
<h1 id="SEQUENCE"><a href="#SEQUENCE" class="headerlink" title="SEQUENCE"></a>SEQUENCE</h1><ul>
<li><p>如果使用 cache， 关闭数据库时， 所有已生成并缓存， 但还没有发出的数值会丢失</p>
</li>
<li><p>oracle11g 不能作为字段的默认值,12c可以</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- 12c</span></span><br><span class="line"><span class="comment">--结果显示可以插入null、字面值,而不使用sequence的值。插入default值的时候就使用sequence的值。</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> sequence_test_tab(<span class="keyword">id</span> <span class="built_in">number</span> <span class="keyword">default</span> test_seq.nextval);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sequence_test_tab <span class="keyword">values</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sequence_test_tab <span class="keyword">values</span>(<span class="keyword">default</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sequence_test_tab <span class="keyword">values</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 11g不支持，但可以使用触发器达到相同效果</span></span><br><span class="line"><span class="comment">-- 1、表结构中log_id 非空、且为主键字段</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> TL_M_QRTZ_LOG</span><br><span class="line">(</span><br><span class="line">log_id <span class="built_in">NUMBER</span>(<span class="number">8</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">job_id <span class="built_in">NUMBER</span>(<span class="number">8</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">seq_no <span class="built_in">NUMBER</span>(<span class="number">4</span>),</span><br><span class="line">start_time <span class="built_in">DATE</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">end_time <span class="built_in">DATE</span>,</span><br><span class="line">exec_state <span class="built_in">VARCHAR2</span>(<span class="number">256</span>) <span class="keyword">default</span> <span class="string">'0'</span>,</span><br><span class="line">expr_eval <span class="built_in">VARCHAR2</span>(<span class="number">256</span>),</span><br><span class="line">fail_reason <span class="built_in">VARCHAR2</span>(<span class="number">1024</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2、建立触发器</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> log_trigger <span class="keyword">before</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">on</span> TL_M_QRTZ_LOG <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">when</span> (new.LOG_ID <span class="keyword">is</span> <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> qrtz_sequence.nextval <span class="keyword">into</span>:new.LOG_ID <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3、数据插入语句</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TL_M_QRTZ_LOG (</span><br><span class="line">JOB_ID,</span><br><span class="line">SEQ_NO,</span><br><span class="line">START_TIME,</span><br><span class="line">END_TIME,</span><br><span class="line">EXEC_STATE,</span><br><span class="line">FAIL_REASON)</span><br><span class="line"><span class="keyword">VALUES</span> (</span><br><span class="line"><span class="comment">#jobId#,</span></span><br><span class="line"><span class="comment">#seqNo#,</span></span><br><span class="line"><span class="comment">#startTime#,</span></span><br><span class="line"><span class="comment">#endTime#,</span></span><br><span class="line"><span class="comment">#execState#,</span></span><br><span class="line"><span class="comment">#failReason#)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>sequence生成序号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SEQUENCE</span> seq1</span><br><span class="line"><span class="keyword">START</span> <span class="keyword">WITH</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">INCREMENT</span> <span class="keyword">BY</span> <span class="number">10</span></span><br><span class="line">MAXVALUE <span class="number">200</span></span><br><span class="line"><span class="keyword">CYCLE</span></span><br><span class="line">NOCACHE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> seq1.nextval <span class="keyword">FROM</span> dual; </span><br><span class="line"><span class="comment">-- 生成顺序</span></span><br><span class="line"><span class="comment">-- 100 110 120 ... 200 1 11 21 ... 191 1 11 ......</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改与删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 可修改最大值、缓存、循环选项、增量值</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">sequence</span> dept_deptno</span><br><span class="line"><span class="keyword">increment</span> <span class="keyword">by</span> <span class="number">1</span></span><br><span class="line">maxvalue <span class="number">999999</span></span><br><span class="line">nocache</span><br><span class="line"><span class="keyword">nocycle</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除序列</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">sequence</span> dept_deptno;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="like"><a href="#like" class="headerlink" title="like"></a>like</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 字符大小写的问题</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">'Mc%'</span>;</span><br></pre></td></tr></table></figure>

<h1 id="coalesce"><a href="#coalesce" class="headerlink" title="coalesce"></a>coalesce</h1><ul>
<li>合并多个结果集数据，达到case…when相同的效果</li>
<li>(expression_1, expression_2, …,expression_n)依次参考各参数表达式，遇到非null值即停止并返回该值</li>
<li>函数里面的数据类型，必须全部都跟第一列的数据类型一致</li>
</ul>
<h1 id="decode"><a href="#decode" class="headerlink" title="decode"></a>decode</h1><p>DECODE(value,if 条件1，then 值1，if 条件2，then 值2，…，else 其他值)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将员工工资sal大于2000的标记为'high'，其他为'low'----</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用case when</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ENAME,</span><br><span class="line">    <span class="keyword">CASE</span></span><br><span class="line">            <span class="keyword">WHEN</span> sal &gt; <span class="number">2000</span> <span class="keyword">THEN</span> <span class="string">'HIGH'</span></span><br><span class="line">            <span class="keyword">ELSE</span> <span class="string">'LOW'</span></span><br><span class="line">        <span class="keyword">END</span> <span class="keyword">AS</span> SALEVEL</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    EMP;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用decode</span></span><br><span class="line"><span class="keyword">SELECT</span> ENAME ,</span><br><span class="line"><span class="keyword">DECODE</span>(<span class="keyword">sign</span>(SAL<span class="number">-2000</span>), <span class="number">-1</span>, <span class="string">'HIGH'</span>,<span class="string">'LOW'</span>) SALEVEL </span><br><span class="line"><span class="keyword">FROM</span> EMP;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- sign比较两个数大小</span></span><br><span class="line"><span class="comment">-- (select从句不能直接使用比较符号，要使用比较函数)</span></span><br><span class="line">sign(n) 取数字n的符号,大于0返回1, 小于0返回-1, 等于0返回0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 作为条件判断函数使用</span></span><br><span class="line"><span class="keyword">SELECT</span> ENAME, JOB, <span class="keyword">DECODE</span>(JOB, <span class="string">'MANAGER'</span>, <span class="string">'IS MANAGER'</span>, <span class="string">'NOT MANAGER'</span>) JOBTYPE <span class="keyword">FROM</span> EMP;</span><br></pre></td></tr></table></figure>

<p>if</p>
<p>case when</p>
<p><a href="https://www.cnblogs.com/aipan/p/8078835.html" target="_blank" rel="noopener">https://www.cnblogs.com/aipan/p/8078835.html</a></p>
<h1 id="grant"><a href="#grant" class="headerlink" title="grant"></a>grant</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 给用户角色权限</span></span><br><span class="line"><span class="comment">-- (如登录、创建视图等都是角色权限)把角色赋予给用户后，用户就有登录和创建视图的权限了</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CONNECT</span>,<span class="keyword">RESOURCE</span> <span class="keyword">TO</span> zhang;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给用户ZHANG.PERSON表的特定操作权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>,<span class="keyword">DELETE</span>,<span class="keyword">UPDATE</span>,<span class="keyword">INSERT</span> <span class="keyword">ON</span> ZHANG.PERSON <span class="keyword">TO</span> CHENMH ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 把ZHANG.PERSON表的所有权限给CHENMH</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> ZHANG.PERSON <span class="keyword">TO</span> CHENMH;</span><br></pre></td></tr></table></figure>

<h1 id="view视图"><a href="#view视图" class="headerlink" title="view视图"></a>view视图</h1><ul>
<li><p>分为简单视图和复杂视图</p>
<ul>
<li>简单视图：只有一个表、可执行DML</li>
<li>复杂视图：一个或多个表、包含分组数据、使用函数、不能执行DML</li>
</ul>
</li>
<li><p>视图创建及删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 授予创建视图的权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> <span class="keyword">TO</span> SCOTT;</span><br><span class="line"><span class="comment">-- 收回权限</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> <span class="keyword">from</span> SCOTT;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> VIEW_EMP <span class="keyword">AS</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> EMP;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> VIEW_EMP_JOB <span class="keyword">AS</span> <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> JOB <span class="keyword">FROM</span> EMP;</span><br><span class="line"><span class="comment">-- 删除视图</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> VIEW_EMP;</span><br></pre></td></tr></table></figure>
</li>
<li><p>with check option 限定操作范围</p>
</li>
<li><p>with read only 禁止DML操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 只读的视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> VIEW_EMP <span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> EMP</span><br><span class="line"><span class="keyword">with</span> <span class="keyword">read</span> <span class="keyword">only</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>USER_VIEW 查看视图的创建信息</p>
</li>
</ul>
<h1 id="synonym-同义词"><a href="#synonym-同义词" class="headerlink" title="synonym 同义词"></a>synonym 同义词</h1><ul>
<li><p>如一个表名字特别长， 可以创建同义词， 简化对对象的访问</p>
</li>
<li><p>Oracle中同义词是任何表、视图、物化视图、序列、存储过程、函数、包、类型、JAVA类对象、用户定义类型,或是其他的同义词的别名</p>
</li>
<li><p>public和private同义词可以重名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private同义词只能自己访问， public同义词任何有权限的用户都可以访问。</span><br><span class="line">公有同义词不是模式对象， 不能用模式名做前缀</span><br></pre></td></tr></table></figure>
</li>
<li><p>一个schame下table可以与synonyms同名</p>
</li>
<li><p>创建及删除synonym</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 普通用户要具有创建同义词的权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">synonym</span> <span class="keyword">to</span> scott;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">public</span> <span class="keyword">synonym</span> <span class="keyword">to</span> scott;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建一个public同义词</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">public</span> <span class="keyword">synonym</span> scottemp <span class="keyword">for</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 把scottemp同义词的访问权限给hr用户</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> scottemp <span class="keyword">to</span> hr;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">synonym</span> scottemp;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="NULLIF"><a href="#NULLIF" class="headerlink" title="NULLIF"></a>NULLIF</h1><ul>
<li>语法NULLIF ( expression1 , expression2 )</li>
<li>输出结果：<br>如果两个表达式不相等，NULLIF 返回第一个 expression1 的值。<br>如果两个表达式相等，NULLIF 返回空值NULL。</li>
</ul>
<h1 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h1><p>implicate conversion 隐式转换<br>explicate conversion 直接转换</p>
<h1 id="句子"><a href="#句子" class="headerlink" title="句子"></a>句子</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">They can be created on tables and clusters.</span><br><span class="line">它们可以在表和集群上创建</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>springcloud-alibaba使用</title>
    <url>/hexoblog/20200721001608.html</url>
    <content><![CDATA[<h1 id="Spring-Cloud-Alibaba-阿里微服务解决方案"><a href="#Spring-Cloud-Alibaba-阿里微服务解决方案" class="headerlink" title="Spring-Cloud-Alibaba 阿里微服务解决方案"></a><a href="https://gitee.com/mirrors/Spring-Cloud-Alibaba.git" target="_blank" rel="noopener">Spring-Cloud-Alibaba 阿里微服务解决方案</a></h1><h1 id="nacos-服务注册中心"><a href="#nacos-服务注册中心" class="headerlink" title="nacos 服务注册中心"></a><a href="https://nacos.io/zh-cn/docs/what-is-nacos.html" target="_blank" rel="noopener">nacos 服务注册中心</a></h1><h2 id="nacos-server安装配置"><a href="#nacos-server安装配置" class="headerlink" title="nacos-server安装配置"></a>nacos-server安装配置</h2><ul>
<li><p>打包编译</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$git clone https://gitee.com/mirrors/Nacos.git</span><br><span class="line">$mvn -Prelease-nacos -Dmaven.test.skip=true clean install -U </span><br><span class="line"></span><br><span class="line">// change the $version to your actual path</span><br><span class="line">$cd distribution/target/nacos-server-$version/nacos/bin</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://blog.csdn.net/qq_26932225/article/details/86599610" target="_blank" rel="noopener">数据库配置</a></p>
</li>
</ul>
<ul>
<li>单机<br>bin/startup.cmd<br>$./bin/startup.sh -m standalone &amp;</li>
</ul>
<p><a href="http://192.168.5.41:8848/nacos/index.html" target="_blank" rel="noopener">http://192.168.5.41:8848/nacos/index.html</a></p>
<ul>
<li><p>集群</p>
</li>
<li><p>docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --env MODE=standalone --name nacos -d -p 8848:8848 nacos/nacos-server</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li>1.nacos-1.3.2版本配置才支持中文注解,之前版本不支持（虽然不报错，但保存不了）</li>
</ul>
<h2 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h2><ul>
<li><p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-discovery-example<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud-alibaba.version</span>&gt;</span>0.9.0.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud-alibaba.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-discovery-example</span>     <span class="comment">## 应用名称必须唯一</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span>   <span class="comment">## nacos服务地址</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="在线配置"><a href="#在线配置" class="headerlink" title="在线配置"></a>在线配置</h2><ul>
<li><p>pom依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">spring-cloud-alibaba.version</span>&gt;</span>0.9.0.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud-alibaba.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- nacos配置 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 将服务注册到nacos --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 使用nacos动态配置功能 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>bootstrap.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">web-skeleton</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>nacos中配置web-skeleton-dev.yml (application.yml)</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">oracle.jdbc.OracleDriver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">xx</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xx</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xx</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span>        <span class="comment"># Date转String格式</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8:00</span></span><br><span class="line">    <span class="attr">default-property-inclusion:</span> <span class="string">non_null</span>    <span class="comment"># 转换对象时过滤掉null值</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">favicon:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosProviderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="Feign服务间调用"><a href="#Feign服务间调用" class="headerlink" title="Feign服务间调用"></a>Feign服务间调用</h1><p>使用feign进行http调用(可以自动发现注册到nacos上的服务)</p>
<ul>
<li><p>pom.xml依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud-alibaba.version</span>&gt;</span>0.9.0.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud-alibaba.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>基于feign实现的本地客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixl.nacosconsumer.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"nacos-discovery-example"</span>) <span class="comment">// 注册到nacos的服务提供方名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserServiceClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>) <span class="comment">//本地方法</span></span><br><span class="line">    <span class="function">JSONObject <span class="title">getUserById</span><span class="params">(@RequestParam(value = <span class="string">"id"</span>)</span> String id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixl.nacosconsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosConsumerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="Sentinel-服务熔断"><a href="#Sentinel-服务熔断" class="headerlink" title="Sentinel 服务熔断"></a><a href="https://gitee.com/mirrors/Sentinel.git" target="_blank" rel="noopener">Sentinel 服务熔断</a></h1><h1 id="Dubbo-RPC框架"><a href="#Dubbo-RPC框架" class="headerlink" title="Dubbo RPC框架"></a><a href="https://gitee.com/mirrors/dubbo.git" target="_blank" rel="noopener">Dubbo RPC框架</a></h1><ul>
<li><p>序列化</p>
</li>
<li><p>负载均衡策略</p>
</li>
<li><p><a href="https://gitee.com/mirrors/Dubbo-Spring-Boot-Project.git" target="_blank" rel="noopener">dubbo-spring-boot-project</a></p>
</li>
</ul>
<h1 id="rocketmq-消息中间件"><a href="#rocketmq-消息中间件" class="headerlink" title="rocketmq 消息中间件"></a><a href="https://gitee.com/mirrors/rocketmq.git" target="_blank" rel="noopener">rocketmq 消息中间件</a></h1><h1 id="SkyWalking-分布式追踪系统-SkyWalking-分布式追踪系统"><a href="#SkyWalking-分布式追踪系统-SkyWalking-分布式追踪系统" class="headerlink" title="[SkyWalking 分布式追踪系统](SkyWalking 分布式追踪系统)"></a>[SkyWalking 分布式追踪系统](SkyWalking 分布式追踪系统)</h1>]]></content>
  </entry>
  <entry>
    <title>mysql-高频问题</title>
    <url>/hexoblog/20190810100542.html</url>
    <content><![CDATA[<h1 id="索引相关"><a href="#索引相关" class="headerlink" title="索引相关"></a>索引相关</h1><h2 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引?"></a>什么是索引?</h2><p>索引是一种数据结构,可以帮助我们快速的进行数据的查找.</p>
<h2 id="索引是个什么样的数据结构呢"><a href="#索引是个什么样的数据结构呢" class="headerlink" title="索引是个什么样的数据结构呢?"></a>索引是个什么样的数据结构呢?</h2><p>索引的数据结构和具体存储引擎的实现有关, 在MySQL中使用较多的索引有Hash索引,B+树索引等；<br>而我们经常使用的InnoDB存储引擎的默认索引实现为:B+树索引.</p>
<h2 id="Hash索引和B-树所有有什么区别或者说优劣呢"><a href="#Hash索引和B-树所有有什么区别或者说优劣呢" class="headerlink" title="Hash索引和B+树所有有什么区别或者说优劣呢?"></a>Hash索引和B+树所有有什么区别或者说优劣呢?</h2><p>首先要知道Hash索引和B+树索引的底层实现原理:<br>hash索引底层就是hash表,进行查找时,调用一次hash函数就可以获取到相应的键值,之后进行回表查询获得实际数据.<br>B+树底层实现是多路平衡查找树.对于每一次的查询都是从根节点出发,查找到叶子节点方可以获得所查键值,<br>然后根据查询判断是否需要回表查询数据.</p>
<p>那么可以看出他们有以下的不同:</p>
<ul>
<li><p>hash索引进行等值查询更快(一般情况下),但是却无法进行范围查询.<br>因为在hash索引中经过hash函数建立索引之后,索引的顺序与原顺序无法保持一致,不能支持范围查询.而B+树的的所有节点皆遵循(左节点小于父节点,右节点大于父节点,多叉树也类似),天然支持范围.</p>
</li>
<li><p>hash索引不支持使用索引进行排序,原理同上.</p>
</li>
<li><p>hash索引不支持模糊查询以及多列索引的最左前缀匹配.原理也是因为hash函数的不可预测.AAAA和AAAAB的索引没有相关性.</p>
</li>
<li><p>hash索引任何时候都避免不了回表查询数据,而B+树在符合某些条件(聚簇索引,覆盖索引等)的时候可以只通过索引完成查询.</p>
</li>
<li><p>hash索引虽然在等值查询上较快,但是不稳定.性能不可预测,当某个键值存在大量重复的时候,发生hash碰撞,此时效率可能极差.而B+树的查询效率比较稳定,对于所有的查询都是从根节点到叶子节点,且树的高度较低.</p>
</li>
</ul>
<p>因此,在大多数情况下,直接选择B+树索引可以获得稳定且较好的查询速度.而不需要使用hash索引.</p>
<h2 id="什么是聚簇索引"><a href="#什么是聚簇索引" class="headerlink" title="什么是聚簇索引?"></a>什么是聚簇索引?</h2><p>上面提到了B+树在满足聚簇索引和覆盖索引的时候不需要回表查询数据。</p>
<p>在B+树的索引中,叶子节点可能存储了当前的key值,也可能存储了当前的key值以及整行的数据,这就是聚簇索引和非聚簇索引. </p>
<p>在InnoDB中,只有主键索引是聚簇索引,如果没有主键,则挑选一个唯一键建立聚簇索引.如果没有唯一键,则隐式的生成一个键来建立聚簇索引.</p>
<p>当查询使用聚簇索引时,在对应的叶子节点,可以获取到整行数据,因此不用再次进行回表查询.</p>
<h2 id="非聚簇索引一定会回表查询吗"><a href="#非聚簇索引一定会回表查询吗" class="headerlink" title="非聚簇索引一定会回表查询吗?"></a>非聚簇索引一定会回表查询吗?</h2><p>不一定,这涉及到查询语句所要求的字段是否全部命中了索引,如果全部命中了索引,那么就不必再进行回表查询.</p>
<p>举个简单的例子,假设我们在员工表的年龄上建立了索引,那么当进行select age from employee where age &lt; 20的查询时,<br>在索引的叶子节点上,已经包含了age信息,不会再次进行回表查询.</p>
<h2 id="在建立索引的时候-都有哪些需要考虑的因素呢"><a href="#在建立索引的时候-都有哪些需要考虑的因素呢" class="headerlink" title="在建立索引的时候,都有哪些需要考虑的因素呢?"></a>在建立索引的时候,都有哪些需要考虑的因素呢?</h2><p>建立索引的时候一般要考虑到字段的使用频率,经常作为条件进行查询的字段比较适合.<br>如果需要建立联合索引的话,还需要考虑联合索引中的顺序.<br>此外也要考虑其他方面,比如防止过多的所有对表造成太大的压力.这些都和实际的表结构以及查询方式有关.</p>
<h2 id="联合索引是什么-为什么需要注意联合索引中的顺序"><a href="#联合索引是什么-为什么需要注意联合索引中的顺序" class="headerlink" title="联合索引是什么?为什么需要注意联合索引中的顺序?"></a>联合索引是什么?为什么需要注意联合索引中的顺序?</h2><p>MySQL可以使用多个字段同时建立一个索引,叫做联合索引.<br>在联合索引中,如果想要命中索引,需要按照建立索引时的字段顺序挨个使用,否则无法命中索引.</p>
<p>具体原因为:</p>
<p>MySQL使用索引时需要索引有序,假设现在建立了”name,age,school”的联合索引,那么索引的排序为:<br>先按照name排序,如果name相同,则按照age排序,如果age的值也相等,则按照school进行排序.</p>
<p>当进行查询时,此时索引仅仅按照name严格有序,因此必须首先使用name字段进行等值查询,<br>之后对于匹配到的列而言,其按照age字段严格有序,此时可以使用age字段用做索引查找,以此类推.<br>因此在建立联合索引的时候应该注意索引列的顺序,一般情况下,将查询需求频繁或者字段选择性高的列放在前面.<br>此外可以根据特例的查询或者表结构进行单独的调整.</p>
<h2 id="创建的索引有没有被使用到-或者说怎么才可以知道这条语句运行很慢的原因"><a href="#创建的索引有没有被使用到-或者说怎么才可以知道这条语句运行很慢的原因" class="headerlink" title="创建的索引有没有被使用到?或者说怎么才可以知道这条语句运行很慢的原因?"></a>创建的索引有没有被使用到?或者说怎么才可以知道这条语句运行很慢的原因?</h2><p>MySQL提供了explain命令来查看语句的执行计划。<br>MySQL在执行某个语句之前,会将该语句过一遍查询优化器,之后会拿到对语句的分析,也就是执行计划,其中包含了许多信息.<br>可以通过其中和索引有关的信息来分析是否命中了索引,<br>例如possilbe_key,key,key_len等字段,<br>分别说明了此语句可能会使用的索引,实际使用的索引以及使用的索引长度.</p>
<h2 id="在哪些情况下会发生针对该列创建了索引但是在查询的时候并没有使用呢"><a href="#在哪些情况下会发生针对该列创建了索引但是在查询的时候并没有使用呢" class="headerlink" title="在哪些情况下会发生针对该列创建了索引但是在查询的时候并没有使用呢?"></a>在哪些情况下会发生针对该列创建了索引但是在查询的时候并没有使用呢?</h2><ul>
<li>使用不等于查询,</li>
<li>列参与了数学运算或者函数</li>
<li>在字符串like时左边是通配符.类似于’%aaa’.</li>
<li>当mysql分析全表扫描比使用索引快的时候不使用索引.</li>
<li>当使用联合索引,前面一个条件为范围查询,后面的即使符合最左前缀原则,也无法使用索引.<br>以上情况,MySQL无法使用索引.</li>
</ul>
<h1 id="事务相关"><a href="#事务相关" class="headerlink" title="事务相关"></a>事务相关</h1><h2 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务?"></a>什么是事务?</h2><p>理解什么是事务最经典的就是转账的栗子,相信大家也都了解,这里就不再说一边了.</p>
<p>事务是一系列的操作,他们要符合ACID特性.<br>最常见的理解就是:事务中的操作要么全部成功,要么全部失败.但是只是这样还不够的.</p>
<h2 id="ACID是什么-可以详细说一下吗"><a href="#ACID是什么-可以详细说一下吗" class="headerlink" title="ACID是什么?可以详细说一下吗?"></a>ACID是什么?可以详细说一下吗?</h2><p>A=Atomicity</p>
<p>原子性,就是上面说的,要么全部成功,要么全部失败.不可能只执行一部分操作.</p>
<p>C=Consistency</p>
<p>系统(数据库)总是从一个一致性的状态转移到另一个一致性的状态,不会存在中间状态.</p>
<p>I=Isolation</p>
<p>隔离性: 通常来说:一个事务在完全提交之前,对其他事务是不可见的.（注意通常来说,意味着有例外情况.）</p>
<p>D=Durability</p>
<p>持久性,一旦事务提交,那么就永远是这样子了,哪怕系统崩溃也不会影响到这个事务的结果.</p>
<h2 id="同时有多个事务在进行会怎么样呢"><a href="#同时有多个事务在进行会怎么样呢" class="headerlink" title="同时有多个事务在进行会怎么样呢?"></a>同时有多个事务在进行会怎么样呢?</h2><p>多事务的并发进行一般会造成以下几个问题:</p>
<p>脏读: A事务读取到了B事务未提交的内容,而B事务后面进行了回滚.</p>
<p>不可重复读: 当设置A事务只能读取B事务已经提交的部分,会造成在A事务内的两次查询,结果竟然不一样,因为在此期间B事务进行了提交操作.</p>
<p>幻读: A事务读取了一个范围的内容,而同时B事务在此期间插入了一条数据.造成”幻觉”.</p>
<h2 id="怎么解决这些问题呢-MySQL的事务隔离级别了解吗"><a href="#怎么解决这些问题呢-MySQL的事务隔离级别了解吗" class="headerlink" title="怎么解决这些问题呢?MySQL的事务隔离级别了解吗?"></a>怎么解决这些问题呢?MySQL的事务隔离级别了解吗?</h2><p>MySQL的四种隔离级别如下:</p>
<p>未提交读(READ UNCOMMITTED)<br>这就是上面所说的例外情况了,这个隔离级别下,其他事务可以看到本事务没有提交的部分修改.<br>因此会造成脏读的问题(读取到了其他事务未提交的部分,而之后该事务进行了回滚).<br>这个级别的性能没有足够大的优势,但是又有很多的问题,因此很少使用.</p>
<p>已提交读(READ COMMITTED)<br>其他事务只能读取到本事务已经提交的部分.<br>这个隔离级别有不可重复读的问题,在同一个事务内的两次读取,拿到的结果竟然不一样,因为另外一个事务对数据进行了修改.</p>
<p>REPEATABLE READ(可重复读)<br>可重复读隔离级别解决了上面不可重复读的问题(看名字也知道),但是仍然有一个新问题,就是幻读,<br>当你读取id&gt; 10 的数据行时,对涉及到的所有行加上了读锁,<br>此时例外一个事务新插入了一条id=11的数据,<br>因为是新插入的,所以不会触发上面的锁的排斥,<br>那么进行本事务进行下一次的查询时会发现有一条id=11的数据,<br>而上次的查询操作并没有获取到,再进行插入就会有主键冲突的问题.</p>
<p>SERIALIZABLE(可串行化)<br>这是最高的隔离级别,可以解决上面提到的所有问题,因为他强制将所以的操作串行执行,这会导致并发性能极速下降,因此也不是很常用.</p>
<h2 id="Innodb使用的是哪种隔离级别呢"><a href="#Innodb使用的是哪种隔离级别呢" class="headerlink" title="Innodb使用的是哪种隔离级别呢?"></a>Innodb使用的是哪种隔离级别呢?</h2><p>InnoDB默认使用的是REPEATABLE READ</p>
<h2 id="MySQL的锁是什么"><a href="#MySQL的锁是什么" class="headerlink" title="MySQL的锁是什么?"></a>MySQL的锁是什么?</h2><p>当数据库有并发事务的时候,可能会产生数据的不一致,这时候需要一些机制来保证访问的次序,锁机制就是这样的一个机制.</p>
<p>就像酒店的房间,如果大家随意进出,就会出现多人抢夺同一个房间的情况,而在房间上装上锁,申请到钥匙的人才可以入住并且将房间锁起来,<br>其他人只有等他使用完毕才可以再次使用.</p>
<h2 id="MySQL都有哪些锁呢-像上面那样子进行锁定岂不是有点阻碍并发效率了"><a href="#MySQL都有哪些锁呢-像上面那样子进行锁定岂不是有点阻碍并发效率了" class="headerlink" title="MySQL都有哪些锁呢?像上面那样子进行锁定岂不是有点阻碍并发效率了?"></a>MySQL都有哪些锁呢?像上面那样子进行锁定岂不是有点阻碍并发效率了?</h2><p>从锁的类别上来讲,有共享锁和排他锁.</p>
<p>共享锁: 又叫做读锁. 当用户要进行数据的读取时,对数据加上共享锁.共享锁可以同时加上多个.</p>
<p>排他锁: 又叫做写锁. 当用户要进行数据的写入时,对数据加上排他锁.排他锁只可以加一个,他和其他的排他锁,共享锁都相斥.</p>
<p>用上面的例子来说就是用户的行为有两种,一种是来看房,多个用户一起看房是可以接受的. 一种是真正的入住一晚,在这期间,无论是想入住的还是想看房的都不可以.</p>
<p>锁的粒度取决于具体的存储引擎,InnoDB实现了行级锁,页级锁,表级锁.</p>
<p>他们的加锁开销从大大小,并发能力也是从大到小.</p>
<h1 id="表结构设计"><a href="#表结构设计" class="headerlink" title="表结构设计"></a>表结构设计</h1><h2 id="为什么要尽量设定一个主键"><a href="#为什么要尽量设定一个主键" class="headerlink" title="为什么要尽量设定一个主键?"></a>为什么要尽量设定一个主键?</h2><p>主键是数据库确保数据行在整张表唯一性的保障,即使业务上本张表没有主键,也建议添加一个自增长的ID列作为主键.<br>设定了主键之后,在后续的删改查的时候可能更加快速以及确保操作数据范围安全.</p>
<h2 id="主键使用自增ID还是UUID"><a href="#主键使用自增ID还是UUID" class="headerlink" title="主键使用自增ID还是UUID?"></a>主键使用自增ID还是UUID?</h2><p>推荐使用自增ID,不要使用UUID.</p>
<p>因为在InnoDB存储引擎中,主键索引是作为聚簇索引存在的,也就是说,主键索引的B+树叶子节点上存储了主键索引以及全部的数据(按照顺序),如果主键索引是自增ID,那么只需要不断向后排列即可,如果是UUID,由于到来的ID与原来的大小不确定,会造成非常多的数据插入,数据移动,然后导致产生很多的内存碎片,进而造成插入性能的下降.</p>
<p>总之,在数据量大一些的情况下,用自增主键性能会好一些.<br>关于主键是聚簇索引,如果没有主键,InnoDB会选择一个唯一键来作为聚簇索引,如果没有唯一键,会生成一个隐式的主键.</p>
<h2 id="字段为什么要求定义为not-null"><a href="#字段为什么要求定义为not-null" class="headerlink" title="字段为什么要求定义为not null?"></a>字段为什么要求定义为not null?</h2><p>MySQL官网这样介绍:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NULL columns require additional space in the rowto record whether their values are NULL. </span><br><span class="line">For MyISAM tables, each NULL columntakes one bit extra, rounded up to the nearest byte.</span><br></pre></td></tr></table></figure>

<p>null值会占用更多的字节,且会在程序中造成很多与预期不符的情况.</p>
<h2 id="如果要存储用户的密码散列-应该使用什么字段进行存储"><a href="#如果要存储用户的密码散列-应该使用什么字段进行存储" class="headerlink" title="如果要存储用户的密码散列,应该使用什么字段进行存储?"></a>如果要存储用户的密码散列,应该使用什么字段进行存储?</h2><p>密码散列,盐,用户身份证号等固定长度的字符串应该使用char而不是varchar来存储,这样可以节省空间且提高检索效率.</p>
<h1 id="存储引擎相关"><a href="#存储引擎相关" class="headerlink" title="存储引擎相关"></a>存储引擎相关</h1><h2 id="MySQL支持哪些存储引擎"><a href="#MySQL支持哪些存储引擎" class="headerlink" title="MySQL支持哪些存储引擎?"></a>MySQL支持哪些存储引擎?</h2><p>MySQL支持多种存储引擎,比如InnoDB,MyISAM,Memory,Archive等等.<br>在大多数的情况下,直接选择使用InnoDB引擎都是最合适的,InnoDB也是MySQL的默认存储引擎.</p>
<h2 id="InnoDB和MyISAM有什么区别"><a href="#InnoDB和MyISAM有什么区别" class="headerlink" title="InnoDB和MyISAM有什么区别?"></a>InnoDB和MyISAM有什么区别?</h2><ul>
<li>InnoDB支持事物，而MyISAM不支持事物</li>
<li>InnoDB支持行级锁，而MyISAM支持表级锁</li>
<li>InnoDB支持MVCC, 而MyISAM不支持</li>
<li>InnoDB支持外键，而MyISAM不支持</li>
<li>InnoDB不支持全文索引，而MyISAM支持。</li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="MySQL中的varchar和char有什么区别"><a href="#MySQL中的varchar和char有什么区别" class="headerlink" title="MySQL中的varchar和char有什么区别."></a>MySQL中的varchar和char有什么区别.</h2><p>char是一个定长字段,假如申请了char(10)的空间,那么无论实际存储多少内容.该字段都占用10个字符,<br>而varchar是变长的,也就是说申请的只是最大长度,占用的空间为实际字符长度+1,最后一个字符存储使用了多长的空间.</p>
<p>在检索效率上来讲,char &gt; varchar,因此在使用中,如果确定某个字段的值的长度,可以使用char,否则应该尽量使用varchar.<br>例如存储用户MD5加密后的密码,则应该使用char.</p>
<h2 id="varchar-10-和int-10-代表什么含义"><a href="#varchar-10-和int-10-代表什么含义" class="headerlink" title="varchar(10)和int(10)代表什么含义?"></a>varchar(10)和int(10)代表什么含义?</h2><p>varchar的10代表了申请的空间长度,也是可以存储的数据的最大长度,而int的10只是代表了展示的长度,不足10位以0填充.<br>也就是说,int(1)和int(10)所能存储的数字大小以及占用的空间都是相同的,只是在展示时按照长度展示.</p>
<h2 id="MySQL的binlog有有几种录入格式-分别有什么区别"><a href="#MySQL的binlog有有几种录入格式-分别有什么区别" class="headerlink" title="MySQL的binlog有有几种录入格式?分别有什么区别?"></a>MySQL的binlog有有几种录入格式?分别有什么区别?</h2><p>有三种格式,statement,row和mixed.</p>
<ul>
<li><p>statement模式下,记录单元为语句.即每一个sql造成的影响会记录.<br>由于sql的执行是有上下文的,因此在保存的时候需要保存相关的信息,同时还有一些使用了函数之类的语句无法被记录复制.</p>
</li>
<li><p>row级别下,记录单元为每一行的改动,基本是可以全部记下来但是由于很多操作,<br>会导致大量行的改动(比如alter table),因此这种模式的文件保存的信息太多,日志量太大.</p>
</li>
<li><p>mixed. 一种折中的方案,普通操作使用statement记录,当无法使用statement的时候使用row.</p>
</li>
</ul>
<p>此外,新版的MySQL中对row级别也做了一些优化,当表结构发生变化的时候,会记录语句而不是逐行记录.</p>
<h2 id="超大分页怎么处理"><a href="#超大分页怎么处理" class="headerlink" title="超大分页怎么处理?"></a>超大分页怎么处理?</h2><p>超大的分页一般从两个方向上来解决.</p>
<ul>
<li><p>数据库层面,这也是我们主要集中关注的(虽然收效没那么大),<br>类似于select * from table where age &gt; 20 limit 1000000,10这种查询其实也是有可以优化的余地的.<br>这条语句需要load 1000000数据然后基本上全部丢弃,只取10条当然比较慢.<br>当时我们可以修改为select * from table where id in (select id from table where age &gt; 20 limit 1000000,10).<br>这样虽然也load了一百万的数据,但是由于索引覆盖,要查询的所有字段都在索引中,所以速度会很快.<br>同时如果ID连续的好,我们还可以select * from table where id &gt; 1000000 limit 10,效率也是不错的,<br>优化的可能性有许多种,但是核心思想都一样,就是减少load的数据.</p>
</li>
<li><p>从需求的角度减少这种请求….主要是不做类似的需求(直接跳转到几百万页之后的具体某一页.<br>只允许逐页查看或者按照给定的路线走,这样可预测,可缓存)以及防止ID泄漏且连续被人恶意攻击.</p>
</li>
</ul>
<p>解决超大分页,其实主要是靠缓存,可预测性的提前查到内容,缓存至redis等k-V数据库中,直接返回即可.</p>
<h2 id="关心过业务系统里面的sql耗时吗-统计过慢查询吗-对慢查询都怎么优化过"><a href="#关心过业务系统里面的sql耗时吗-统计过慢查询吗-对慢查询都怎么优化过" class="headerlink" title="关心过业务系统里面的sql耗时吗?统计过慢查询吗?对慢查询都怎么优化过?"></a>关心过业务系统里面的sql耗时吗?统计过慢查询吗?对慢查询都怎么优化过?</h2><p>在业务系统中,除了使用主键进行的查询,其他的我都会在测试库上测试其耗时,慢查询的统计主要由运维在做,会定期将业务中的慢查询反馈给我们.</p>
<p>慢查询的优化首先要搞明白慢的原因是什么? 是查询条件没有命中索引?是load了不需要的数据列?还是数据量太大?</p>
<p>所以优化也是针对这三个方向来的,</p>
<ul>
<li><p>首先分析语句,看看是否load了额外的数据,可能是查询了多余的行并且抛弃掉了,可能是加载了许多结果中并不需要的列,对语句进行分析以及重写.</p>
</li>
<li><p>分析语句的执行计划,然后获得其使用索引的情况,之后修改语句或者修改索引,使得语句可以尽可能的命中索引.</p>
</li>
<li><p>如果对语句的优化已经无法进行,可以考虑表中的数据量是否太大,如果是的话可以进行横向或者纵向的分表.</p>
</li>
</ul>
<h2 id="上面提到横向分表和纵向分表-可以分别举一个适合他们的例子吗"><a href="#上面提到横向分表和纵向分表-可以分别举一个适合他们的例子吗" class="headerlink" title="上面提到横向分表和纵向分表,可以分别举一个适合他们的例子吗?"></a>上面提到横向分表和纵向分表,可以分别举一个适合他们的例子吗?</h2><p>横向分表是按行分表.假设我们有一张用户表,主键是自增ID且同时是用户的ID.<br>数据量较大,有1亿多条,那么此时放在一张表里的查询效果就不太理想.<br>我们可以根据主键ID进行分表,无论是按尾号分,或者按ID的区间分都是可以的.<br>假设按照尾号0-99分为100个表,那么每张表中的数据就仅有100w.<br>这时的查询效率无疑是可以满足要求的.</p>
<p>纵向分表是按列分表.假设我们现在有一张文章表.包含字段id-摘要-内容.<br>而系统中的展示形式是刷新出一个列表,列表中仅包含标题和摘要,当用户点击某篇文章进入详情时才需要正文内容.<br>此时,如果数据量大,将内容这个很大且不经常使用的列放在一起会拖慢原表的查询速度.<br>我们可以将上面的表分为两张.id-摘要,id-内容.当用户点击详情,那主键再来取一次内容即可.<br>而增加的存储量只是很小的主键字段.代价很小.</p>
<p>当然,分表其实和业务的关联度很高,在分表之前一定要做好调研以及benchmark.不要按照自己的猜想盲目操作.</p>
<h2 id="什么是存储过程？有哪些优缺点？"><a href="#什么是存储过程？有哪些优缺点？" class="headerlink" title="什么是存储过程？有哪些优缺点？"></a>什么是存储过程？有哪些优缺点？</h2><p>存储过程是一些预编译的SQL语句。</p>
<ul>
<li>1、更加直白的理解：存储过程可以说是一个记录集，<br>它是由一些T-SQL语句组成的代码块，这些T-SQL语句代码像一个方法一样实现一些功能（对单表或多表的增删改查），<br>然后再给这个代码块取一个名字，在用到这个功能的时候调用他就行了。</li>
<li>2、存储过程是一个预编译的代码块，执行效率比较高,一个存储过程替代大量T_SQL语句，可以降低网络通信量，提高通信速率,可以一定程度上确保数据安全</li>
</ul>
<p>但是,在互联网项目中,其实是不太推荐存储过程的,比较出名的就是阿里的《Java开发手册》中禁止使用存储过程,<br>我个人的理解是,在互联网项目中,迭代太快,项目的生命周期也比较短,人员流动相比于传统的项目也更加频繁,<br>在这样的情况下,存储过程的管理确实是没有那么方便,同时,复用性也没有写在服务层那么好.</p>
<h2 id="说一说三范式"><a href="#说一说三范式" class="headerlink" title="说一说三范式"></a>说一说三范式</h2><ul>
<li>第一范式: 每个列都不可以再拆分. </li>
<li>第二范式: 非主键列完全依赖于主键,而不能是依赖于主键的一部分. </li>
<li>第三范式: 非主键列只依赖于主键,不依赖于其他非主键.<br>在设计数据库结构的时候,要尽量遵守三范式,如果不遵守,必须有足够的理由.<br>比如性能. 事实上我们经常会为了性能而妥协数据库的设计.</li>
</ul>
]]></content>
      <tags>
        <tag>mysql</tag>
        <tag>索引</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis-generetor使用</title>
    <url>/hexoblog/20190710113614.html</url>
    <content><![CDATA[<h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="入口方法"><a href="#入口方法" class="headerlink" title="入口方法"></a>入口方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]  args)</span></span>&#123;</span><br><span class="line">    InputStream xmlInputStream = MybatisEnrityGenarater<span class="class">.<span class="keyword">class</span></span></span><br><span class="line">                .getResourceAsStream("/generatorConfig.xml");</span><br><span class="line">        List&lt;String&gt; warnings = <span class="keyword">null</span>;</span><br><span class="line">        Configuration config = <span class="keyword">new</span> ConfigurationParser(warnings)</span><br><span class="line">                .parseConfiguration(xmlInputStream);</span><br><span class="line">        MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config,</span><br><span class="line">                <span class="keyword">new</span> DefaultShellCallback(<span class="keyword">true</span>), warnings);</span><br><span class="line">        myBatisGenerator.generate(<span class="keyword">new</span> NullProgressCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startTask</span><span class="params">(String taskName)</span> </span>&#123;</span><br><span class="line">                System.out.println(taskName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="generatorConfig-xml配置"><a href="#generatorConfig-xml配置" class="headerlink" title="generatorConfig.xml配置"></a>generatorConfig.xml配置</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置生成器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用$&#123;propertyKey&#125;的方式来引用配置项</span></span><br><span class="line"><span class="comment">    resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties        </span></span><br><span class="line"><span class="comment">    url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.</span></span><br><span class="line"><span class="comment">    注意，两个属性只能选址一个;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用</span></span><br><span class="line"><span class="comment">&lt;properties resource="" url="" /&gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 在MBG工作的时候，需要额外加载的依赖包</span></span><br><span class="line"><span class="comment">    location属性指明加载jar/zip包的全路径</span></span><br><span class="line"><span class="comment">&lt;classPathEntry location="/Program Files/IBM/SQLLIB/java/db2java.zip" /&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    context:生成一组对象的环境 </span></span><br><span class="line"><span class="comment">    id:必选，上下文id，用于在生成错误时提示</span></span><br><span class="line"><span class="comment">    defaultModelType:指定生成对象的样式</span></span><br><span class="line"><span class="comment">        1，conditional：类似hierarchical；</span></span><br><span class="line"><span class="comment">        2，flat：所有内容（主键，blob）等全部生成在一个对象中；</span></span><br><span class="line"><span class="comment">        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)</span></span><br><span class="line"><span class="comment">    targetRuntime:</span></span><br><span class="line"><span class="comment">        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；</span></span><br><span class="line"><span class="comment">        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；</span></span><br><span class="line"><span class="comment">    introspectedColumnImpl：类全限定名，用于扩展MBG</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"mysql"</span> <span class="attr">defaultModelType</span>=<span class="string">"hierarchical"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3Simple"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；</span></span><br><span class="line"><span class="comment">        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoDelimitKeywords"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 生成的Java文件的编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javaFileEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 格式化java代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javaFormatter"</span> <span class="attr">value</span>=<span class="string">"org.mybatis.generator.api.dom.DefaultJavaFormatter"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 格式化XML代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"xmlFormatter"</span> <span class="attr">value</span>=<span class="string">"org.mybatis.generator.api.dom.DefaultXmlFormatter"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beginningDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"endingDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 必须要有的，使用这个配置链接数据库</span></span><br><span class="line"><span class="comment">        @<span class="doctag">TODO:</span>是否可以扩展</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span> <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql:///pss"</span> <span class="attr">userId</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"admin"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里面可以设置property属性，每一个property属性都设置到配置的Driver上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- java类型处理器 </span></span><br><span class="line"><span class="comment">        用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；</span></span><br><span class="line"><span class="comment">        注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型； </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaTypeResolver</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型</span></span><br><span class="line"><span class="comment">            false：默认,</span></span><br><span class="line"><span class="comment">                scale&gt;0;length&gt;18：使用BigDecimal;</span></span><br><span class="line"><span class="comment">                scale=0;length[10,18]：使用Long；</span></span><br><span class="line"><span class="comment">                scale=0;length[5,9]：使用Integer；</span></span><br><span class="line"><span class="comment">                scale=0;length&lt;5：使用Short；</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- java模型创建器，是必须要的元素</span></span><br><span class="line"><span class="comment">        负责：1，key类（见context的defaultModelType）；2，java类；3，查询类</span></span><br><span class="line"><span class="comment">        targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；</span></span><br><span class="line"><span class="comment">        targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com._520it.mybatis.domain"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  for MyBatis3/MyBatis3Simple</span></span><br><span class="line"><span class="comment">            自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"constructorBased"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- for MyBatis3 / MyBatis3Simple</span></span><br><span class="line"><span class="comment">            是否创建一个不可变的类，如果为true，</span></span><br><span class="line"><span class="comment">            那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"immutable"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 设置一个根对象，</span></span><br><span class="line"><span class="comment">            如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项</span></span><br><span class="line"><span class="comment">            注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：</span></span><br><span class="line"><span class="comment">                1，属性名相同，类型相同，有相同的getter/setter方法；</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"rootClass"</span> <span class="attr">value</span>=<span class="string">"com._520it.mybatis.domain.BaseDomain"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 设置是否在getter方法中，对String类型字段调用trim()方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 生成SQL map的XML文件生成器，</span></span><br><span class="line"><span class="comment">        注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），</span></span><br><span class="line"><span class="comment">            或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置</span></span><br><span class="line"><span class="comment">        targetPackage/targetProject:同javaModelGenerator</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com._520it.mybatis.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 </span></span><br><span class="line"><span class="comment">        targetPackage/targetProject:同javaModelGenerator</span></span><br><span class="line"><span class="comment">        type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：</span></span><br><span class="line"><span class="comment">            1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；</span></span><br><span class="line"><span class="comment">            2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；</span></span><br><span class="line"><span class="comment">            3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；</span></span><br><span class="line"><span class="comment">        注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com._520it.mybatis.mapper"</span> <span class="attr">type</span>=<span class="string">"ANNOTATEDMAPPER"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查</span></span><br><span class="line"><span class="comment">        &lt;property name="rootInterface" value=""/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素</span></span><br><span class="line"><span class="comment">        选择的table会生成一下文件：</span></span><br><span class="line"><span class="comment">        1，SQL map文件</span></span><br><span class="line"><span class="comment">        2，生成一个主键类；</span></span><br><span class="line"><span class="comment">        3，除了BLOB和主键的其他字段的类；</span></span><br><span class="line"><span class="comment">        4，包含BLOB的类；</span></span><br><span class="line"><span class="comment">        5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；</span></span><br><span class="line"><span class="comment">        6，Mapper接口（可选）</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">        tableName（必要）：要生成对象的表名；</span></span><br><span class="line"><span class="comment">        注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会</span></span><br><span class="line"><span class="comment">            根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：</span></span><br><span class="line"><span class="comment">            1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；</span></span><br><span class="line"><span class="comment">            2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；</span></span><br><span class="line"><span class="comment">            3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；</span></span><br><span class="line"><span class="comment">            4，否则，使用指定的大小写格式查询；</span></span><br><span class="line"><span class="comment">        另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；</span></span><br><span class="line"><span class="comment">        这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        可选：</span></span><br><span class="line"><span class="comment">        1，schema：数据库的schema；</span></span><br><span class="line"><span class="comment">        2，catalog：数据库的catalog；</span></span><br><span class="line"><span class="comment">        3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName</span></span><br><span class="line"><span class="comment">        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；</span></span><br><span class="line"><span class="comment">        5，enableInsert（默认true）：指定是否生成insert语句；</span></span><br><span class="line"><span class="comment">        6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；</span></span><br><span class="line"><span class="comment">        7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；</span></span><br><span class="line"><span class="comment">        8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；</span></span><br><span class="line"><span class="comment">        9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；</span></span><br><span class="line"><span class="comment">        10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；</span></span><br><span class="line"><span class="comment">        11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；</span></span><br><span class="line"><span class="comment">        12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；</span></span><br><span class="line"><span class="comment">        13，modelType：参考context元素的defaultModelType，相当于覆盖；</span></span><br><span class="line"><span class="comment">        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）</span></span><br><span class="line"><span class="comment">        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"userinfo"</span> &gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 参考 javaModelGenerator 的 constructorBased属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"constructorBased"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema； --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreQualifiersAtRuntime"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 参考 javaModelGenerator 的 immutable 属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"immutable"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"modelOnly"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 参考 javaModelGenerator 的 rootClass 属性 </span></span><br><span class="line"><span class="comment">        &lt;property name="rootClass" value=""/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">&lt;!-- 参考javaClientGenerator 的  rootInterface 属性</span></span><br><span class="line"><span class="comment">        &lt;property name="rootInterface" value=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog </span></span><br><span class="line"><span class="comment">        &lt;property name="runtimeCatalog" value=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema </span></span><br><span class="line"><span class="comment">        &lt;property name="runtimeSchema" value=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename </span></span><br><span class="line"><span class="comment">        &lt;property name="runtimeTableName" value=""/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 注意，该属性只针对MyBatis3Simple有用；</span></span><br><span class="line"><span class="comment">            如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件；</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"selectAllOrderByClause"</span> <span class="attr">value</span>=<span class="string">"age desc,username asc"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useActualColumnNames"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- generatedKey用于生成生成主键的方法，</span></span><br><span class="line"><span class="comment">            如果设置了该元素，MBG会在生成的&lt;insert&gt;元素中生成一条正确的&lt;selectKey&gt;元素，该元素可选</span></span><br><span class="line"><span class="comment">            column:主键的列名；</span></span><br><span class="line"><span class="comment">            sqlStatement：要生成的selectKey语句，有以下可选项：</span></span><br><span class="line"><span class="comment">                Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()</span></span><br><span class="line"><span class="comment">                DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()</span></span><br><span class="line"><span class="comment">                DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1</span></span><br><span class="line"><span class="comment">                Derby     :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()</span></span><br><span class="line"><span class="comment">                HSQLDB    :相当于selectKey的SQL为：CALL IDENTITY()</span></span><br><span class="line"><span class="comment">                Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1</span></span><br><span class="line"><span class="comment">                MySql     :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()</span></span><br><span class="line"><span class="comment">                SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()</span></span><br><span class="line"><span class="comment">                SYBASE    :相当于selectKey的SQL为：SELECT @@IDENTITY</span></span><br><span class="line"><span class="comment">                JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性</span></span><br><span class="line"><span class="comment">        &lt;generatedKey column="" sqlStatement=""/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，</span></span><br><span class="line"><span class="comment">            比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；</span></span><br><span class="line"><span class="comment">            那么就可以设置searchString为"^CUST_"，并使用空白替换，那么生成的Customer对象中的属性名称就不是</span></span><br><span class="line"><span class="comment">            custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，</span></span><br><span class="line"><span class="comment">            如果使用了columnOverride元素，该属性无效；</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">        &lt;columnRenamingRule searchString="" replaceString=""/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">         <span class="comment">&lt;!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；</span></span><br><span class="line"><span class="comment">            column:要重新设置的列名；</span></span><br><span class="line"><span class="comment">            注意，一个table元素中可以有多个columnOverride元素哈~</span></span><br><span class="line"><span class="comment">          --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用property属性来指定列要生成的属性名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"property"</span> <span class="attr">value</span>=<span class="string">"userName"</span>/&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名</span></span><br><span class="line"><span class="comment">            &lt;property name="javaType" value=""/&gt;</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line">             </span><br><span class="line">            <span class="comment">&lt;!-- jdbcType用于指定该列的JDBC类型 </span></span><br><span class="line"><span class="comment">            &lt;property name="jdbcType" value=""/&gt;</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line">             </span><br><span class="line">            <span class="comment">&lt;!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名</span></span><br><span class="line"><span class="comment">                注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler</span></span><br><span class="line"><span class="comment">                只会生成类似：where id = #&#123;id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler&#125;的参数描述</span></span><br><span class="line"><span class="comment">            &lt;property name="jdbcType" value=""/&gt;</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!-- 参考table元素的delimitAllColumns配置，默认为false</span></span><br><span class="line"><span class="comment">            &lt;property name="delimitedColumnName" value=""/&gt;</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">columnOverride</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">         <span class="comment">&lt;!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现 </span></span><br><span class="line"><span class="comment">            column:指定要忽略的列的名字；</span></span><br><span class="line"><span class="comment">            delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            注意，一个table元素中可以有多个ignoreColumn元素</span></span><br><span class="line"><span class="comment">         &lt;ignoreColumn column="deptId" delimitedColumnName=""/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>ocp-052知识点</title>
    <url>/hexoblog/20190801124210.html</url>
    <content><![CDATA[<h1 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h1><ul>
<li><p>实验</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">system用户</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> LIXL_TEST1 <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> LIXL_TEST1 <span class="keyword">PASSWORD</span> <span class="keyword">EXPIRE</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CREATE</span> <span class="keyword">SESSION</span> <span class="keyword">TO</span> LIXL_TEST1;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">TO</span> LIXL_TEST1 <span class="keyword">WITH</span> <span class="keyword">ADMIN</span> <span class="keyword">OPTION</span>;</span><br><span class="line"></span><br><span class="line">LIXL_TEST1用户</span><br><span class="line">SQL&gt; create table lixl_table1(id number);</span><br><span class="line"></span><br><span class="line">Table created.</span><br><span class="line"></span><br><span class="line">SQL&gt; insert into lixl_table1 values(1);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> lixl_table1 <span class="keyword">values</span>(<span class="number">1</span>)</span><br><span class="line">            *</span><br><span class="line"><span class="keyword">ERROR</span> <span class="keyword">at</span> line <span class="number">1</span>:</span><br><span class="line">ORA<span class="number">-01950</span>: <span class="keyword">no</span> <span class="keyword">privileges</span> <span class="keyword">on</span> <span class="keyword">tablespace</span> <span class="string">'USERS'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> tab1_index_id <span class="keyword">ON</span> lixl_table1(<span class="keyword">id</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>给用户赋予表空间操作的权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 想要insert成功，需要这个权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">unlimited</span> <span class="keyword">tablespace</span> <span class="keyword">to</span>  LIXL_TEST;</span><br><span class="line">```     </span><br><span class="line"></span><br><span class="line">- 查看系统默认的用户表空间</span><br><span class="line">```sql</span><br><span class="line"><span class="keyword">SELECT</span> DEFAULT_TABLESPACE <span class="keyword">FROM</span> dba_users <span class="keyword">WHERE</span> USERNAME=<span class="string">'LIXL_TEST'</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看表所属表空间</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TABLE_NAME,TABLESPACE_NAME <span class="keyword">FROM</span> DBA_TABLES <span class="keyword">WHERE</span> TABLE_NAME=<span class="keyword">upper</span>(<span class="string">'lixl_table1'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>REVOKE ROLE 撤销权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlplus / as sysdba</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建用户</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> USER_01 <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> USER_01;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> USER_02 <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> USER_02;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建角色</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">role</span> ROLE_01;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给角色授权</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CREATE</span> <span class="keyword">SESSION</span>, <span class="keyword">CREATE</span> <span class="keyword">TABLE</span>, <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> <span class="keyword">TO</span> ROLE_01;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给用户赋角色</span></span><br><span class="line"><span class="keyword">GRANT</span> ROLE_01 <span class="keyword">TO</span> USER_01;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除角色</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">ROLE</span> ROLE_01;</span><br></pre></td></tr></table></figure>

<ul>
<li>通过role授权(如crate table)，不能直接revoke用户的create table权限</li>
</ul>
</li>
</ul>
<h1 id="RMAN"><a href="#RMAN" class="headerlink" title="RMAN"></a>RMAN</h1><p>Recovery Manager是用于备份(backup)、还原(restore)和恢复(recover)Oracle数据库的工具。</p>
<ul>
<li><p>Ora-19804<br>Ora-19804: Cannot reclaim 45561856 bytes disk space from 8589934592 limit<br>启动数据库到Nomount: startup nomount<br>扩大闪回恢复区的大小:show parameter db_recovery<br>执行SQL语句:alter system set db_recovery_file_dest_size=5g scope=both;<br>打开数据库:alter database mount;<br>打开数据库:alter database open;<br>进入RMAN模式:rman target sys/admin nocatalog<br>RMAN删除过期的备份文件与归档文件:delete backupset;<br>RMAN删除过期的备份文件与归档文件:delete archivelog all;<br>检查一下Flashrecovery Area的使用情况:select * from v$flash_recovery_area_usage;</p>
</li>
<li><p>增量备份</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开控制文件自动备份</span><br><span class="line">RMAN&gt; CONFIGURE CONTROLFILE AUTOBACKUP ON;</span><br><span class="line">打开备份优化</span><br><span class="line">RMAN&gt; CONFIGURE BACKUP OPTIMIZATION ON;</span><br><span class="line"></span><br><span class="line">执行0级差异增量备份操作</span><br><span class="line">RMAN&gt; BACKUP INCREMENTAL LEVEL 0 DATABASE;</span><br></pre></td></tr></table></figure>
</li>
<li><p>rman恢复数据库</p>
<ul>
<li><p>归档模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">startup force mount;</span><br><span class="line">restore database;</span><br><span class="line">alter database open resetlogs;</span><br></pre></td></tr></table></figure>
</li>
<li><p>非归档模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">startup force nomount;</span><br><span class="line">restore controlfile;</span><br><span class="line">alter database mount;</span><br><span class="line">restore database;</span><br><span class="line">recover database noredo;</span><br><span class="line">alter database open resetlogs;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>备份文件类型</p>
<ul>
<li><p>backupset 备份集</p>
</li>
<li><p>image copy（映像文件） 备份</p>
</li>
<li><p>备份类型之<a href="https://docs.oracle.com/cd/B28359_01/backup.111/b28270/rcmcncpt.htm#BRADV89487" target="_blank" rel="noopener">Proxy Copies</a><br>Proxy Copies<br>During a proxy copy, RMAN turns over control of the data transfer to a media manager that supports this feature. Proxy copy can only be used with media managers that support it and cannot be used with channels of type DISK. The PROXY option of the BACKUP command specifies that a backup should be a proxy copy.<br>在Proxy Copies内，RMAN将数据传输的控制权转交给支持此功能的媒体管理器。代理副本只能与支持它的媒体管理器一起使用，不能与类型的通道一起使用DISK。该PROXY的选项该BACKUP命令指定备份应该是代理副本。</p>
<p>For each file that you attempt to back up with the BACKUP PROXY command, RMAN queries the media manager to determine whether it can perform a proxy copy. If the media manager cannot proxy copy the file, then RMAN backs the file up as if the PROXY option had not been used. (Use the PROXY ONLY option to force RMAN to fail if a proxy copy cannot be performed.)<br>对于您尝试使用的备份的每个文件 BACKUP PROXY命令，RMAN查询媒体管理器以确定它是否可以执行代理副本。如果媒体管理器无法代理复制文件，则RMAN会将文件备份，就像PROXY未使用该选项一样。（使用PROXY ONLY 如果无法执行代理副本，则强制RMAN失败的选项。）</p>
<p>Note that control files are never backed up with proxy copy. If the PROXY option is specified on an operation backing up a control file, then it is silently ignored for the purposes of backing up the control file.<br>请注意，控制文件永远不会使用代理副本进行备份。如果在PROXY备份控制文件的操作上指定了该选项，则会以静默方式忽略该选项以备份控制文件。</p>
</li>
</ul>
</li>
</ul>
<h2 id="metadata"><a href="#metadata" class="headerlink" title="metadata"></a>metadata</h2><p>元数据存储在control file   </p>
<h1 id="flashback"><a href="#flashback" class="headerlink" title="flashback"></a>flashback</h1><p>恢复误删除表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 如误删除EMP表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> EMP;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询回收站是否存在该表记录</span></span><br><span class="line"><span class="keyword">select</span> object_name,original_name,partition_name,<span class="keyword">type</span>,ts_name,createtime,droptime </span><br><span class="line">  <span class="keyword">from</span> recyclebin</span><br><span class="line"> <span class="keyword">where</span> original_name = <span class="string">'EMP'</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">-- 恢复</span></span><br><span class="line"> flashback table EMP to before <span class="keyword">drop</span>;</span><br></pre></td></tr></table></figure>

<h1 id="pfile"><a href="#pfile" class="headerlink" title="pfile"></a>pfile</h1><p>使用pfile启动数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看系统使用的spfile还是pfile启动的</span></span><br><span class="line"><span class="comment">-- 如果使用的pfile就没有内容</span></span><br><span class="line"><span class="keyword">show</span> parameter <span class="keyword">spfile</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 从spfile创建pfile</span></span><br><span class="line"><span class="keyword">create</span> pfile=<span class="string">'/u01/app/pfile.txt'</span> <span class="keyword">from</span> <span class="keyword">spfile</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定pfile startup daatabase</span></span><br><span class="line">startup pfile='/u01/app/pfile.txt';</span><br></pre></td></tr></table></figure>

<h1 id="AWR"><a href="#AWR" class="headerlink" title="AWR"></a>AWR</h1><p><a href="https://blog.csdn.net/xiangsir/article/details/8648615" target="_blank" rel="noopener">Oracle 11g AWR 系列一：AWR 的基本概念理解</a><br>Automatic Workload Repository (AWR)<br>收集、处理和维护用于问题诊断的性能统计信息。<br>该数据既存在于数据块中，也存在于内存中。<br>AWR 收集的数据可以通过报告和视图进行查看。</p>
<p>AWR 处理和收集的统计信息包括：<br>1.确定数据块 segment 访问路径和使用情况的对象统计信息<br>2.基于数据库活动的时间使用情况的时间模型统计信息，可在 V$SYS_TIME_MODEL 和 V$SESS_TIME_MODEL 视图中查看<br>3.V$SYSSTAT 和 V$SESSTAT 视图中收集的一些 sytem 和 session 的统计信息<br>4.按照 elapsed time 和 CPU time 等条件在系统上筛选出的产生较高负载的 SQL 语句<br>5.ASH(ctive Session History，活动会话历史记录)统计信息——最近的 session 活动的历史记录</p>
<h1 id="IPS"><a href="#IPS" class="headerlink" title="IPS"></a>IPS</h1><p>(Incident Packaging Service)<a href="https://www.linuxidc.com/Linux/2015-10/124226.htm" target="_blank" rel="noopener">事件打包服务</a><br>利用这个打包事件压缩的文件夹提交给oracle的支持来帮助解决分析问题。<br>创建一个事件包，将添加一个或多个相关的问题到打包文件中。其中包括trace文件，dump文件等。<br>缺省情况下，每一个问题的事件包仅仅包括第一个和最后三个事件。事件包包含所有可以用于诊断的事件。也可以指定事件发生的时间或数量范围来打包。</p>
<h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><p>锁是一种保护机制， 用于管理对共享资源的并发访问。<br>oracle 数据库是多用户数据库， 可以并发操作。<br>锁避免了并发操作带来的数据不一致情况。</p>
<ul>
<li><p>DML、事务及锁的关系<br>DML 操作用到的两种锁：<br>受影响记录上的排它锁 exclusive<br>受影响表上的共享锁 shared</p>
<ul>
<li>排它锁： 当前会话(事务)加锁后， 其他会话不能加锁， 只能等待。<br>行级别排他锁，保护这行的数据，防止其他会话修改这些行。 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询时给整行加锁</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> EMP <span class="keyword">FOR</span> <span class="keyword">UPDATE</span> <span class="keyword">NOWAIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给指定SAL列加锁</span></span><br><span class="line"><span class="keyword">SELECT</span> SAL <span class="keyword">FROM</span> EMP <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>只锁定修改的行，缩小加锁范围。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 如： session1 update 一行， session2 update 此行会等待。 但可以 update 其他行。</span></span><br><span class="line"><span class="keyword">UPDATE</span> EMP <span class="keyword">SET</span> SAL=<span class="number">1000</span> <span class="keyword">WHERE</span> EMPNO=<span class="number">7369</span> ;</span><br></pre></td></tr></table></figure>

<ul>
<li>共享锁： 可以加多份。 表级别， 保护表的结构， 防止其他会话使用 DDL 语句修改表的定义。<br>如： session1 做 update 操作时， session2 不能把表删了， 不能把字段删了。</li>
</ul>
</li>
<li><p>死锁与锁等待<br>产生死锁至少存在两个锁 及多于两个线程。</p>
<ul>
<li>行级锁死锁示例<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 一。 session1</span></span><br><span class="line"><span class="keyword">UPDATE</span> EMP <span class="keyword">SET</span> SAL=<span class="number">8000</span> <span class="keyword">WHERE</span> EMPNO=<span class="number">7788</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 二。 session2</span></span><br><span class="line"><span class="keyword">UPDATE</span> EMP <span class="keyword">SET</span> SAL=sal*<span class="number">2</span> <span class="keyword">WHERE</span> EMPNO=<span class="number">7369</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 三。 session1</span></span><br><span class="line"><span class="keyword">UPDATE</span> EMP <span class="keyword">SET</span> SAL=<span class="number">8000</span> <span class="keyword">WHERE</span> EMPNO=<span class="number">7369</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 四。 session2</span></span><br><span class="line"><span class="keyword">UPDATE</span> EMP <span class="keyword">SET</span> SAL=sal*<span class="number">2</span> <span class="keyword">WHERE</span> EMPNO=<span class="number">7788</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>进行步骤三时，session1出现锁等待。<br>进行步骤四时，session2出现锁等待，同时session1出现死锁。   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SCOTT@PROD&gt; UPDATE EMP SET SAL=8000 WHERE EMPNO=7369;</span><br><span class="line">UPDATE EMP SET SAL=8000 WHERE EMPNO=7369</span><br><span class="line">*</span><br><span class="line">ERROR at line 1:</span><br><span class="line">ORA-00060: deadlock detected while waiting for resource</span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line">原因分析：</span><br><span class="line">步骤一 session1获取锁A，</span><br><span class="line">步骤二 session2获取锁B，</span><br><span class="line">步骤三 session1获取锁B（获取不到锁，处于锁等待状态）</span><br><span class="line">步骤四 session2获取锁A（也获取不到锁，并且发生死锁）</span><br><span class="line"></span><br><span class="line">解决：</span><br><span class="line">oracle检测到死锁时会自动释放其中一个锁，但另一个线程还处于锁等待状态。</span><br><span class="line">```sql</span><br><span class="line">-- 查看处于锁等待的会话</span><br><span class="line">SELECT SID, EVENT, blocking_session,USERNAME FROM V$SESSION WHERE blocking_session IS NOT NULL;</span><br><span class="line"></span><br><span class="line">-- 查看当前会话ID</span><br><span class="line">select userenv(&apos;sid&apos;) from dual;</span><br></pre></td></tr></table></figure>

<p>发生锁等待，说明应用程序的处理事务逻辑有问题，需要调整应用中的DML了，<br>可以通过oracle日志及代码查找出现死锁的语句然后调整业务逻辑。</p>
</li>
</ul>
<h1 id="OLTP与OLAP"><a href="#OLTP与OLAP" class="headerlink" title="OLTP与OLAP"></a>OLTP与OLAP</h1><p>On-Line Transaction Processing联机事务处理过程</p>
<ul>
<li>与事务、锁冲突、多线程等有关</li>
</ul>
<p>On-Line Analytical Processing 联机分析处理过程</p>
<h1 id="系统参数"><a href="#系统参数" class="headerlink" title="系统参数"></a>系统参数</h1><ul>
<li><a href="https://blog.csdn.net/dave_sunny/article/details/9166727" target="_blank" rel="noopener">AUDIT_TRAIL</a><br>用于控制数据库审计 <a href="http://blog.itpub.net/26736162/viewspace-2140644/" target="_blank" rel="noopener">审计功能</a></li>
</ul>
<h1 id="IOT"><a href="#IOT" class="headerlink" title="IOT"></a>IOT</h1><p>Oracle提供了多种数据表存储结构。<br>最常见的就是三种，分别为堆表（Heap Table）、索引组织表（Index Organization Table，简称为IOT）和聚簇表（Cluster Table）。<br>Heap Table是我们在Oracle中最常使用的数据表，也是Oracle的默认数据表存储结构</p>
<ul>
<li>Index Organized Table <a href="https://blog.csdn.net/zhangxinrun/article/details/8103078" target="_blank" rel="noopener">索引组织表</a></li>
</ul>
<h1 id="index"><a href="#index" class="headerlink" title="index"></a>index</h1><p>unusable rebuild </p>
<h1 id="SGA"><a href="#SGA" class="headerlink" title="SGA"></a>SGA</h1><p>AMM时还需要手动管理的组件：redo log buffer、keep buffer pool</p>
<h1 id="space-management"><a href="#space-management" class="headerlink" title="space management"></a>space management</h1><p>使用bitmap管理相邻空闲块<br>ASSM或MSSM管理一个表空间内的空闲块</p>
<h1 id="fast-recovery-area-size"><a href="#fast-recovery-area-size" class="headerlink" title="fast recovery area size"></a>fast recovery area size</h1><p>db_recovery_file_dest_size =5G<br>重新设置的时候，不足的空间会自动删除过时的归档日志</p>
<h1 id="dbca"><a href="#dbca" class="headerlink" title="dbca"></a>dbca</h1><p>oracle服务处于nomount状态时，使用dbca删除数据库，只删除服务，不删除dbf文件</p>
<h1 id="redo与undo"><a href="#redo与undo" class="headerlink" title="redo与undo"></a>redo与undo</h1><h1 id="external-table"><a href="#external-table" class="headerlink" title="external table"></a>external table</h1><p><a href="https://www.cnblogs.com/ilifeilong/p/7648193.html" target="_blank" rel="noopener">https://www.cnblogs.com/ilifeilong/p/7648193.html</a></p>
<h1 id="incremenal-checkpoint"><a href="#incremenal-checkpoint" class="headerlink" title="incremenal checkpoint"></a>incremenal checkpoint</h1><p>ckpt增量检查点<br>作用：DBWn将脏块写入dbf文件时执行<br>触发时机：3秒、LGWn触发</p>
<h1 id="PL-SQL-package"><a href="#PL-SQL-package" class="headerlink" title="PL/SQL package"></a>PL/SQL package</h1><p>PL/SQL包（package）一旦创建被存储在oracle数据库中，由两部分组成：<br>（1）.包规范（specification）一些包的定义信息，类型、记录、变量、常量、异常定义、游标和子程序；<br>（2）包体（Body）：包体是对包规范中声明的子程序的实现部分<br>置于规范的所有对象被称为公共对象。任何子程序在封装主体中没有包定义但编码被称为私有对象。</p>
<h1 id="oracle-lock"><a href="#oracle-lock" class="headerlink" title="oracle lock"></a>oracle lock</h1><p>TM lock 表级锁<br>TX lock 行级锁或事务锁<br>select 无锁<br>select * from for update 行级排他锁<br>DML 行级排他锁<br>DDL 表级排他锁</p>
<h1 id="INITIALLY-IMMEDIATE"><a href="#INITIALLY-IMMEDIATE" class="headerlink" title="INITIALLY IMMEDIATE"></a>INITIALLY IMMEDIATE</h1><p>一般情况下（默认情况下），执行语句是立即检查约束(immediate),不能延迟<br>特殊情况下，也可以设置为提交事务时检查约束(DEFERRED)，也称延迟约束<br>设置延迟约束deferrable initially immediate<br>如果创建时没设置，则无法在后来使约束成为延迟约束。延迟约束一般用于外键<br>not deferrable | deferrable [ initially { immediate | deferred } ]。<br>not deferrable 是不可延迟，并且约束也无法更改为可延迟状态。约束会在每一句sql statement 之后都进行 check，不符合则 roll back<br>deferrable 是可延迟状态，在 deferrable 状态时又有2个选项，创建时缺省是initially immediate，即约束会在每一句sql statement 之后都进行 check，效果等同于not deferrable，但是可以修改延迟状态。<br>initially deferred 约束会在整个事务进行commit 时check，如果不符合则roll back<br>在deferrable状态下，可以通过set constraints修改 immediate或者deferred<br>约束的状态分为<br>ENABLE VALIDATE:无法输入违法约束的行，而且表中的所有行都符合约束，约束新行也约束现有数据<br>Disable NOVALIDATE：可以输入任何数据，表中可能已经存在不合要求的的数据<br>ENABLE NOVALIDATE：表中已经存在不合要求的数据，但现在输入的所有数据必须符合要求<br>DISABLE VALIDATE：表中所有的数据都符合约束，但新行未必如此.约束上的索引也会被删除</p>
<h1 id="opatch"><a href="#opatch" class="headerlink" title="opatch"></a>opatch</h1><p>oracle打补丁工具<br>默认安装，位置./$ORCLE_HOME/OPatch/opatch version<br>在线升级补丁</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ./opatch apply online -connectString PROD:sys:oracle</span><br><span class="line">``` </span><br><span class="line">查看本机补丁列表详情</span><br></pre></td></tr></table></figure>

<p>$ ./opatch lsinventory -detail</p>
<pre><code>
# AUDIT_TRAIL
AUDIT_TRAIL启用或禁用数据库审计。当设置该参数为NONE或FALSE时，将禁止数据库审计；当设置该参数为OS时，将激活数据库审计，并将审计记录写入到OS审计跟踪文件中；当设置该参数为DB或TRUE时，将激活数据库审计，并将审计记录写入到数据字典SYS.AUD$中；当设置该参数为DB_EXTENDED时，不仅将审计记录写入到数据字典SYS.AUD$中，还会填充该数据字典的SQLBIND和SQLTEXT列。
取值说明:
none 禁用数据库审计
os 启用数据库审计，并将数据库审计记录定向到操作系统审计记录
db 启用数据库审计，并将数据库所有审计记录定向到数据库的SYS.AUD$表
db,extended 启用数据库审计，并将数据库所有审计记录定向到数据库的SYS.AUD$表。另外，填充SYS.AUD$表的SQLBIND 列和SQLTEXT CLOB 列。
xml 启用数据库审计，并将所有记录写到XML格式的操作系统文件中。
xml,extended 启用数据库审计，输出审计记录的所有列，包括SqlText和SqlBind的值。
你可以使用SQL语句AUDIT来设置审计选项，不管如何设置此参数。 
本题开启审计并对EMP表上的所有操作进行审计 audit all on Emp 

# db link
默认private只有当前用户访问，public所有用户可访问

# expdp
可以导出view/sequence/package

# trace files
Trace file：跟踪文件一般由各个后台进程生成，一般在遇到错误时生成。这些文件与警报日志一起放在跟踪目录中
跟踪文件是包含用于调查问题的诊断数据的管理文件。此外，跟踪文件还可以为应用程序或实例的调优提供指导，每个服务器和后台进程都可以周期性地写入相关的跟踪文件。关于流程环境、状态、活动和错误的文件信息。
SQL跟踪工具还创建跟踪文件，这些文件提供关于单个SQL语句的性能信息。要启用对客户机标识符、服务、模块、操作、会话、实例或数据库的跟踪，必须在DBMS_MONITOR包中执行适当的过程，或者使用Oracle Enterprise Manager。
转储是一种特殊类型的跟踪文件。虽然跟踪往往是诊断数据的连续输出，但转储通常是响应事件(例如事件)的诊断数据的一次性输出。当发生事件时，数据库将一个或多个转储写入为该事件创建的事件目录。事件转储还包含文件名中的事件号

# materialized view
物化视图，需要空间(create table权限)

# oracle grid
要先创建os dba group和os user account

# SRVCTL 
可以用来添加和删除数据库，关闭数据库实例
https://blog.csdn.net/w892824196/article/details/79295593

# Optimizer Statistics
https://docs.oracle.com/cd/E25178_01/server.1111/e16638/stats.htm 
https://yq.aliyun.com/articles/283792   
oracle优化器对一个sql语句检测所有可能的执行计划并选择一个成本值最小的,这里的成本代表了一个特定执行计划的资源使用情况.为了让优化器能准确的判断一个执行计划的成本它必须要关于sql语句要访问的所有对象(表或索引)的信息同时还要有运行sql语句的系统信息.

# </code></pre>]]></content>
  </entry>
</search>
